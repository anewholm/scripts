#!/bin/bash

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
NC="$(tput sgr0)"
TICK="${GREEN}✓${NC}"
CROSS="${RED}✘${NC}"

# This script installs ALL Acorn plugins and runs the system
# It can be run from within an existing Laravel / Winter installation
# or to install the entire framework from scratch
run_dir=`pwd` # Bald
script_dir=`dirname $(realpath $0)`
script=`basename $0`
install_dir=/var/www
install_grp=www-data

name=$1
password=$2
db_port=$3
outeruser=$USER

# --no-scripts
no_scripts=

# -------------------------------------------- Sanitise inputs
if [ "$(id -u)" == "0" ]; then
	echo "${RED}ERROR${NC}: Do not run this script as root"
	exit 1
fi
if [ ! -f $script_dir/acorn-setup-database ]; then
	echo "${RED}ERROR${NC}: acorn-setup-database required"
	exit 1
fi
if [ ! -f $script_dir/acorn-setup-hostname ]; then
	echo "${RED}ERROR${NC}: acorn-setup-database required"
	exit 1
fi
if [ -z "$name" ];     then
	echo "${RED}ERROR${NC}: name parameter required"
	exit 1
fi
if [ -z "$password" ]; then password="QueenPool1@"; fi
if [ -z "$db_port" ];  then db_port="5432"; fi

# -------------------------------------------- 3rd party installs
if [ -z "$(which php)" ]; then
	echo "${GREEN}INFO${NC}: Installing PHP"
	sudo apt install -y php php-pgsql
fi

if [ -z "$(which apache2ctl)" ]; then
	echo "${GREEN}INFO${NC}: Installing Apache"
	sudo apt install -y apache2
fi

if [ -z "$(which composer)" ]; then
	echo "${GREEN}INFO${NC}: Installing Composer v2.5.8"
	# https://getcomposer.org/download/
	# e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02
	php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
	php -r "if (hash_file('sha384', 'composer-setup.php') === 'dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
	if [ -f composer-setup.php ]; then
		php composer-setup.php
		php -r "unlink('composer-setup.php');"
		sudo mv composer.phar /usr/local/bin/composer
	else
		echo "${RED}ERROR${NC}: Composer setup not found. Has the version been upgraded? New hash?"
		exit 1
	fi
fi
if [ "$(composer --version | cut -d " " -f 3  | cut -d "." -f 1)" -lt 2 ]; then
	echo "${RED}ERROR${NC}: Composer >= v2.5.8 required"
	exit 1
fi

if [ -z "$(which psql)" ]; then
	sudo apt install -y postgresql postgresql-contrib
fi
# Copied from Winter installation guide
# sudo apt install -y php php-curl php-xml php-gd php-json php-mbstring php-mysql php-sqlite3 php-zip
# sudo apt install -y php-ctype php-fileinfo

if [ -z "$(groups | grep $install_grp)" ]; then
	echo "${RED}ERROR${NC}: $outeruser was not in the Apache2 web-server group $install_grp, so you have been added to it now. Please log out and in again from your laptop and then run this $0 script again"
	sudo usermod -a -G $install_grp $outeruser
	exit 1
fi

# Work only in the standard install place
if [ ! -d $install_dir ]; then
	echo "${YELLOW}WARNING${NC}: $install_dir was not found, creating..."
	sudo mkdir -p $install_dir
	sudo chown $install_grp:$install_grp .; sudo chmod g+rw .
fi
cd $install_dir

# -------------------------------------------- Website Installation
if [ -d $name ]; then
	if [ -z "$(ls $name)" ]; then
		echo "${YELLOW}WARNING${NC}: Directory [$name] already exists. Entering..."
	else
		read -p "${YELLOW}WARNING${NC}: Directory [$name] exists and is not empty. Continue? [Y/n] " yn
		case $yn in
			[Yy]* )
				;;
			* )
				echo "ok, exciting process. please resolve manually"
				exit 1;
				;;
		esac
	fi
	cd $name
else
	echo "${GREEN}INFO${NC}: Installing latest Winter into directory $(pwd)/${YELLOW}$name${NC}"
	echo "  Note that Winter:1.2.6=>7 has incompatible changes for Trait HasRelations"
	# https://getcomposer.org/doc/03-cli.md#create-project
	# We have our own install procedures below, so we disable the standard scripts
	composer create-project wintercms/winter $name --no-scripts
	cd $name
	chmod +x artisan

	linecount_env=0
	if [ -f .env ]; then linecount_env=`wc -l .env | cut -d " " -f 1`; fi
	if [ $linecount_env -le 2 ]; then
		echo "${YELLOW}WARNING${NC}: Auto-populating> 2 the .env file"
		echo "APP_NAME=intranet
APP_DEBUG=true
APP_URL='http://$hostname'

# PostgreSQL only
DB_CONNECTION='pgsql'
DB_HOST='127.0.0.1'
DB_PORT=$db_port
DB_DATABASE='$name'
DB_USERNAME='$name'
DB_PASSWORD='$password'

CACHE_DRIVER='file'
SESSION_DRIVER='file'
QUEUE_CONNECTION='sync'

# Default logging email setup
MAIL_MAILER=log
MAIL_LOG_CHANNEL=null
MAIL_HOST=null
MAIL_PORT=null
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS=noreply@example.com
MAIL_FROM_NAME="${APP_NAME}"

# Example SMTP setup. Set the username in your account
# MAIL_MAILER='smtp'
# MAIL_ENCRYPTION='tls'
# MAIL_HOST='smtp.stackmail.com'
# MAIL_PASSWORD=null
# MAIL_PORT=465
# MAIL_USERNAME=null

ROUTES_CACHE=false
ASSET_CACHE=false
LINK_POLICY='detect'
ENABLE_CSRF=true
DATABASE_TEMPLATES=false
RESTRICT_BASE_DIR=false # We have sym-linked plugins
" >> .env
	fi

	# This will also update the Laravel .env file to use the created database
	$script_dir/acorn-setup-database pgsql $name
	if [ "$?" != "0" ]; then exit 1; fi

	# This will also update the Laravel .env file to use the hostname (.laptop)
	sudo $script_dir/acorn-setup-hostname $name
	if [ "$?" != "0" ]; then exit 1; fi
fi
hostname=$name.laptop
winter_version=`composer show winter/storm | grep ^versions | cut -d ':' -f 2 | cut -d v -f 2`
echo "${GREEN}INFO${NC}: Winter v${YELLOW}$winter_version${NC} detected"

# Initial installation
# We could also use ./artisan winter:install --no-interaction
echo "${GREEN}INFO${NC}: composer install"
composer install
echo "${GREEN}INFO${NC}: Initial winter system artisan migrate"
php artisan migrate
if [ "$?" != 0 ]; then
	echo "${RED}ERROR${NC}: Migration failed, exiting"
	exit 0
fi
php artisan key:generate

# -------------------------------------------- Install 3rd party modules
echo "${GREEN}INFO${NC}: composer require $no_scripts 3rd party vendor modules"
# IMAP & SMTP
if [ ! -d vendor/webklex/php-imap ];     then composer require $no_scripts webklex/php-imap;     fi
if [ ! -d vendor/webklex/laravel-imap ]; then composer require $no_scripts webklex/laravel-imap; fi
sed -i "s|MAIL_HOST=\".*\"|MAIL_HOST=\"smtp.stackmail.com\"|" .env
sed -i "s|MAIL_PORT=\".*\"|MAIL_PORT=465|" .env

# QR Codes are supported in core now
if [ ! -d vendor/simplesoftwareio/simple-qrcode ]; then composer require $no_scripts simplesoftwareio/simple-qrcode; fi

# Copy Kurdish system and backend lang.php files in to place
cp -r $script_dir/winter/system/lang/ku modules/system/lang
if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install system module ku\lang.php"; exit 1; fi
cp -r $script_dir/winter/backend/lang/ku modules/system/lang
if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install backend module ku\lang.php"; exit 1; fi
composer require $no_scripts winter/wn-translate-plugin
if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
composer require $no_scripts winter/wn-location-plugin
if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
composer require $no_scripts winter/wn-tailwindui-plugin # Menus
if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
composer require $no_scripts staudenmeir/eloquent-has-many-deep # New Deep relations
if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi

# We use acorn-create-system usually, so no builder
# composer require $no_scripts winter/wn-builder-plugin
# if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi

# -------------------------------------------- Patches
echo "${GREEN}INFO${NC}: Pre-Patches for Winter v${YELLOW}$winter_version${NC}"
# TODO: The tailwind patch will not work because app.js is now minified
if [ -f $script_dir/acorn-apply-patch-directory ] && [ -d $script_dir/winter/patches-pre ]; then
	$script_dir/acorn-apply-patch-directory "$script_dir/winter/patches-pre"
fi

# -------------------------------------------- Install AA modules and plugins
echo "${GREEN}INFO${NC}: composer require $no_scripts AA modules (from AA gitlab)"
local_acorn=/var/www/plugins/acorn
for repo_path in $local_acorn/*/; do
	repo_name=`basename "$repo_path"`
	repo_fqn="acorn/$repo_name"
	
	echo "${GREEN}INFO${NC}: Installing ${YELLOW}$repo_fqn${NC}"
	git config --global --add safe.directory "${repo_path%/}"
	composer config repositories.$repo_name path "$repo_path"
	composer require $no_scripts "$repo_fqn @dev"
done

if [ "$yn" == 'y.not' ]; then
	cd modules
	if [ ! -d acorn ]; then
		if [ -d $local_acorn/acorn ]; then 
			arealpath=`realpath $local_acorn/acorn`
			cp -rL $local_acorn/acorn .
			echo "${GREEN}INFO${NC}: Copied local copy of acorn repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/acorn.git
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to checkout first office repository. Probably you do not have permissions. Please resolve and start again."; exit 1; fi
		fi
	fi
	if [ ! -d dbauth ]; then 
		if [ -d $local_acorn/dbauth ]; then 
			arealpath=`realpath $local_acorn/dbauth`
			cp -rL $local_acorn/dbauth .
			echo "${GREEN}INFO${NC}: Copied local copy of dbauth repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/dbauth.git
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
		fi
	fi
	cd ..

	cd plugins
	mkdir -p acorn
	cd acorn

	if [ ! -d rtler ];     then
		if [ -d $local_acorn/rtler ]; then 
			arealpath=`realpath $local_acorn/rtler`
			cp -rL $local_acorn/rtler .
			echo "${GREEN}INFO${NC}: Copied local copy of rtler repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/rtler.git
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to checkout first office repository. Probably you do not have permissions. Please resolve and start again."; exit 1; fi
		fi
	fi
	if [ ! -d backendlocalization ];  then
		if [ -d $local_acorn/backendlocalization ]; then 
			arealpath=`realpath $local_acorn/backendlocalization`
			cp -rL $local_acorn/backendlocalization .
			echo "${GREEN}INFO${NC}: Copied local copy of backendlocalization repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/backendlocalization.git
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
		fi
	fi
	if [ ! -d user ];  then
		if [ -d $local_acorn/user ]; then 
			arealpath=`realpath $local_acorn/user`
			cp -rL $local_acorn/user .
			echo "${GREEN}INFO${NC}: Copied local copy of user repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/user.git
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
		fi
	fi
	if [ ! -d location ];  then
		if [ -d $local_acorn/location ]; then 
			arealpath=`realpath $local_acorn/location`
			cp -rL $local_acorn/location .
			echo "${GREEN}INFO${NC}: Copied local copy of location repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/location.git;
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
		fi
	fi
	if [ ! -d messaging ]; then
		if [ -d $local_acorn/messaging ]; then 
			arealpath=`realpath $local_acorn/messaging`
			cp -rL $local_acorn/messaging .
			echo "${GREEN}INFO${NC}: Copied local copy of messaging repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/messaging.git;
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
		fi
	fi
	if [ ! -d calendar ];  then
		if [ -d $local_acorn/calendar ]; then 
			arealpath=`realpath $local_acorn/calendar`
			cp -rL $local_acorn/calendar .
			echo "${GREEN}INFO${NC}: Copied local copy of calendar repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/calendar.git;
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
		fi
	fi
	if [ ! -d reporting ];  then
		if [ -d $local_acorn/reporting ]; then 
			arealpath=`realpath $local_acorn/reporting`
			cp -rL $local_acorn/reporting .
			echo "${GREEN}INFO${NC}: Copied local copy of reporting repository (${YELLOW}$arealpath${NC})"
		else 
			git clone git@gitlab.acorn.org:office/reporting.git;
			if [ "$?" != 0 ]; then echo "${RED}ERROR${NC}: Failed to install package"; exit 1; fi
		fi
	fi
	cd ../..

	# TODO: Generate /storage/framework/classes.php because we have installed via git, not composer
	# php artisan package:discover or maybe
	# php artisan plugin:refresh location
	# php artisan plugin:refresh messaging
	# php artisan plugin:refresh calendar

	# if [ -f $script_dir/acorn-add-websockets ]; then
	#	$script_dir/acorn-add-websockets
	# fi
fi

# -------------------------------------------- Patches
# service-providers.php patch will add the service providers in the correct order
echo "${GREEN}INFO${NC}: Post-Patches for Winter v${YELLOW}$winter_version${NC}"
if [ -f $script_dir/acorn-apply-patch-directory ] && [ -d $script_dir/winter/patches-post ]; then
	$script_dir/acorn-apply-patch-directory "$script_dir/winter/patches-post"
fi

# To generate /storage/framework/packages.php
# echo "${GREEN}INFO${NC}: Package discover"
# php artisan package:discover

# Migrate our new plugins / modules
echo "${GREEN}INFO${NC}: Final artisan migrate"
php artisan migrate
if [ "$?" != 0 ]; then
	echo "${RED}ERROR${NC}: Migration failed, exiting"
	exit 0
fi

# -------------------------------------------- Admin
if [ -d ../scripts ]; then
	echo "${GREEN}INFO${NC}: Linking ${YELLOW}acorn-*${NC} scripts"
	for script in ../scripts/acorn-git-* ../scripts/acorn-create-system ../scripts/acorn-winter-down-up ../scripts/acorn-winter-update-sqls; do
		script_name=`basename "$script"`
		if [ ! -f "$script_name" ]; then ln -s "$script" .; fi
	done
fi

php artisan winter:passwd -q admin password
if [ "$?" == 0 ]; then
	echo "${GREEN}INFO${NC}: ${YELLOW}admin${NC} password set to ${YELLOW}password${NC}"
else
	echo "${RED}ERROR${NC}: ${YELLOW}admin${NC} password not set because user not found"
fi

php artisan winter:passwd -q $name $password
if [ "$?" == 0 ]; then
	echo "${GREEN}INFO${NC}: ${YELLOW}$name${NC} password set to ${YELLOW}$password${NC}"
else
	echo "${YELLOW}WARNING${NC}: ${YELLOW}$name${NC} password not set because user not found"
fi

echo "${YELLOW}WARNING${NC}: DBAuth was installed but not enabled. This is because setup would not have been possible without continually entering the user/pass for all artisan operations. Change .env DB_USERNAME=<DBAUTH> to enable."
read -p "Enable now? [Y/n] " yn
case $yn in
	[Yy]* )
		# FIRST: Create the artisan superuser with current login credentials
		echo "${GREEN}INFO${NC}: Create ${YELLOW}artisan${NC}/${YELLOW}QueenPool1@${NC} superuser"
		./artisan user:create-user -c -s artisan QueenPool1@

		# Switch to <DBAUTH> in .env
		sed -i 's/^DB_USERNAME=.*/DB_USERNAME=<DBAUTH>/' .env
		sed -i 's/^DB_PASSWORD=.*/DB_PASSWORD=<DBAUTH>/' .env
		echo "${GREEN}INFO${NC}: DBAuth enabled."

		# ARTISAN_AUTO_LOGIN will hardcoded use the above artisan superuser from now on
		echo "${GREEN}INFO${NC}: ARTISAN_AUTO_LOGIN & artisan user."
		echo "ARTISAN_AUTO_LOGIN=1" >> .env

		# create-system will now also need its own hardcoded user
		# acorn-create-system is linked above, so it will be present
		if [ -f acorn-create-system ]; then
			echo "${GREEN}INFO${NC}: Create ${YELLOW}create-system${NC}/${YELLOW}QueenPool1@${NC} superuser"
			./artisan user:create-user -c -s createsystem QueenPool1@
		fi
		;;
esac

# Create some AA & backend users with default setup
# These creates will trigger DBAuth if it is enabled
php artisan user:create-user -c -s seeder QueenPool1@ # The lazy created backend seeder should already be present
php artisan user:create-user -c -d -s admin password  # Backend Admin should already be present
php artisan user:create-user -c -d -s $outeruser QueenPool1@
php artisan user:create-user -c -d demo password

# Set the default backend timezone to server timezone
timezone_name=`cat /etc/timezone`
if [ -n "$timezone_name" ]; then 
	echo "${GREEN}INFO${NC}: Setting timezone to server timezone ${YELLOW}$timezone_name${NC}"
else
	timezone_name=Europe/Istanbul
	echo "${YELLOW}WARNING${NC}: ${YELLOW}/etc/timezone${NC} was empty. Setting timezone to ${RED}default${NC} timezone [${YELLOW}$timezone_name${NC}]"
fi
php artisan acorn:set-config cms.backendTimezone $timezone_name

# Usually the Lojistiks plugin is just infrastructure
# TODO: Deployment conofiguration files for spinning up servers. One day :D
if [ -d plugins/acorn/lojistiks ]; then
	php artisan acorn:config-plugin Acorn.Lojistiks infrastructure true
fi

# -------------------------------------------- Security
# Note that our demons auto-run now
# courtesy of our AA module
echo "${GREEN}INFO${NC}: Resettings permissions"
sudo chown -R $install_grp:$install_grp .; sudo chmod -R g+rw .

echo "${GREEN}INFO${NC}: Login in to http://$name.laptop"

