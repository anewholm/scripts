#!/bin/bash

# Distro versions:
#   Ubuntu 22.04, 24.04
#     Ubuntu Vr 	Ubuntu  Codename 	/etc/debian_version 	Debian Version
#     24.04 LTS 	Noble   Numbat 	  trixie/sid 	          13
#     23.10 	    Mantic  Minotaur 	trixie/sid 	          13
#     23.04 	    Lunar   Lobster 	bookworm/sid 	        12
#     22.10 	    Kinetic Kudu 	    bookworm/sid 	        12
#     22.04 LTS 	Jammy   Jellyfish bookworm/sid 	        12
#     21.10 	    Impish  Indri 	  bullseye/sid 	        11
#     21.04 	    Hirsute Hippo 	  bullseye/sid 	        11
#   Kali kali-rolling on Debian 12
#     https://www.kali.org/releases/
#     https://www.kali.org/docs/policy/kali-linux-relationship-with-debian/
#     Kali 2024 is _based_ on Debian 12 (bookworm)
#     Some Debian 11 (bullseye) packages are used, for example PGAdmin4

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
NC="$(tput sgr0)"
TICK="${GREEN}✓${NC}"
CROSS="${RED}✘${NC}"

# Host OS info
distro=`lsb_release -a | grep "Distributor ID:" | cut -d ":" -f 2 | tr -d "\t"`
release=`lsb_release -a | grep "Release:" | cut -d ":" -f 2 | tr -d "\t"`
echo "${YELLOW}Distribution${NC}: $distro, $release"

outeruser=$USER
if [ "$outeruser" == 'root' ]; then
  echo "${RED}ERROR${NC}: Please do not run this script as ${RED}sudo${NC}. Because it cannot know your username"
  exit
fi

# ----------------------------------------- Functions
check ()
{
  if [ "$?" == "1" ]; then
    # Something failed, offer to continue / exit
    printf "${RED}ERROR${NC}: "
    read -p "$1. Continue [y|n]? (y) " yn
    case $yn in
      N|n)
        exit
        break
      ;;
    esac
  fi
}

# -------------------------------------------- Check Internet and APT Update
if [ -n "$(which nc)" ]; then
  echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 2>&1
  check "No internet connection"
fi

echo "Running apt-get ${YELLOW}update and upgrade${NC}... "
sudo apt-get update
check "Failed to update"
sudo apt-get -y upgrade
check "Failed to upgrade"
echo "${GREEN}Done.${NC}"
echo

# -------------------------------------------- Prerequisites
if [ -z "$(which curl)" ]; then
  echo "Installing ${YELLOW}curl${NC}... "
  sudo apt-get install curl -y
  check "Failed to download curl"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which wget)" ]; then
  echo "Installing ${YELLOW}wget${NC}... "
  sudo apt-get install wget -y
  check "Failed to download wget"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which gpg)" ]; then
  echo "Installing ${YELLOW}gpg${NC}... "
  sudo apt-get install gpg -y
  check "Failed to download gpg"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which snap)" ]; then
  echo "Installing ${YELLOW}snap${NC} package manager... "
  sudo apt-get install snapd -y
  check "Failed to download snapd"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which add-apt-repository)" ]; then
  # Probably a Kali distro that does not have Python add-apt-repository by default
  # TODO: We might get Python version issues also
  echo "Installing ${YELLOW}software-properties-common${NC} (add-apt-repository)... "
  sudo apt-get install software-properties-common -y
  check "Failed to download software-properties-common (add-apt-repository)"
  echo "${GREEN}Done.${NC}"
  echo
fi

# -------------------------------------------- Infrastructural Installs
if [ -z "$(which apache2)" ]; then
  echo "Installing ${YELLOW}apache2${NC}... "
  sudo apt-get install apache2 -y
  sudo a2enmod rewrite
  sudo apt-get install libapache2-mod-fcgid -y
  sudo apt-get install libapache2-mod-php -y
  check "Failed to download apache2"
  sudo a2enmod actions fcgid alias proxy_fcgi setenvif
  echo "Setting ServerName to localhost"
  sudo echo "ServerName localhost" >> /etc/apache2/apache2.conf
  sudo service apache2 restart
fi

if [ -z "$(groups | grep www-data)" ]; then
  sudo usermod -a -G www-data $outeruser
  echo "You (${GREEN}$outeruser${NC}) were added to the ${GREEN}www-data${NC} group. This will not be effective until reboot."
  echo "${GREEN}INFO${NC}: Reboot your computer and then run this script again"
  exit
fi

if [ -d /var/www ]; then
  echo "Setting up your ${GREEN}/var/www${NC} directory for www-data group permissions."
  sudo chown -R www-data:www-data /var/www/
  sudo chmod g+wx /var/www/
  sudo chmod -R g+rw /var/www/

  if [ -d ~/scripts ] && [ ! -d /var/www/scripts ]; then
    echo "Linked your ${GREEN}scripts${NC} directory in to /var/www/."
    ln -s ~/scripts /var/www/scripts
  fi

  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which php)" ]; then
  echo "Installing latest ${YELLOW}php${NC}... "
  sudo apt-get install php -y
  check "Failed to download php"
  echo "${GREEN}Done.${NC}"
  echo
fi
# Always try all dependencies
# Other libraries, for database, are installed later with the database software
echo "Installing ${YELLOW}php${NC} libraries (for WinterCMS)... "
sudo apt-get install php-curl php-mbstring phpunit php-zip php-gd php-xml php-json -y
check "Failed to download php libraries"

# Standard PHP is php8.3 or above, so lets load 8.1 also
if [ -z "$(which php8.1)" ]; then
  echo "Installing ${YELLOW}php8.1${NC}... "
  echo "Adding ${YELLOW}ppa:ondrej/php${NC} PHP backport repository and apt key... "
  sudo add-apt-repository ppa:ondrej/php

  sudo apt-get install php8.1 -y
  check "Failed to download php"
  # Other libraries, for database, are installed later with the database software
  sudo apt-get install php8.1-curl php8.1-mbstring php8.1-zip php8.1-gd php8.1-xml -y
  check "Failed to download php libraries"

  # Winter CMS current version requires <= 8.1
  echo "Setting PHP to 8.1 back version"
  whichPhp81=`which php8.1`
  check "PHP 8.1 binary not found"
  sudo update-alternatives --set php $whichPhp81
  echo "${GREEN}Done.${NC}"
  echo
fi


# -------------------------------------------- General Installs
php_version=`php -v | head -n 1 | cut -d ' ' -f 2 | cut -d '.' -f 1,2`
php_xdebug_ini="/etc/php/$php_version/mods-available/xdebug.ini"
if [ ! -f "$php_xdebug_ini" ]; then
  echo "Installing ${YELLOW}XDebug for PHP [$php_version]${NC}... "
  sudo apt install php-xdebug
  #sudo apt install php8.1-xdebug
  #sudo apt install php8.3-xdebug
  if [ ! -f "$php_xdebug_ini" ]; then
   check " Failed to install PHP [$php_version] XDebug"
  fi

  echo "xdebug.profiler_enable_trigger = 1
xdebug.profiler_enable = 0
xdebug.remote_enable = 1
xdebug.remote_autostart = 1
xdebug.mode = develop,debug
xdebug.start_with_request = yes
" >> "$php_xdebug_ini"
  sudo apache2ctl restart

  echo "Now install PHP Debug in VS Code and create the standard run configuration for listening on localhost:9003"
fi

if [ -z "$(which mysql)" ]; then
  echo "Installing ${YELLOW}mysql-server${NC}... "
  sudo apt-get install mysql-server-8.0 mysql-client-8.0 -y
  sudo apt-get install php-mysql
  check "Failed to download mysql"
  while true; do
    read -p "Create user root with password 'QueenPool1@'? [Y] " yn
    case $yn in
      Y|y|"")
        sudo mysql -e "create user 'root'@'localhost' identified by 'QueenPool1@';"
        sudo mysql -e "grant all on *.* to 'root'@'localhost' with grant option;"
        sudo mysql -e "create user 'sz'@'localhost' identified with auth_socket by 'QueenPool1@';"
        sudo mysql -e "grant all on *.* to 'sz'@'localhost' with grant option;"
        sudo mysql -e "flush privileges;"
        break
      ;;
    esac
  done
  echo "${GREEN}Done.${NC}"
  echo
fi
sudo apt-get install php-mysql -y
check "Failed to install php-mysql"
if [ -n "$(which php8.1)" ]; then
  sudo apt-get install php8.1-mysql -y
  check "Failed to install php8.1-mysql"
fi

if [ -z "$(which mysql-workbench-community)" ]; then
  echo "Installing ${YELLOW}MySQL Workbench${NC}... "
  sudo snap install mysql-workbench-community
  check "Failed to download MySQL Workbench"
  echo "  Connecting AppArmour policy"
  sudo snap connect mysql-workbench-community:password-manager-service :password-manager-service
  echo "${GREEN}Done.${NC}"
  echo
fi

# --------------------------------------------------------- Install PostGreSQL 16
postgresql_version=16
apt_postgresql=`apt list --installed postgresql-$postgresql_version  | grep -E installed`
if [ -z "$apt_postgresql" ]; then
  echo "${YELLOW}postgresql-$postgresql_version${NC} installing..."
  echo "Note: PostGreSQL version 16 has bi-directional replication"
  sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  sudo apt-get update
  sudo apt-get install -y postgresql-$postgresql_version
  check "Failed to download postgresql $postgresql_version"

  user_exists=`sudo -u postgres psql postgres -tXAc "SELECT 1 FROM pg_roles WHERE rolname='$outeruser'"`
  if [ "$user_exists" != 1 ]; then
    echo "${GREEN}INFO${NC}: Creating PostGreSQL super-user ${YELLOW}$outeruser${NC}. PLease use password ${YELLOW}@corn.org${NC}:"
    sudo -u postgres createuser -d -e -E -l -P -r -s $outeruser
    check "Failed to create postgresql user ${YELLOW}$outeruser${NC}"
  else
    echo "${YELLOW}WARNING${NC}: User ${YELLOW}$outeruser${NC} already exists. I hope they have connection permissions. Continuing."
  fi

  echo "${GREEN}Done.${NC}"
  echo
fi
sudo apt-get install php-pgsql -y
check "Failed to install php-pgsql"
if [ -n "$(which php8.1)" ]; then
  sudo apt-get install php8.1-pgsql -y
  check "Failed to install php8.1-pgsql"
fi

# --------------------------------------------------------- Unistall PostGreSQL 14
apt_postgresql_14=`apt list --installed postgresql-14  | grep -E installed`
if [ -n "$apt_postgresql_14" ]; then
  # TODO: pg_upgradecluster
  echo "${YELLOW}WARNING${NC}: Installed PostGreSQL version 16, but did not un-install ${YELLOW}PostGreSQL version 16${NC}"
  echo "This will mean that version 16 is listening on port 5433, not 5432"
  read -p "Read that, then press [return]! " ret
fi

# PostGreSQL extensions
if [ -d postgres/ ]; then
  # Source compilation pre-requisities
  sudo apt-get install -y postgresql-server-dev-$postgresql_version libcurl4-openssl-dev make g++  # For pgsql-http extensions

  # IMPORTANT: Installing on previous version:
  # Change the Makefile to point to the previous pg_config
  # PG_CONFIG = /usr/lib/postgresql/14/bin/pg_config
  for d in postgres/*/ ; do
    extension_name=`basename "$d"`
    sudo mkdir -p /usr/share/postgresql/$postgresql_version/extension/
    if [ ! -f /usr/share/postgresql/$postgresql_version/extension/$extension_name.control ]; then
      echo "${YELLOW}$extension_name${NC} installing for PostGreSQL $postgresql_version..."
      cd postgres/$extension_name/

      # We don't want to use a previously made and pushed version for the wrong PG version
      sudo make uninstall
      make clean

      # Normal make and install
      # Change the Makefile first for previous versions
      # PG_CONFIG = /usr/lib/postgresql/14/bin/pg_config
      make
      sudo make install
      cd -
    fi
  done
fi

if [ -z "$(which pgagent)" ]; then
  echo "Installing ${YELLOW}PGAgent for scheduled SQL tasks${NC}... "
  sudo apt install -y pgagent
fi
if [ -z "$(ps -A | grep pgagent)" ]; then
  # Run the server immediately
  sudo -u postgres pgagent host=/var/run/postgresql dbname=postgres user=postgres
  sudo -u postgres psql postgres -c "create extension if not exists pgagent"
  sudo systemctl restart postgresql@16-main.service
fi
# Run on startup
if [ ! -f /etc/init.d/pgagent ] && [ -f postgres/pgagent ]; then
  sudo cp postgres/pgagent /etc/init.d/
  sudo ln -s /etc/init.d/pgagent /etc/rc2.d/S02pgagent # After postgres
  sudo ln -s /etc/init.d/pgagent /etc/rc6.d/K02pgagent
fi

if [ -z "$(which pgadmin4)" ]; then
  echo "Installing ${YELLOW}pgAdmin4${NC}... "
  snap install pgadmin4
  check "Failed to download pgAdmin4"
  echo "${GREEN}Done.${NC}"
  echo
fi
# On Kali it is possible that the pgadmin4 snap installed in to /snap/bin/
# but it is not in the path
if [ -z "$(which pgadmin4)" ] && [ -f /snap/bin/pgadmin4 ]; then
  sudo ln -s /snap/bin/pgadmin4 /usr/bin/pgadmin4
fi

if [ -z "$(which git)" ]; then
  echo "Installing ${YELLOW}git${NC}... "
  sudo apt-get install git -y
  check "Failed to download git"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which composer)" ]; then
  echo "Installing ${YELLOW}composer${NC}... "
  #hash="55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae"
  hash="dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  php -r "if (hash_file('sha384', 'composer-setup.php') === '$hash') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  php composer-setup.php
  php -r "unlink('composer-setup.php');"
  sudo mv composer.phar /usr/local/bin/composer
  check "Failed to download composer"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which code)" ]; then
  echo "Installing ${YELLOW}VS Code${NC}... "
  sudo snap install code --classic
  check "Failed to download VS code"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which signal-desktop)" ]; then
  echo "Installing ${YELLOW}Signal${NC}... "
  sudo snap install signal-desktop
  check "Failed to download Signal"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which ifconfig)" ]; then
  echo "Installing ${YELLOW}net-tools${NC}... "
  sudo apt -y install net-tools
  check "Failed to download net-tools"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which nmap)" ]; then
  echo "Installing ${YELLOW}nmap${NC}... "
  sudo apt -y install nmap
  check "Failed to download nmap"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which vlc)" ]; then
  echo "Installing ${YELLOW}vlc${NC}... "
  sudo apt -y install vlc
  check "Failed to download vlc"
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which locate)" ]; then
  echo "Installing ${YELLOW}locate${NC}... "
  sudo apt -y install locate
  check "Failed to download locate"
  sudo updatedb
  echo "${GREEN}Done.${NC}"
  echo
fi

# ----------------------------------------- External scripts
if [ -f acorn-setup-security ] && [ "$distro" == 'Ubuntu' ]; then
  read -p "Setup Ubuntu pro live-patch security? [Y] " yn
  case $yn in
    Y|y|"")
      ./acorn-setup-security
      break
    ;;
  esac
fi

if [ -f acorn-setup-olap ]; then
  read -p "Setup OLAP reporting infrastructure with Tomcat9 & JSP? [Y] " yn
  case $yn in
    Y|y|"")
      ./acorn-setup-olap
      break
    ;;
  esac
fi

if [ -f acorn-mirror-doc-websites ]; then
  read -p "Mirror websites now (several hours work)? [Y] " yn
  case $yn in
    Y|y|"")
      ./acorn-mirror-doc-websites
      break
    ;;
  esac
fi
