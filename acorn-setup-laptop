#!/bin/bash

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
NC="$(tput sgr0)"
TICK="${GREEN}✓${NC}"
CROSS="${RED}✘${NC}"


check ()
{
  if [ "$?" == "1" ]; then
   echo "${RED}ERROR${NC}: $1"
   exit 1 
  fi
}

add_hostname ()
{
  if ! grep -q $1 /etc/hosts; then
    # Internal: 192.168.88.253
    # External: 10.10.10.51
    sudo bash -c 'echo "10.10.10.51   $1" >> /etc/hosts' # 192.168.0.200
  fi
}

echo -e "GET http://google.com HTTP/1.0\n\n" | nc google.com 80 > /dev/null 2>&1
check "No internet connection."

echo "${YELLOW}Running apt-get update && sudo apt upgrade... ${NC}"
sudo apt-get update
check "Failed to update."
# sudo apt-get -y upgrade
echo "${GREEN}Done.${NC}"
echo

gpg=`apt list --installed gpg 2> /dev/null | grep -E installed`
if [ -z "$gpg" ]; then
  echo "${YELLOW}Installing gpg... ${NC}"
  sudo apt-get install gpg -y 2> /dev/null
  check "Failed to download gpg."
  echo "${GREEN}Done.${NC}"
  echo
fi

apache2=`apt list --installed apache2 2> /dev/null | grep -E installed`
if [ -z "$apache2" ]; then
  echo "${YELLOW}Installing apache2... ${NC}"
  sudo apt-get install apache2 -y 2> /dev/null
  sudo a2enmod rewrite 2> /dev/null
  sudo apt-get install libapache2-mod-fcgid -y 2> /dev/null
  sudo apt-get install libapache2-mod-php -y 2> /dev/null
  check "Failed to download apache2."
  sudo a2enmod actions fcgid alias proxy_fcgi setenvif 2> /dev/null
  sudo service apache2 restart

  if [ -z "$(groups | grep www-data)" ]; then
    sudo usermod -a -G www-data $USER
    echo "${GREEN}INFO${NC}: You were added to the www-data group. This will not be effective until reboot."
  fi
  sudo chown -R www-data:www-data /var/www/
  sudo chmod g+wx /var/www/
  sudo chmod -R g+rw /var/www/

  if [ -d ~/scripts ]; then
    ln -s ~/scripts /var/www/scripts
  fi

  echo "${GREEN}Done.${NC}"
  echo
fi

mysql=`apt list --installed mysql-server 2> /dev/null | grep -E installed`
if [ -z "$mysql" ] && [ -z "$(which mysql)" ]; then
  echo "${YELLOW}Installing mysql... ${NC}"
  sudo apt-get install mysql-server-8.0 mysql-client-8.0 -y 2> /dev/null
  sudo apt-get install php-mysql 2> /dev/null
  check "Failed to download mysql"
  while true; do
    read -p "Create user root with password 'QueenPool1@'? [Y] " yn
    case $yn in
      Y|y|"")
        mysql -e "create user root@% identified by 'QueenPool1@';" 2> /dev/null
        musql -e "grant all on *.* to root@% with grant option;" 2> /dev/null
        mysql -e "flush privileges;" 2> /dev/null
        break
      ;;
      N|n)
        break
      ;;
      *)
      ;;
    esac
  done
  echo "${GREEN}Done.${NC}"
  echo
fi

snap=`apt list --installed snapd 2> /dev/null | grep -E installed`
if [ -z "$snap" ]; then
  echo "${YELLOW}Installing snap... ${NC}"
  sudo apt-get install snapd -y 2> /dev/null
  check "Failed to download snapd."
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which mysql-workbench-community)" ]; then
  echo "${YELLOW}Installing MySQL Workbench... ${NC}"
  sudo snap install mysql-workbench-community 2> /dev/null
  check "Failed to download MySQL Workbench."
  echo "${GREEN}Done.${NC}"
  echo
fi

php=`apt list --installed php 2> /dev/null | grep -E installed`
if [ -z "$php" ]; then
  echo "${YELLOW}Installing php... ${NC}"
  sudo apt-get install php -y 2> /dev/null
  sudo apt-get install php-mysql php-curl php-mbstring phpunit php-zip php-gd php-xml php-json -y 2> /dev/null
  sudo apt-get install php-pgsql -y 2> /dev/null
  sudo add-apt-repository ppa:ondrej/php 2> /dev/null
  check "Failed to download php."
  echo "${GREEN}Done.${NC}"
  echo
fi

curl=`apt list --installed curl 2> /dev/null | grep -E installed`
if [ -z "$curl" ]; then
  echo "${YELLOW}Installing curl... ${NC}"
  sudo apt-get install curl -y 2> /dev/null
  check "Failed to download curl."
  echo "${GREEN}Done.${NC}"
  echo
fi

wget=`apt list --installed wget 2> /dev/null | grep -E installed`
if [ -z "$wget" ]; then
  echo "${YELLOW}Installing wget... ${NC}"
  sudo apt-get install wget -y 2> /dev/null
  check "Failed to download wget."
  echo "${GREEN}Done.${NC}"
  echo
fi

# --------------------------------------------------------- Install PostGreSQL 16
postgresql_version=16
apt_postgresql=`apt list --installed postgresql-$postgresql_version 2> /dev/null | grep -E installed`
if [ -z "$apt_postgresql" ]; then
  echo "${YELLOW}postgresql-$postgresql_version${NC} installing..."
  echo "Note: PostGreSQL version 16 has bi-directional replication"
  sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' 2> /dev/null
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
  sudo apt-get update
  sudo apt-get install -y postgresql-$postgresql_version
  check "Failed to download postgresql $postgresql_version"

  user_exists=`sudo -u postgres psql postgres -tXAc "SELECT 1 FROM pg_roles WHERE rolname='$USER'"`
  if [ "$user_exists" != 1 ]; then
    echo "${GREEN}INFO${NC}: Creating PostGreSQL super-user ${YELLOW}$USER${NC}. PLease use password ${YELLOW}@corn.org${NC}:"
    sudo -u postgres createuser -d -e -E -l -P -r -s $USER
    check "Failed to create postgresql user ${YELLOW}$USER${NC}"
  else
    echo "${YELLOW}WARNING${NC}: User ${YELLOW}$USER${NC} already exists. I hope they have connection permissions. Continuing."
  fi

  echo "${GREEN}Done.${NC}"
  echo
fi

# --------------------------------------------------------- Unistall PostGreSQL 14
apt_postgresql_14=`apt list --installed postgresql-14 2> /dev/null | grep -E installed`
if [ -n "$apt_postgresql_14" ]; then
  # TODO: pg_upgradecluster
  echo "${YELLOW}WARNING${NC}: Installed PostGreSQL version 16, but did not un-install ${YELLOW}PostGreSQL version 16${NC}"
  echo "This will mean that version 16 is listening on port 5433, not 5432"
  read -p "Read that, then press [return]! " ret
fi

# --------------------------------------------------------- PostGreSQL extensions
if [ -d postgres/ ]; then
  # Source compilation pre-requisities
  sudo apt-get install -y postgresql-server-dev-$postgresql_version libcurl4-openssl-dev make g++ 2> /dev/null # For pgsql-http extensions

  for d in postgres/*/ ; do
    extension_name=`basename "$d"`
    sudo mkdir -p /usr/share/postgresql/$postgresql_version/extension/
    if [ ! -f /usr/share/postgresql/$postgresql_version/extension/$extension_name.control ]; then
      echo "${YELLOW}$extension_name${NC} installing for PostGreSQL $postgresql_version..."
      cd postgres/$extension_name/
      # We don't want to use a previously made and pushed version for the wrong PG version
      sudo make uninstall
      make clean
      # Normal make and install
      make
      sudo make install
      cd -
    fi
  done
fi

if [ -z "$(which pgagent)" ]; then
  echo "${YELLOW}Installing PGAgent for scheduled SQL tasks... ${NC}"
  sudo apt install -y pgagent
fi
if [ -z "$(ps -A | grep pgagent)" ]; then
  # Run the server immediately
  sudo -u postgres pgagent host=/var/run/postgresql dbname=postgres user=postgres
  sudo -u postgres psql postgres -c "create extension if not exists pgagent"
  sudo systemctl restart postgresql@16-main.service
fi
# Run on startup
if [ ! -f /etc/init.d/pgagent ] && [ -f postgres/pgagent ]; then
  sudo cp postgres/pgagent /etc/init.d/
  sudo ln -s /etc/init.d/pgagent /etc/rc2.d/S02pgagent # After postgres
  sudo ln -s /etc/init.d/pgagent /etc/rc6.d/K02pgagent
fi

pgadmin=`apt list --installed pgadmin4 2> /dev/null | grep -E installed`
if [ -z "$pgadmin" ]; then 
  echo "${YELLOW}Installing pgAdmin4... ${NC}"
  curl -fsS https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /usr/share/keyrings/packages-pgadmin-org.gpg 2> /dev/null
  sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/packages-pgadmin-org.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update' 2> /dev/null
  sudo apt-get install pgadmin4 -y 2> /dev/null
  check "Failed to download pgAdmin4"
  echo "${GREEN}Done.${NC}"
  echo
fi

git=`apt list --installed git 2> /dev/null | grep -E installed`
if [ -z "$git" ]; then
  echo "${YELLOW}Installing git... ${NC}"
  sudo apt-get install git -y 2> /dev/null
  check "Failed to download git."
  echo "${GREEN}Done.${NC}"
  echo
fi

composer=`apt list --installed composer 2> /dev/null | grep -E installed`
if [ -z "$composer" ] && [ -z "$(which composer)" ]; then
  echo "${YELLOW}Installing composer... ${NC}"
  #hash="55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae"
  hash="dac665fdc30fdd8ec78b38b9800061b4150413ff2e3b6f88543c636f7cd84f6db9189d43a81e5503cda447da73c7e5b6"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  php -r "if (hash_file('sha384', 'composer-setup.php') === '$hash') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  php composer-setup.php
  php -r "unlink('composer-setup.php');"
  sudo mv composer.phar /usr/local/bin/composer
  check "Failed to download composer."
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which code)" ]; then
  echo "${YELLOW}Installing VS Code... ${NC}"
  sudo snap install code --classic
  check "Failed to download VS code."
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which signal-desktop)" ]; then
  echo "${YELLOW}Installing Signal... ${NC}"
  sudo snap install signal-desktop
  check "Failed to download Signal."
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which ifconfig)" ]; then
  echo "${YELLOW}Installing net-tools... ${NC}"
  sudo apt -y install net-tools
  check "Failed to download net-tools."
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which nmap)" ]; then
  echo "${YELLOW}Installing nmap... ${NC}"
  sudo apt -y install nmap
  check "Failed to download nmap."
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which vlc)" ]; then
  echo "${YELLOW}Installing vlc... ${NC}"
  sudo apt -y install vlc
  check "Failed to download vlc."
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -z "$(which locate)" ]; then
  echo "${YELLOW}Installing locate... ${NC}"
  sudo apt -y install locate
  check "Failed to download locate."
  sudo updatedb
  echo "${GREEN}Done.${NC}"
  echo
fi

if [ -f acorn-setup-security ]; then
  ./acorn-setup-security
fi

if [ -f acorn-setup-olap ]; then
  ./acorn-setup-olap
fi

if [ -f acorn-mirror-doc-websites ]; then
  ./acorn-mirror-doc-websites
fi
