--
-- PostgreSQL database dump
--

\restrict 6Oa8bFPWlLpYwJM43TSSopPaWu9scslvtHvQDnd1Qqs8bLxBBYUHdjymhZ6Hau1

-- Dumped from database version 16.10 (Ubuntu 16.10-1.pgdg24.04+1)
-- Dumped by pg_dump version 16.10 (Ubuntu 16.10-1.pgdg24.04+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

ALTER TABLE IF EXISTS ONLY public.acorn_location_user_addresses DROP CONSTRAINT IF EXISTS user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_students DROP CONSTRAINT IF EXISTS user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group DROP CONSTRAINT IF EXISTS user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group_version DROP CONSTRAINT IF EXISTS user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_role_user DROP CONSTRAINT IF EXISTS user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_teachers DROP CONSTRAINT IF EXISTS user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group_version DROP CONSTRAINT IF EXISTS user_group_version_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS user_group_version_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_user_group_location DROP CONSTRAINT IF EXISTS user_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group_versions DROP CONSTRAINT IF EXISTS user_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group DROP CONSTRAINT IF EXISTS user_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS user_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS user_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semester_groups DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_topics DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchy_event DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_documents DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_document_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_addition DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_removal DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_specializations DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_sections DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_answers DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_questions DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_runs DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_student_notes DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_courses DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_students DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_plans DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_centres DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_instances DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_desires DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_identity_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_notes DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_score_names DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_codes DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_statuses DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_courses DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_material_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_materials DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_lectures DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_projects DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semesters DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_years DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_year_semesters DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interviews DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_scores DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exams DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_materials DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_types DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_years DROP CONSTRAINT IF EXISTS updated_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_types DROP CONSTRAINT IF EXISTS types_created_by_user;
ALTER TABLE IF EXISTS ONLY public.acorn_university_materials DROP CONSTRAINT IF EXISTS type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exams DROP CONSTRAINT IF EXISTS type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_locations DROP CONSTRAINT IF EXISTS type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS teacher_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_type DROP CONSTRAINT IF EXISTS student_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_status DROP CONSTRAINT IF EXISTS student_status_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_documents DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_addition DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_removal DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_type DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_notes DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_codes DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_scores DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_status DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semester_groups DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_topics DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchy_event DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_documents DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_document_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_addition DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_removal DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_specializations DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_sections DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_answers DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_questions DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_runs DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_student_notes DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_courses DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_address_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_plans DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_centres DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_instances DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_desires DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_identity_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_notes DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_score_names DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_codes DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_statuses DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_courses DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_material_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_materials DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_lectures DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_projects DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semesters DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_years DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_year_semesters DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interviews DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_scores DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exams DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_materials DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_years DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_areas DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_area_types DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_addresses DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_gps DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_locations DROP CONSTRAINT IF EXISTS server_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_year_semesters DROP CONSTRAINT IF EXISTS semester_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semesters DROP CONSTRAINT IF EXISTS semester_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_questions DROP CONSTRAINT IF EXISTS section_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_role_user DROP CONSTRAINT IF EXISTS role_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS required_interview_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS required_exam_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS religion_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS related_course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_answers DROP CONSTRAINT IF EXISTS question_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS proposed_desire_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS proposal_run_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS project_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS project_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS project_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_types DROP CONSTRAINT IF EXISTS parent_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS parent_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS parent_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_areas DROP CONSTRAINT IF EXISTS parent_area_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS owner_student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_types DROP CONSTRAINT IF EXISTS owner_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS owner_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS owner_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_notes DROP CONSTRAINT IF EXISTS owner_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_material_types DROP CONSTRAINT IF EXISTS material_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS material_topic_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_locations DROP CONSTRAINT IF EXISTS locations_created_by_user;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS location_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_centres DROP CONSTRAINT IF EXISTS location_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_user_group_location DROP CONSTRAINT IF EXISTS location_id;
ALTER TABLE IF EXISTS ONLY public.acorn_servers DROP CONSTRAINT IF EXISTS location_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_language DROP CONSTRAINT IF EXISTS language_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS interview_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS interview_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS interview_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS identity_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchy_event DROP CONSTRAINT IF EXISTS hierarchy_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_addresses DROP CONSTRAINT IF EXISTS gps_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_areas DROP CONSTRAINT IF EXISTS gps_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_gps DROP CONSTRAINT IF EXISTS gps_created_by_user;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS global_scope_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS global_scope_academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_scores DROP CONSTRAINT IF EXISTS exam_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_sections DROP CONSTRAINT IF EXISTS exam_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_instances DROP CONSTRAINT IF EXISTS exam_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS exam_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS exam_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_instances DROP CONSTRAINT IF EXISTS exam_centre_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchy_event DROP CONSTRAINT IF EXISTS event_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_years DROP CONSTRAINT IF EXISTS event_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_lectures DROP CONSTRAINT IF EXISTS event_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_year_semesters DROP CONSTRAINT IF EXISTS event_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS event_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS ethnicity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_courses DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_codes DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_universities DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_schools DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_faculties DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_departments DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_education_authorities DROP CONSTRAINT IF EXISTS entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_student_notes DROP CONSTRAINT IF EXISTS enrollment_student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_desires DROP CONSTRAINT IF EXISTS enrollment_student_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_runs DROP CONSTRAINT IF EXISTS enrollment_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_courses DROP CONSTRAINT IF EXISTS enrollment_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS enrollment_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS enrollment_course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS enrollment_academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_documents DROP CONSTRAINT IF EXISTS document_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS default_semester_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS default_calendar_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semester_groups DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_topics DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchy_event DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_documents DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_document_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_addition DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_removal DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_specializations DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_sections DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_answers DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_questions DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_runs DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_student_notes DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_courses DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_students DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_plans DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_centres DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_instances DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_desires DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_identity_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_notes DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_score_names DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_codes DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_statuses DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_courses DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_material_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_materials DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_lectures DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_projects DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semesters DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_years DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_year_semesters DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interviews DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_scores DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exams DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_materials DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_types DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_years DROP CONSTRAINT IF EXISTS created_by_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS course_year_semester_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS course_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS course_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_courses DROP CONSTRAINT IF EXISTS course_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS course_specialization_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS course_plan_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_lectures DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_addition DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_removal DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_materials DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS course_material_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_specializations DROP CONSTRAINT IF EXISTS course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_plans DROP CONSTRAINT IF EXISTS course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_courses DROP CONSTRAINT IF EXISTS course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_language DROP CONSTRAINT IF EXISTS course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_courses DROP CONSTRAINT IF EXISTS course_hierarchy_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_desires DROP CONSTRAINT IF EXISTS course_entry_requirements_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS calculation_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS calculation_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_material_types DROP CONSTRAINT IF EXISTS calculation_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS calculation_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS calculation_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS calculation_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_materials DROP CONSTRAINT IF EXISTS calculation_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_courses DROP CONSTRAINT IF EXISTS calculation_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS calculation_exam_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS calculation_course_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS calculation_course_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS calculation_academic_year_id;
ALTER TABLE IF EXISTS ONLY public.backend_users DROP CONSTRAINT IF EXISTS backend_users_acorn_user_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_location_areas DROP CONSTRAINT IF EXISTS areas_created_by_user;
ALTER TABLE IF EXISTS ONLY public.acorn_location_area_types DROP CONSTRAINT IF EXISTS area_types_created_by_user;
ALTER TABLE IF EXISTS ONLY public.acorn_location_areas DROP CONSTRAINT IF EXISTS area_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_addresses DROP CONSTRAINT IF EXISTS area_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_address_types DROP CONSTRAINT IF EXISTS addresses_created_by_user;
ALTER TABLE IF EXISTS ONLY public.acorn_location_addresses DROP CONSTRAINT IF EXISTS addresses_created_by_user;
ALTER TABLE IF EXISTS ONLY public.acorn_location_user_addresses DROP CONSTRAINT IF EXISTS address_type_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_user_addresses DROP CONSTRAINT IF EXISTS address_id;
ALTER TABLE IF EXISTS ONLY public.acorn_location_locations DROP CONSTRAINT IF EXISTS address_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_groups DROP CONSTRAINT IF EXISTS acorn_user_user_groups_type_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_groups DROP CONSTRAINT IF EXISTS acorn_user_user_groups_parent_user_group_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_languages DROP CONSTRAINT IF EXISTS acorn_user_language_user_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_languages DROP CONSTRAINT IF EXISTS acorn_user_language_user_language_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_user_message_status DROP CONSTRAINT IF EXISTS acorn_messaging_user_message_status_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_user_message_status DROP CONSTRAINT IF EXISTS acorn_messaging_user_message_status_status_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_user_message_status DROP CONSTRAINT IF EXISTS acorn_messaging_user_message_status_message_id_foreig;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_user DROP CONSTRAINT IF EXISTS acorn_messaging_message_user_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_user DROP CONSTRAINT IF EXISTS acorn_messaging_message_user_message_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_user_group DROP CONSTRAINT IF EXISTS acorn_messaging_message_user_group_user_group_id_fore;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_user_group DROP CONSTRAINT IF EXISTS acorn_messaging_message_user_group_message_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_instance DROP CONSTRAINT IF EXISTS acorn_messaging_message_instance_message_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_instance DROP CONSTRAINT IF EXISTS acorn_messaging_message_instance_instance_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_instances DROP CONSTRAINT IF EXISTS acorn_calendar_instances_event_part_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_events DROP CONSTRAINT IF EXISTS acorn_calendar_events_owner_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_events DROP CONSTRAINT IF EXISTS acorn_calendar_events_owner_user_group_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_events DROP CONSTRAINT IF EXISTS acorn_calendar_events_calendar_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_types DROP CONSTRAINT IF EXISTS acorn_calendar_event_types_calendar_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_statuses DROP CONSTRAINT IF EXISTS acorn_calendar_event_statuses_calendar_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_parts DROP CONSTRAINT IF EXISTS acorn_calendar_event_parts_user_group_version_id_fore;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_parts DROP CONSTRAINT IF EXISTS acorn_calendar_event_parts_type_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_parts DROP CONSTRAINT IF EXISTS acorn_calendar_event_parts_status_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_parts DROP CONSTRAINT IF EXISTS acorn_calendar_event_parts_parent_event_part_id_forei;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_parts DROP CONSTRAINT IF EXISTS acorn_calendar_event_parts_locked_by_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_parts DROP CONSTRAINT IF EXISTS acorn_calendar_event_parts_event_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_part_user DROP CONSTRAINT IF EXISTS acorn_calendar_event_part_user_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_part_user DROP CONSTRAINT IF EXISTS acorn_calendar_event_part_user_role_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_part_user_group DROP CONSTRAINT IF EXISTS acorn_calendar_event_part_user_group_user_group_id_fo;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_part_user_group DROP CONSTRAINT IF EXISTS acorn_calendar_event_part_user_group_event_part_id_fo;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_part_user DROP CONSTRAINT IF EXISTS acorn_calendar_event_part_user_event_part_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_calendars DROP CONSTRAINT IF EXISTS acorn_calendar_calendars_owner_user_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_calendars DROP CONSTRAINT IF EXISTS acorn_calendar_calendars_owner_user_group_id_foreign;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS academic_year_semester_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_material_types DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_year_semesters DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_plans DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_centres DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_materials DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_courses DROP CONSTRAINT IF EXISTS academic_year_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS academic_year_id;
DROP TRIGGER IF EXISTS tr_acorn_user_user_languages_current ON public.acorn_user_user_languages;
DROP TRIGGER IF EXISTS tr_acorn_user_user_group_version_current ON public.acorn_user_user_group_versions;
DROP TRIGGER IF EXISTS tr_acorn_user_user_group_first_version ON public.acorn_user_user_groups;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_students;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_statuses;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_notes;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_identities;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_documents;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_course_material_removal;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_course_material_addition;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_student_codes;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_semesters;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_semester_groups;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_projects;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_project_students;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_materials;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_material_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_material_topics;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_lectures;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_identity_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_hierarchy_event;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_hierarchies;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_entities;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_document_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_course_years;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_course_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_course_specializations;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_course_plans;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_course_materials;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_academic_years;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_university_academic_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_sections;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_scores;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_score_names;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_questions;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_interviews;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_interview_students;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_instances;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_exams;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_exam_materials;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_centres;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_calculations;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_calculation_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_calculation_material_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_calculation_courses;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_calculation_course_types;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_calculation_course_materials;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_exam_answers;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_enrollment_students;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_enrollment_student_notes;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_enrollment_runs;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_enrollment_enrollments;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_enrollment_desires;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_enrollment_courses;
DROP TRIGGER IF EXISTS tr_acorn_updated_by_user_id ON public.acorn_enrollment_course_entry_requirements;
DROP TRIGGER IF EXISTS tr_acorn_university_student_identities_current ON public.acorn_university_student_identities;
DROP TRIGGER IF EXISTS tr_acorn_university_student_documents ON public.acorn_university_students;
DROP TRIGGER IF EXISTS tr_acorn_university_student_codes_current ON public.acorn_university_student_codes;
DROP TRIGGER IF EXISTS tr_acorn_university_semester_ordinal_insert ON public.acorn_university_course_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_university_semester_ordinal_delete ON public.acorn_university_course_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_university_provision_year_semesters ON public.acorn_university_course_plans;
DROP TRIGGER IF EXISTS tr_acorn_university_lecture_sync_lock_event ON public.acorn_university_lectures;
DROP TRIGGER IF EXISTS tr_acorn_university_import_source_empty ON public.acorn_university_entities;
DROP TRIGGER IF EXISTS tr_acorn_university_hierarchy_lock_event ON public.acorn_university_hierarchy_event;
DROP TRIGGER IF EXISTS tr_acorn_university_hierarchies_update_version ON public.acorn_university_hierarchies;
DROP TRIGGER IF EXISTS tr_acorn_university_hierarchies_manage_cys ON public.acorn_university_hierarchies;
DROP TRIGGER IF EXISTS tr_acorn_university_hierarchies_descendants_user_cnts ON public.acorn_user_user_group_version;
DROP TRIGGER IF EXISTS tr_acorn_university_hierarchies_delete_version ON public.acorn_university_hierarchies;
DROP TRIGGER IF EXISTS tr_acorn_university_hierarchies_create_version ON public.acorn_university_hierarchies;
DROP TRIGGER IF EXISTS tr_acorn_university_entities_leaf_table ON public.acorn_university_universities;
DROP TRIGGER IF EXISTS tr_acorn_university_entities_leaf_table ON public.acorn_university_schools;
DROP TRIGGER IF EXISTS tr_acorn_university_entities_leaf_table ON public.acorn_university_faculties;
DROP TRIGGER IF EXISTS tr_acorn_university_entities_leaf_table ON public.acorn_university_education_authorities;
DROP TRIGGER IF EXISTS tr_acorn_university_entities_leaf_table ON public.acorn_university_departments;
DROP TRIGGER IF EXISTS tr_acorn_university_entities_leaf_table ON public.acorn_university_courses;
DROP TRIGGER IF EXISTS tr_acorn_university_entities_leaf_table ON public.acorn_university_course_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_university_enrollment_year ON public.acorn_university_course_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_user_group ON public.acorn_university_entities;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_entity ON public.acorn_university_universities;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_entity ON public.acorn_university_schools;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_entity ON public.acorn_university_faculties;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_entity ON public.acorn_university_education_authorities;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_entity ON public.acorn_university_departments;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_entity ON public.acorn_university_courses;
DROP TRIGGER IF EXISTS tr_acorn_university_delete_entity ON public.acorn_university_course_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_university_cys_manage_hierarchy ON public.acorn_university_course_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_university_courses_unique_name_type ON public.acorn_university_courses;
DROP TRIGGER IF EXISTS tr_acorn_university_cm_order ON public.acorn_university_course_materials;
DROP TRIGGER IF EXISTS tr_acorn_university_cascade_delete_event ON public.acorn_university_lectures;
DROP TRIGGER IF EXISTS tr_acorn_university_cascade_delete_event ON public.acorn_university_hierarchy_event;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_statuses;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_notes;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_identities;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_documents;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_course_material_removal;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_course_material_addition;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_student_codes;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_semesters;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_semester_groups;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_projects;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_project_students;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_materials;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_material_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_material_topics;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_lectures;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_identity_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_hierarchy_event;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_hierarchies;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_entities;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_document_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_course_years;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_course_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_course_specializations;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_course_plans;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_course_materials;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_academic_years;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_university_academic_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_sections;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_scores;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_score_names;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_questions;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_interviews;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_interview_students;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_instances;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_exams;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_exam_materials;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_centres;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_calculations;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_calculation_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_calculation_material_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_calculation_courses;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_calculation_course_types;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_calculation_course_materials;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_exam_answers;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_enrollment_students;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_enrollment_student_notes;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_enrollment_runs;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_enrollment_enrollments;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_enrollment_desires;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_enrollment_courses;
DROP TRIGGER IF EXISTS tr_acorn_server_id ON public.acorn_enrollment_course_entry_requirements;
DROP TRIGGER IF EXISTS tr_acorn_location_types_server_id ON public.acorn_location_types;
DROP TRIGGER IF EXISTS tr_acorn_location_types_new_replicated_row ON public.acorn_location_types;
DROP TRIGGER IF EXISTS tr_acorn_location_locations_server_id ON public.acorn_location_locations;
DROP TRIGGER IF EXISTS tr_acorn_location_locations_new_replicated_row ON public.acorn_location_locations;
DROP TRIGGER IF EXISTS tr_acorn_location_gps_server_id ON public.acorn_location_gps;
DROP TRIGGER IF EXISTS tr_acorn_location_gps_new_replicated_row ON public.acorn_location_gps;
DROP TRIGGER IF EXISTS tr_acorn_location_areas_server_id ON public.acorn_location_areas;
DROP TRIGGER IF EXISTS tr_acorn_location_areas_new_replicated_row ON public.acorn_location_areas;
DROP TRIGGER IF EXISTS tr_acorn_location_area_types_server_id ON public.acorn_location_area_types;
DROP TRIGGER IF EXISTS tr_acorn_location_area_types_new_replicated_row ON public.acorn_location_area_types;
DROP TRIGGER IF EXISTS tr_acorn_location_addresses_server_id ON public.acorn_location_addresses;
DROP TRIGGER IF EXISTS tr_acorn_location_addresses_new_replicated_row ON public.acorn_location_addresses;
DROP TRIGGER IF EXISTS tr_acorn_location_address_types_server_id ON public.acorn_location_address_types;
DROP TRIGGER IF EXISTS tr_acorn_location_address_types_new_replicated_row ON public.acorn_location_address_types;
DROP TRIGGER IF EXISTS tr_acorn_exam_scores_log ON public.acorn_exam_scores;
DROP TRIGGER IF EXISTS tr_acorn_enrollment_desires_ordinal ON public.acorn_enrollment_desires;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_students;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_statuses;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_notes;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_identities;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_documents;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_course_material_removal;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_course_material_addition;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_student_codes;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_semesters;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_semester_groups;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_projects;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_project_students;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_materials;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_material_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_material_topics;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_lectures;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_identity_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_hierarchy_event;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_hierarchies;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_entities;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_document_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_course_years;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_course_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_course_specializations;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_course_plans;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_course_materials;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_academic_years;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_university_academic_year_semesters;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_sections;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_scores;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_score_names;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_questions;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_interviews;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_interview_students;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_instances;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_exams;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_exam_materials;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_centres;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_calculations;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_calculation_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_calculation_material_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_calculation_courses;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_calculation_course_types;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_calculation_course_materials;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_exam_answers;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_enrollment_students;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_enrollment_student_notes;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_enrollment_runs;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_enrollment_enrollments;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_enrollment_desires;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_enrollment_courses;
DROP TRIGGER IF EXISTS tr_acorn_created_by_user_id ON public.acorn_enrollment_course_entry_requirements;
DROP TRIGGER IF EXISTS tr_acorn_calendar_events_generate_event_instances ON public.acorn_calendar_event_parts;
CREATE OR REPLACE VIEW public.acorn_university_student_lookups AS
SELECT
    NULL::uuid AS id,
    NULL::uuid AS student_id,
    NULL::uuid AS school_id,
    NULL::uuid AS course_id,
    NULL::json AS course_year_ids,
    NULL::character varying(1024) AS legacy_import_student_type,
    NULL::character varying(1024) AS code,
    NULL::uuid AS academic_year_id,
    NULL::character varying(255) AS name,
    NULL::character varying(255) AS surname,
    NULL::text AS full_name,
    NULL::character varying(1024) AS fathers_name;
DROP INDEX IF EXISTS public.winter_translate_messages_code_pre_2_1_0_index;
DROP INDEX IF EXISTS public.winter_translate_messages_code_index;
DROP INDEX IF EXISTS public.winter_translate_locales_name_index;
DROP INDEX IF EXISTS public.winter_translate_locales_code_index;
DROP INDEX IF EXISTS public.winter_translate_indexes_model_type_index;
DROP INDEX IF EXISTS public.winter_translate_indexes_model_id_index;
DROP INDEX IF EXISTS public.winter_translate_indexes_locale_index;
DROP INDEX IF EXISTS public.winter_translate_indexes_item_index;
DROP INDEX IF EXISTS public.winter_translate_attributes_model_type_index;
DROP INDEX IF EXISTS public.winter_translate_attributes_model_id_index;
DROP INDEX IF EXISTS public.winter_translate_attributes_locale_index;
DROP INDEX IF EXISTS public.user_item_index;
DROP INDEX IF EXISTS public.system_settings_item_index;
DROP INDEX IF EXISTS public.system_revisions_user_id_index;
DROP INDEX IF EXISTS public.system_revisions_field_index;
DROP INDEX IF EXISTS public.system_plugin_versions_code_index;
DROP INDEX IF EXISTS public.system_plugin_history_type_index;
DROP INDEX IF EXISTS public.system_plugin_history_code_index;
DROP INDEX IF EXISTS public.system_mail_templates_layout_id_index;
DROP INDEX IF EXISTS public.system_files_field_index;
DROP INDEX IF EXISTS public.system_files_attachment_type_index;
DROP INDEX IF EXISTS public.system_files_attachment_id_index;
DROP INDEX IF EXISTS public.system_event_logs_level_index;
DROP INDEX IF EXISTS public.sessions_user_id_index;
DROP INDEX IF EXISTS public.sessions_last_activity_index;
DROP INDEX IF EXISTS public.score;
DROP INDEX IF EXISTS public.role_code_index;
DROP INDEX IF EXISTS public.result_name_btree;
DROP INDEX IF EXISTS public.reset_code_index;
DROP INDEX IF EXISTS public.rainlab_location_states_name_index;
DROP INDEX IF EXISTS public.rainlab_location_states_country_id_index;
DROP INDEX IF EXISTS public.rainlab_location_countries_name_index;
DROP INDEX IF EXISTS public.name_regexp2;
DROP INDEX IF EXISTS public.jobs_queue_reserved_at_index;
DROP INDEX IF EXISTS public.item_index;
DROP INDEX IF EXISTS public.idx_type;
DROP INDEX IF EXISTS public.idx_student_id;
DROP INDEX IF EXISTS public.idx_code;
DROP INDEX IF EXISTS public.fki_year_id;
DROP INDEX IF EXISTS public.fki_user_id;
DROP INDEX IF EXISTS public.fki_user_group_version_id;
DROP INDEX IF EXISTS public.fki_user_group_id;
DROP INDEX IF EXISTS public.fki_updated_by_user_id;
DROP INDEX IF EXISTS public.fki_type_id;
DROP INDEX IF EXISTS public.fki_teacher_id;
DROP INDEX IF EXISTS public.fki_student_id;
DROP INDEX IF EXISTS public.fki_server_id;
DROP INDEX IF EXISTS public.fki_semester_id;
DROP INDEX IF EXISTS public.fki_semester_group_id;
DROP INDEX IF EXISTS public.fki_section_id;
DROP INDEX IF EXISTS public.fki_required_interview_id;
DROP INDEX IF EXISTS public.fki_required_enrollment_exam_id;
DROP INDEX IF EXISTS public.fki_religion_id;
DROP INDEX IF EXISTS public.fki_proposed_enrollment_course_id;
DROP INDEX IF EXISTS public.fki_proposal_run_id;
DROP INDEX IF EXISTS public.fki_project_id;
DROP INDEX IF EXISTS public.fki_parent_id;
DROP INDEX IF EXISTS public.fki_owner_user_id;
DROP INDEX IF EXISTS public.fki_owner_student_id;
DROP INDEX IF EXISTS public.fki_owner_entity_id;
DROP INDEX IF EXISTS public.fki_material_topic_id;
DROP INDEX IF EXISTS public.fki_material_id;
DROP INDEX IF EXISTS public.fki_location_id;
DROP INDEX IF EXISTS public.fki_language_id;
DROP INDEX IF EXISTS public.fki_interview_id;
DROP INDEX IF EXISTS public.fki_identity_type_id;
DROP INDEX IF EXISTS public.fki_high_school_course_id;
DROP INDEX IF EXISTS public.fki_hierarchy_id;
DROP INDEX IF EXISTS public.fki_global_scope_entity_id;
DROP INDEX IF EXISTS public.fki_global_scope_academic_year_id;
DROP INDEX IF EXISTS public.fki_exam_material_id;
DROP INDEX IF EXISTS public.fki_exam_id;
DROP INDEX IF EXISTS public.fki_exam_centre_id;
DROP INDEX IF EXISTS public.fki_event_id;
DROP INDEX IF EXISTS public.fki_ethnicity_id;
DROP INDEX IF EXISTS public.fki_entity_id;
DROP INDEX IF EXISTS public.fki_enrollment_student_id;
DROP INDEX IF EXISTS public.fki_enrollment_course_id;
DROP INDEX IF EXISTS public.fki_enrollment_academic_year_id;
DROP INDEX IF EXISTS public.fki_created_by_user_id;
DROP INDEX IF EXISTS public.fki_course_year_setting_id;
DROP INDEX IF EXISTS public.fki_course_year_semester_id;
DROP INDEX IF EXISTS public.fki_course_type_id;
DROP INDEX IF EXISTS public.fki_course_specialization_id;
DROP INDEX IF EXISTS public.fki_course_material_id;
DROP INDEX IF EXISTS public.fki_course_id;
DROP INDEX IF EXISTS public.fki_course_entry_requirements_id;
DROP INDEX IF EXISTS public.fki_calendar_id;
DROP INDEX IF EXISTS public.fki_calculation_id;
DROP INDEX IF EXISTS public.fki_calculation_exam_id;
DROP INDEX IF EXISTS public.fki_calculation_course_type_id;
DROP INDEX IF EXISTS public.fki_calculation_course_id;
DROP INDEX IF EXISTS public.fki_calculation_academic_year_id;
DROP INDEX IF EXISTS public.fki_address_type_id;
DROP INDEX IF EXISTS public.fki_address_id;
DROP INDEX IF EXISTS public.fki_acorn_calendar_event_parts_user_group_version_id_;
DROP INDEX IF EXISTS public.dr_acorn_location_types_replica_identity;
DROP INDEX IF EXISTS public.dr_acorn_location_location_replica_identity;
DROP INDEX IF EXISTS public.dr_acorn_location_gps_replica_identity;
DROP INDEX IF EXISTS public.dr_acorn_location_areas_replica_identity;
DROP INDEX IF EXISTS public.dr_acorn_location_area_types_replica_identity;
DROP INDEX IF EXISTS public.dr_acorn_location_addresses_replica_identity;
DROP INDEX IF EXISTS public.dr_acorn_location_address_types_replica_identity;
DROP INDEX IF EXISTS public.deferred_bindings_slave_type_index;
DROP INDEX IF EXISTS public.deferred_bindings_slave_id_index;
DROP INDEX IF EXISTS public.deferred_bindings_session_key_index;
DROP INDEX IF EXISTS public.deferred_bindings_master_type_index;
DROP INDEX IF EXISTS public.deferred_bindings_master_field_index;
DROP INDEX IF EXISTS public.code_index;
DROP INDEX IF EXISTS public.cms_theme_templates_source_index;
DROP INDEX IF EXISTS public.cms_theme_templates_path_index;
DROP INDEX IF EXISTS public.cms_theme_logs_user_id_index;
DROP INDEX IF EXISTS public.cms_theme_logs_type_index;
DROP INDEX IF EXISTS public.cms_theme_logs_theme_index;
DROP INDEX IF EXISTS public.cms_theme_data_theme_index;
DROP INDEX IF EXISTS public.backend_user_throttle_user_id_index;
DROP INDEX IF EXISTS public.backend_user_throttle_ip_address_index;
DROP INDEX IF EXISTS public.admin_role_index;
DROP INDEX IF EXISTS public.act_code_index;
DROP INDEX IF EXISTS public.acorn_user_users_reset_password_code_index;
DROP INDEX IF EXISTS public.acorn_user_users_login_index;
DROP INDEX IF EXISTS public.acorn_user_users_activation_code_index;
DROP INDEX IF EXISTS public.acorn_user_user_groups_name;
DROP INDEX IF EXISTS public.acorn_user_user_groups_code_index;
DROP INDEX IF EXISTS public.acorn_user_throttle_user_id_index;
DROP INDEX IF EXISTS public.acorn_user_throttle_ip_address_index;
DROP INDEX IF EXISTS public.acorn_user_mail_blockers_user_id_index;
DROP INDEX IF EXISTS public.acorn_user_mail_blockers_template_index;
DROP INDEX IF EXISTS public.acorn_user_mail_blockers_email_index;
DROP INDEX IF EXISTS public.acorn_calendar_instances_date_event_part_id_instance_;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_languages DROP CONSTRAINT IF EXISTS user_language;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS unique_user_group_version_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS unique_user_group_id;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS unique_user;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS unique_student_enrollment;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_desires DROP CONSTRAINT IF EXISTS unique_student_course;
ALTER TABLE IF EXISTS ONLY public.acorn_university_courses DROP CONSTRAINT IF EXISTS unique_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_courses DROP CONSTRAINT IF EXISTS unique_enrollment_course_hierarchy;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS unique_course_year_academic_year_semester_specialization;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS unique_course_related_course;
ALTER TABLE IF EXISTS ONLY public.acorn_university_students DROP CONSTRAINT IF EXISTS unique_1to1_user_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_universities DROP CONSTRAINT IF EXISTS unique6_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_schools DROP CONSTRAINT IF EXISTS unique5_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_faculties DROP CONSTRAINT IF EXISTS unique4_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_education_authorities DROP CONSTRAINT IF EXISTS unique3_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_departments DROP CONSTRAINT IF EXISTS unique2_entity_id;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_topics DROP CONSTRAINT IF EXISTS topic_name;
ALTER TABLE IF EXISTS ONLY public.system_settings DROP CONSTRAINT IF EXISTS system_settings_pkey;
ALTER TABLE IF EXISTS ONLY public.system_revisions DROP CONSTRAINT IF EXISTS system_revisions_pkey;
ALTER TABLE IF EXISTS ONLY public.system_request_logs DROP CONSTRAINT IF EXISTS system_request_logs_pkey;
ALTER TABLE IF EXISTS ONLY public.system_plugin_versions DROP CONSTRAINT IF EXISTS system_plugin_versions_pkey;
ALTER TABLE IF EXISTS ONLY public.system_plugin_history DROP CONSTRAINT IF EXISTS system_plugin_history_pkey;
ALTER TABLE IF EXISTS ONLY public.system_parameters DROP CONSTRAINT IF EXISTS system_parameters_pkey;
ALTER TABLE IF EXISTS ONLY public.system_mail_templates DROP CONSTRAINT IF EXISTS system_mail_templates_pkey;
ALTER TABLE IF EXISTS ONLY public.system_mail_partials DROP CONSTRAINT IF EXISTS system_mail_partials_pkey;
ALTER TABLE IF EXISTS ONLY public.system_mail_layouts DROP CONSTRAINT IF EXISTS system_mail_layouts_pkey;
ALTER TABLE IF EXISTS ONLY public.system_files DROP CONSTRAINT IF EXISTS system_files_pkey;
ALTER TABLE IF EXISTS ONLY public.system_event_logs DROP CONSTRAINT IF EXISTS system_event_logs_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_students DROP CONSTRAINT IF EXISTS students_number;
ALTER TABLE IF EXISTS ONLY public.acorn_university_students DROP CONSTRAINT IF EXISTS students_import_source;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_status DROP CONSTRAINT IF EXISTS student_status;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS student_id_type;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_scores DROP CONSTRAINT IF EXISTS student_exam_material;
ALTER TABLE IF EXISTS ONLY public.sessions DROP CONSTRAINT IF EXISTS sessions_id_unique;
ALTER TABLE IF EXISTS ONLY public.backend_user_roles DROP CONSTRAINT IF EXISTS role_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS result_name;
ALTER TABLE IF EXISTS ONLY public.acorn_user_mail_blockers DROP CONSTRAINT IF EXISTS rainlab_user_mail_blockers_pkey;
ALTER TABLE IF EXISTS ONLY public.winter_translate_messages DROP CONSTRAINT IF EXISTS rainlab_translate_messages_pkey;
ALTER TABLE IF EXISTS ONLY public.winter_translate_locales DROP CONSTRAINT IF EXISTS rainlab_translate_locales_pkey;
ALTER TABLE IF EXISTS ONLY public.winter_translate_indexes DROP CONSTRAINT IF EXISTS rainlab_translate_indexes_pkey;
ALTER TABLE IF EXISTS ONLY public.winter_translate_attributes DROP CONSTRAINT IF EXISTS rainlab_translate_attributes_pkey;
ALTER TABLE IF EXISTS ONLY public.winter_location_states DROP CONSTRAINT IF EXISTS rainlab_location_states_pkey;
ALTER TABLE IF EXISTS ONLY public.winter_location_countries DROP CONSTRAINT IF EXISTS rainlab_location_countries_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_student_notes DROP CONSTRAINT IF EXISTS pk_acorn_enrollment_student_notes;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_students DROP CONSTRAINT IF EXISTS pk_acorn_enrollment_enrollment_students;
ALTER TABLE IF EXISTS ONLY public.backend_user_groups DROP CONSTRAINT IF EXISTS name_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_location_area_types DROP CONSTRAINT IF EXISTS name;
ALTER TABLE IF EXISTS ONLY public.winter_translate_attributes DROP CONSTRAINT IF EXISTS model_locale;
ALTER TABLE IF EXISTS ONLY public.migrations DROP CONSTRAINT IF EXISTS migrations_pkey;
ALTER TABLE IF EXISTS ONLY public.winter_translate_messages DROP CONSTRAINT IF EXISTS messages_data;
ALTER TABLE IF EXISTS ONLY public.winter_translate_messages DROP CONSTRAINT IF EXISTS messages_code;
ALTER TABLE IF EXISTS ONLY public.acorn_university_materials DROP CONSTRAINT IF EXISTS material_name;
ALTER TABLE IF EXISTS ONLY public.backend_users DROP CONSTRAINT IF EXISTS login_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_location_types DROP CONSTRAINT IF EXISTS location_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_types DROP CONSTRAINT IF EXISTS location_type_name_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_location_locations DROP CONSTRAINT IF EXISTS location_locations_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_gps DROP CONSTRAINT IF EXISTS location_gps_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_areas DROP CONSTRAINT IF EXISTS location_areas_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_area_types DROP CONSTRAINT IF EXISTS location_area_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_addresses DROP CONSTRAINT IF EXISTS location_addresses_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_address_types DROP CONSTRAINT IF EXISTS location_address_types_pkey;
ALTER TABLE IF EXISTS ONLY public.jobs DROP CONSTRAINT IF EXISTS jobs_pkey;
ALTER TABLE IF EXISTS ONLY public.job_batches DROP CONSTRAINT IF EXISTS job_batches_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS import_source_users;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_groups DROP CONSTRAINT IF EXISTS import_source_user_groups;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS import_source_hierarchies;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS import_source;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS id_type_value;
ALTER TABLE IF EXISTS ONLY public.failed_jobs DROP CONSTRAINT IF EXISTS failed_jobs_uuid_unique;
ALTER TABLE IF EXISTS ONLY public.failed_jobs DROP CONSTRAINT IF EXISTS failed_jobs_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS exam_course_material;
ALTER TABLE IF EXISTS ONLY public.backend_users DROP CONSTRAINT IF EXISTS email_unique;
ALTER TABLE IF EXISTS ONLY public.deferred_bindings DROP CONSTRAINT IF EXISTS deferred_bindings_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS cys_material_topic;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_types DROP CONSTRAINT IF EXISTS course_type_name;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS "course_type-calculation-academic_year";
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_plans DROP CONSTRAINT IF EXISTS course_academic_year_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_codes DROP CONSTRAINT IF EXISTS code_owner_entity;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_groups DROP CONSTRAINT IF EXISTS code;
ALTER TABLE IF EXISTS ONLY public.cms_theme_templates DROP CONSTRAINT IF EXISTS cms_theme_templates_pkey;
ALTER TABLE IF EXISTS ONLY public.cms_theme_logs DROP CONSTRAINT IF EXISTS cms_theme_logs_pkey;
ALTER TABLE IF EXISTS ONLY public.cms_theme_data DROP CONSTRAINT IF EXISTS cms_theme_data_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS calculation_code;
ALTER TABLE IF EXISTS ONLY public.cache DROP CONSTRAINT IF EXISTS cache_key_unique;
ALTER TABLE IF EXISTS ONLY public.backend_users DROP CONSTRAINT IF EXISTS backend_users_pkey;
ALTER TABLE IF EXISTS ONLY public.backend_users_groups DROP CONSTRAINT IF EXISTS backend_users_groups_pkey;
ALTER TABLE IF EXISTS ONLY public.backend_user_throttle DROP CONSTRAINT IF EXISTS backend_user_throttle_pkey;
ALTER TABLE IF EXISTS ONLY public.backend_user_roles DROP CONSTRAINT IF EXISTS backend_user_roles_pkey;
ALTER TABLE IF EXISTS ONLY public.backend_user_preferences DROP CONSTRAINT IF EXISTS backend_user_preferences_pkey;
ALTER TABLE IF EXISTS ONLY public.backend_user_groups DROP CONSTRAINT IF EXISTS backend_user_groups_pkey;
ALTER TABLE IF EXISTS ONLY public.backend_access_log DROP CONSTRAINT IF EXISTS backend_access_log_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_areas DROP CONSTRAINT IF EXISTS area_area_type;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS acorn_user_users_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS acorn_user_users_login_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_user_users DROP CONSTRAINT IF EXISTS acorn_user_users_email_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_groups DROP CONSTRAINT IF EXISTS acorn_user_user_groups_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group_versions DROP CONSTRAINT IF EXISTS acorn_user_user_group_versions_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group_version DROP CONSTRAINT IF EXISTS acorn_user_user_group_version_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group_types DROP CONSTRAINT IF EXISTS acorn_user_user_group_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_group DROP CONSTRAINT IF EXISTS acorn_user_user_group_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_throttle DROP CONSTRAINT IF EXISTS acorn_user_throttle_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_roles DROP CONSTRAINT IF EXISTS acorn_user_roles_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_role_user DROP CONSTRAINT IF EXISTS acorn_user_role_user_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_religions DROP CONSTRAINT IF EXISTS acorn_user_religions_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_user_religions DROP CONSTRAINT IF EXISTS acorn_user_religions_pk;
ALTER TABLE IF EXISTS ONLY public.acorn_user_languages DROP CONSTRAINT IF EXISTS acorn_user_languages_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_user_languages DROP CONSTRAINT IF EXISTS acorn_user_languages_name_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_user_user_languages DROP CONSTRAINT IF EXISTS acorn_user_language_user_pk;
ALTER TABLE IF EXISTS ONLY public.acorn_user_ethnicities DROP CONSTRAINT IF EXISTS acorn_user_ethnicitiess_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_user_ethnicities DROP CONSTRAINT IF EXISTS acorn_user_ethnicities_pk;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_years DROP CONSTRAINT IF EXISTS acorn_university_years_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_universities DROP CONSTRAINT IF EXISTS acorn_university_universities_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_teachers DROP CONSTRAINT IF EXISTS acorn_university_teachers_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_students DROP CONSTRAINT IF EXISTS acorn_university_students_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_types DROP CONSTRAINT IF EXISTS acorn_university_student_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_type DROP CONSTRAINT IF EXISTS acorn_university_student_type_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_statuses DROP CONSTRAINT IF EXISTS acorn_university_student_statuses_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_notes DROP CONSTRAINT IF EXISTS acorn_university_student_notes_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_identities DROP CONSTRAINT IF EXISTS acorn_university_student_identities_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_documents DROP CONSTRAINT IF EXISTS acorn_university_student_documents_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_removal DROP CONSTRAINT IF EXISTS acorn_university_student_course_material_removal_pk;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_course_material_addition DROP CONSTRAINT IF EXISTS acorn_university_student_course_material_addition_pk;
ALTER TABLE IF EXISTS ONLY public.acorn_university_student_codes DROP CONSTRAINT IF EXISTS acorn_university_student_codes_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semesters DROP CONSTRAINT IF EXISTS acorn_university_semesters_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_academic_year_semesters DROP CONSTRAINT IF EXISTS acorn_university_semester_year_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_semester_groups DROP CONSTRAINT IF EXISTS acorn_university_semester_groups_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_schools DROP CONSTRAINT IF EXISTS acorn_university_schools_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_projects DROP CONSTRAINT IF EXISTS acorn_university_projects_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_project_students DROP CONSTRAINT IF EXISTS acorn_university_project_students_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_topics DROP CONSTRAINT IF EXISTS acorn_university_material_topics_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_lectures DROP CONSTRAINT IF EXISTS acorn_university_lectures_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_identity_types DROP CONSTRAINT IF EXISTS acorn_university_identity_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchies DROP CONSTRAINT IF EXISTS acorn_university_hierarchies_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_faculties DROP CONSTRAINT IF EXISTS acorn_university_faculties_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_hierarchy_event DROP CONSTRAINT IF EXISTS acorn_university_entity_event_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_entities DROP CONSTRAINT IF EXISTS acorn_university_entities_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_education_authorities DROP CONSTRAINT IF EXISTS acorn_university_education_authorities_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_document_types DROP CONSTRAINT IF EXISTS acorn_university_document_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_departments DROP CONSTRAINT IF EXISTS acorn_university_departments_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_courses DROP CONSTRAINT IF EXISTS acorn_university_courses_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_plans DROP CONSTRAINT IF EXISTS acorn_university_course_year_settings_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_year_semesters DROP CONSTRAINT IF EXISTS acorn_university_course_year_semesters_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_specializations DROP CONSTRAINT IF EXISTS acorn_university_course_specializations_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_materials DROP CONSTRAINT IF EXISTS acorn_university_course_material_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_language DROP CONSTRAINT IF EXISTS acorn_university_course_language_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_years DROP CONSTRAINT IF EXISTS acorn_university_academic_years_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_servers DROP CONSTRAINT IF EXISTS acorn_servers_id_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_servers DROP CONSTRAINT IF EXISTS acorn_servers_hostname_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_reporting_reports DROP CONSTRAINT IF EXISTS acorn_reporting_reports_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_desires DROP CONSTRAINT IF EXISTS acorn_mofadala_desires_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_course_entry_requirements DROP CONSTRAINT IF EXISTS acorn_mofadala_course_entry_requirements_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_user_message_status DROP CONSTRAINT IF EXISTS acorn_messaging_user_message_status_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_status DROP CONSTRAINT IF EXISTS acorn_messaging_status_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_user DROP CONSTRAINT IF EXISTS acorn_messaging_message_user_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_user_group DROP CONSTRAINT IF EXISTS acorn_messaging_message_user_group_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message DROP CONSTRAINT IF EXISTS acorn_messaging_message_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_message DROP CONSTRAINT IF EXISTS acorn_messaging_message_message_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message_instance DROP CONSTRAINT IF EXISTS acorn_messaging_message_instance_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_message DROP CONSTRAINT IF EXISTS acorn_messaging_message_externalid_unique;
ALTER TABLE IF EXISTS ONLY public.acorn_messaging_label DROP CONSTRAINT IF EXISTS acorn_messaging_label_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_location_lookup DROP CONSTRAINT IF EXISTS acorn_location_location_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_types DROP CONSTRAINT IF EXISTS acorn_exam_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_sections DROP CONSTRAINT IF EXISTS acorn_exam_sections_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_score_names DROP CONSTRAINT IF EXISTS acorn_exam_score_names_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_scores DROP CONSTRAINT IF EXISTS acorn_exam_results_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_result_internal2s DROP CONSTRAINT IF EXISTS acorn_exam_result_internal2s_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_questions DROP CONSTRAINT IF EXISTS acorn_exam_questions_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_materials DROP CONSTRAINT IF EXISTS acorn_exam_materials_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_material_types DROP CONSTRAINT IF EXISTS acorn_exam_material_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interviews DROP CONSTRAINT IF EXISTS acorn_exam_interviews_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_interview_students DROP CONSTRAINT IF EXISTS acorn_exam_interview_student_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_instances DROP CONSTRAINT IF EXISTS acorn_exam_instances_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exams DROP CONSTRAINT IF EXISTS acorn_exam_exams_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_exam_materials DROP CONSTRAINT IF EXISTS acorn_exam_exam_material_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_university_course_types DROP CONSTRAINT IF EXISTS acorn_exam_course_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_centres DROP CONSTRAINT IF EXISTS acorn_exam_centres_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculations DROP CONSTRAINT IF EXISTS acorn_exam_calculations_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_types DROP CONSTRAINT IF EXISTS acorn_exam_calculation_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_material_types DROP CONSTRAINT IF EXISTS acorn_exam_calculation_material_type_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_types DROP CONSTRAINT IF EXISTS acorn_exam_calculation_course_type_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_courses DROP CONSTRAINT IF EXISTS acorn_exam_calculation_course_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_calculation_course_materials DROP CONSTRAINT IF EXISTS acorn_exam_calculation_course_material_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_exam_answers DROP CONSTRAINT IF EXISTS acorn_exam_answers_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_runs DROP CONSTRAINT IF EXISTS acorn_enrollment_runs_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_enrollments DROP CONSTRAINT IF EXISTS acorn_enrollment_enrollments_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_enrollment_courses DROP CONSTRAINT IF EXISTS acorn_enrollment_enrollment_entities_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_instances DROP CONSTRAINT IF EXISTS acorn_calendar_instances_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_events DROP CONSTRAINT IF EXISTS acorn_calendar_events_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_types DROP CONSTRAINT IF EXISTS acorn_calendar_event_types_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_statuses DROP CONSTRAINT IF EXISTS acorn_calendar_event_statuses_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_parts DROP CONSTRAINT IF EXISTS acorn_calendar_event_parts_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_part_user DROP CONSTRAINT IF EXISTS acorn_calendar_event_part_user_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_event_part_user_group DROP CONSTRAINT IF EXISTS acorn_calendar_event_part_user_group_pkey;
ALTER TABLE IF EXISTS ONLY public.acorn_calendar_calendars DROP CONSTRAINT IF EXISTS acorn_calendar_calendars_pkey;
ALTER TABLE IF EXISTS public.winter_translate_messages ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.winter_translate_locales ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.winter_translate_indexes ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.winter_translate_attributes ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.winter_location_states ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.winter_location_countries ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_settings ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_revisions ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_request_logs ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_plugin_versions ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_plugin_history ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_parameters ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_mail_templates ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_mail_partials ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_mail_layouts ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_files ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.system_event_logs ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.migrations ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.jobs ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.failed_jobs ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.deferred_bindings ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.cms_theme_templates ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.cms_theme_logs ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.cms_theme_data ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.backend_users ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.backend_user_throttle ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.backend_user_roles ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.backend_user_preferences ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.backend_user_groups ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.backend_access_log ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.acorn_reporting_reports ALTER COLUMN id DROP DEFAULT;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_university_categories;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_universities;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_type_certificates;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_students;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_student_desire_details;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_mofadala_years;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_exam_centers;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_departments;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_department_details;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_cities;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_certificate_languages;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_candidate_exams;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_candidate_exam_materials;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_candidate_exam_material_marks;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_branches;
DROP SEQUENCE IF EXISTS public.system_settings_id_seq;
DROP TABLE IF EXISTS public.system_settings;
DROP SEQUENCE IF EXISTS public.system_revisions_id_seq;
DROP TABLE IF EXISTS public.system_revisions;
DROP SEQUENCE IF EXISTS public.system_request_logs_id_seq;
DROP TABLE IF EXISTS public.system_request_logs;
DROP SEQUENCE IF EXISTS public.system_plugin_versions_id_seq;
DROP TABLE IF EXISTS public.system_plugin_versions;
DROP SEQUENCE IF EXISTS public.system_plugin_history_id_seq;
DROP TABLE IF EXISTS public.system_plugin_history;
DROP SEQUENCE IF EXISTS public.system_parameters_id_seq;
DROP TABLE IF EXISTS public.system_parameters;
DROP SEQUENCE IF EXISTS public.system_mail_templates_id_seq;
DROP TABLE IF EXISTS public.system_mail_templates;
DROP SEQUENCE IF EXISTS public.system_mail_partials_id_seq;
DROP TABLE IF EXISTS public.system_mail_partials;
DROP SEQUENCE IF EXISTS public.system_mail_layouts_id_seq;
DROP TABLE IF EXISTS public.system_mail_layouts;
DROP SEQUENCE IF EXISTS public.system_files_id_seq;
DROP TABLE IF EXISTS public.system_files;
DROP SEQUENCE IF EXISTS public.system_event_logs_id_seq;
DROP TABLE IF EXISTS public.system_event_logs;
DROP TABLE IF EXISTS public.sessions;
DROP SEQUENCE IF EXISTS public.rainlab_translate_messages_id_seq;
DROP TABLE IF EXISTS public.winter_translate_messages;
DROP SEQUENCE IF EXISTS public.rainlab_translate_locales_id_seq;
DROP TABLE IF EXISTS public.winter_translate_locales;
DROP SEQUENCE IF EXISTS public.rainlab_translate_indexes_id_seq;
DROP TABLE IF EXISTS public.winter_translate_indexes;
DROP SEQUENCE IF EXISTS public.rainlab_translate_attributes_id_seq;
DROP TABLE IF EXISTS public.winter_translate_attributes;
DROP SEQUENCE IF EXISTS public.rainlab_location_states_id_seq;
DROP TABLE IF EXISTS public.winter_location_states;
DROP SEQUENCE IF EXISTS public.rainlab_location_countries_id_seq;
DROP TABLE IF EXISTS public.winter_location_countries;
DROP SEQUENCE IF EXISTS public.migrations_id_seq;
DROP TABLE IF EXISTS public.migrations;
DROP SEQUENCE IF EXISTS public.jobs_id_seq;
DROP TABLE IF EXISTS public.jobs;
DROP TABLE IF EXISTS public.job_batches;
DROP SEQUENCE IF EXISTS public.failed_jobs_id_seq;
DROP TABLE IF EXISTS public.failed_jobs;
DROP SEQUENCE IF EXISTS public.deferred_bindings_id_seq;
DROP TABLE IF EXISTS public.deferred_bindings;
DROP SEQUENCE IF EXISTS public.cms_theme_templates_id_seq;
DROP TABLE IF EXISTS public.cms_theme_templates;
DROP SEQUENCE IF EXISTS public.cms_theme_logs_id_seq;
DROP TABLE IF EXISTS public.cms_theme_logs;
DROP SEQUENCE IF EXISTS public.cms_theme_data_id_seq;
DROP TABLE IF EXISTS public.cms_theme_data;
DROP TABLE IF EXISTS public.cache;
DROP SEQUENCE IF EXISTS public.backend_users_id_seq;
DROP TABLE IF EXISTS public.backend_users_groups;
DROP SEQUENCE IF EXISTS public.backend_user_throttle_id_seq;
DROP TABLE IF EXISTS public.backend_user_throttle;
DROP SEQUENCE IF EXISTS public.backend_user_roles_id_seq;
DROP TABLE IF EXISTS public.backend_user_roles;
DROP SEQUENCE IF EXISTS public.backend_user_preferences_id_seq;
DROP TABLE IF EXISTS public.backend_user_preferences;
DROP SEQUENCE IF EXISTS public.backend_user_groups_id_seq;
DROP TABLE IF EXISTS public.backend_user_groups;
DROP SEQUENCE IF EXISTS public.backend_access_log_id_seq;
DROP TABLE IF EXISTS public.backend_access_log;
DROP VIEW IF EXISTS public.acorn_user_user_group_version_usages;
DROP TABLE IF EXISTS public.acorn_user_user_group_types;
DROP TABLE IF EXISTS public.acorn_user_user_group;
DROP TABLE IF EXISTS public.acorn_user_throttle;
DROP TABLE IF EXISTS public.acorn_user_roles;
DROP TABLE IF EXISTS public.acorn_user_role_user;
DROP TABLE IF EXISTS public.acorn_user_mail_blockers;
DROP TABLE IF EXISTS public.acorn_university_universities;
DROP TABLE IF EXISTS public.acorn_university_teachers;
DROP TABLE IF EXISTS public.acorn_university_student_type;
DROP VIEW IF EXISTS public.acorn_university_student_lookups;
DROP TABLE IF EXISTS public.acorn_university_student_course_material_removal;
DROP TABLE IF EXISTS public.acorn_university_student_course_material_addition;
DROP TABLE IF EXISTS public.acorn_university_schools;
DROP MATERIALIZED VIEW IF EXISTS public.acorn_university_olapcube;
DROP VIEW IF EXISTS public.acorn_university_legacy_updates;
DROP FOREIGN TABLE IF EXISTS public.university_mofadala_baccalaureate_marks;
DROP VIEW IF EXISTS public.acorn_university_legacy_fulls;
DROP TABLE IF EXISTS public.acorn_user_religions;
DROP TABLE IF EXISTS public.acorn_user_ethnicities;
DROP VIEW IF EXISTS public.acorn_university_legacy_scores;
DROP TABLE IF EXISTS public.acorn_university_faculties;
DROP TABLE IF EXISTS public.acorn_university_education_authorities;
DROP TABLE IF EXISTS public.acorn_university_departments;
DROP TABLE IF EXISTS public.acorn_university_course_language;
DROP SEQUENCE IF EXISTS public.acorn_reporting_reports_id_seq;
DROP TABLE IF EXISTS public.acorn_reporting_reports;
DROP VIEW IF EXISTS public.acorn_names;
DROP TABLE IF EXISTS public.acorn_messaging_user_message_status;
DROP TABLE IF EXISTS public.acorn_messaging_status;
DROP TABLE IF EXISTS public.acorn_messaging_message_user_group;
DROP TABLE IF EXISTS public.acorn_messaging_message_user;
DROP TABLE IF EXISTS public.acorn_messaging_message_message;
DROP TABLE IF EXISTS public.acorn_messaging_message_instance;
DROP TABLE IF EXISTS public.acorn_messaging_message;
DROP TABLE IF EXISTS public.acorn_messaging_label;
DROP TABLE IF EXISTS public.acorn_messaging_action;
DROP TABLE IF EXISTS public.acorn_location_types;
DROP TABLE IF EXISTS public.acorn_location_lookup;
DROP VIEW IF EXISTS public.acorn_location_location_links;
DROP TABLE IF EXISTS public.acorn_servers;
DROP TABLE IF EXISTS public.acorn_location_user_group_location;
DROP TABLE IF EXISTS public.acorn_location_gps;
DROP TABLE IF EXISTS public.acorn_location_areas;
DROP TABLE IF EXISTS public.acorn_location_area_types;
DROP TABLE IF EXISTS public.acorn_location_addresses;
DROP TABLE IF EXISTS public.acorn_location_address_types;
DROP VIEW IF EXISTS public.acorn_location_address_links;
DROP TABLE IF EXISTS public.acorn_location_user_addresses;
DROP TABLE IF EXISTS public.acorn_location_locations;
DROP VIEW IF EXISTS public.acorn_exam_token2s;
DROP VIEW IF EXISTS public.acorn_exam_papers;
DROP VIEW IF EXISTS public.acorn_exam_certificates;
DROP TABLE IF EXISTS public.acorn_user_user_languages;
DROP TABLE IF EXISTS public.acorn_user_languages;
DROP VIEW IF EXISTS public.acorn_exam_data_entry_scores;
DROP TABLE IF EXISTS public.acorn_user_user_group_versions;
DROP VIEW IF EXISTS public.acorn_exam_results;
DROP TABLE IF EXISTS public.acorn_exam_result_internal2s;
DROP VIEW IF EXISTS public.acorn_enrollment_statistics;
DROP MATERIALIZED VIEW IF EXISTS public.acorn_enrollment_olapcube;
DROP TABLE IF EXISTS public.acorn_user_user_groups;
DROP TABLE IF EXISTS public.acorn_user_user_group_version;
DROP TABLE IF EXISTS public.acorn_university_student_status;
DROP TABLE IF EXISTS public.acorn_university_courses;
DROP TABLE IF EXISTS public.acorn_university_course_year_semesters;
DROP TABLE IF EXISTS public.acorn_enrollment_students;
DROP TABLE IF EXISTS public.acorn_enrollment_courses;
DROP VIEW IF EXISTS public.acorn_dbauth_user;
DROP TABLE IF EXISTS public.backend_users;
DROP TABLE IF EXISTS public.acorn_user_users;
DROP VIEW IF EXISTS public.acorn_created_bys;
DROP TABLE IF EXISTS public.acorn_university_students;
DROP SEQUENCE IF EXISTS public.acorn_university_students_number;
DROP VIEW IF EXISTS public.acorn_calendar_upcreated_ats;
DROP TABLE IF EXISTS public.acorn_university_student_types;
DROP TABLE IF EXISTS public.acorn_university_student_statuses;
DROP TABLE IF EXISTS public.acorn_university_student_notes;
DROP TABLE IF EXISTS public.acorn_university_student_identities;
DROP TABLE IF EXISTS public.acorn_university_student_documents;
DROP TABLE IF EXISTS public.acorn_university_student_codes;
DROP TABLE IF EXISTS public.acorn_university_semesters;
DROP TABLE IF EXISTS public.acorn_university_semester_groups;
DROP TABLE IF EXISTS public.acorn_university_projects;
DROP TABLE IF EXISTS public.acorn_university_project_students;
DROP TABLE IF EXISTS public.acorn_university_materials;
DROP TABLE IF EXISTS public.acorn_university_material_types;
DROP TABLE IF EXISTS public.acorn_university_material_topics;
DROP TABLE IF EXISTS public.acorn_university_identity_types;
DROP TABLE IF EXISTS public.acorn_university_entities;
DROP TABLE IF EXISTS public.acorn_university_document_types;
DROP TABLE IF EXISTS public.acorn_university_course_years;
DROP TABLE IF EXISTS public.acorn_university_course_types;
DROP TABLE IF EXISTS public.acorn_university_course_specializations;
DROP TABLE IF EXISTS public.acorn_university_course_plans;
DROP TABLE IF EXISTS public.acorn_university_course_materials;
DROP TABLE IF EXISTS public.acorn_exam_types;
DROP TABLE IF EXISTS public.acorn_exam_sections;
DROP TABLE IF EXISTS public.acorn_exam_scores;
DROP TABLE IF EXISTS public.acorn_exam_score_names;
DROP TABLE IF EXISTS public.acorn_exam_questions;
DROP TABLE IF EXISTS public.acorn_exam_interviews;
DROP TABLE IF EXISTS public.acorn_exam_instances;
DROP TABLE IF EXISTS public.acorn_exam_exams;
DROP TABLE IF EXISTS public.acorn_exam_exam_materials;
DROP TABLE IF EXISTS public.acorn_exam_centres;
DROP TABLE IF EXISTS public.acorn_exam_calculations;
DROP TABLE IF EXISTS public.acorn_exam_calculation_types;
DROP TABLE IF EXISTS public.acorn_exam_calculation_material_types;
DROP TABLE IF EXISTS public.acorn_exam_calculation_courses;
DROP TABLE IF EXISTS public.acorn_exam_calculation_course_types;
DROP TABLE IF EXISTS public.acorn_exam_calculation_course_materials;
DROP TABLE IF EXISTS public.acorn_exam_answers;
DROP TABLE IF EXISTS public.acorn_enrollment_student_notes;
DROP TABLE IF EXISTS public.acorn_enrollment_runs;
DROP TABLE IF EXISTS public.acorn_enrollment_enrollments;
DROP TABLE IF EXISTS public.acorn_enrollment_desires;
DROP TABLE IF EXISTS public.acorn_enrollment_course_entry_requirements;
DROP VIEW IF EXISTS public.acorn_calendar_linked_events;
DROP TABLE IF EXISTS public.acorn_university_lectures;
DROP TABLE IF EXISTS public.acorn_university_hierarchy_event;
DROP TABLE IF EXISTS public.acorn_university_academic_years;
DROP SEQUENCE IF EXISTS public.acorn_university_year_seq;
DROP TABLE IF EXISTS public.acorn_university_academic_year_semesters;
DROP TABLE IF EXISTS public.acorn_exam_interview_students;
DROP VIEW IF EXISTS public.acorn_calendar_linked_calendars;
DROP TABLE IF EXISTS public.acorn_university_hierarchies;
DROP TABLE IF EXISTS public.acorn_calendar_instances;
DROP TABLE IF EXISTS public.acorn_calendar_events;
DROP TABLE IF EXISTS public.acorn_calendar_event_types;
DROP TABLE IF EXISTS public.acorn_calendar_event_statuses;
DROP TABLE IF EXISTS public.acorn_calendar_event_parts;
DROP TABLE IF EXISTS public.acorn_calendar_event_part_user_group;
DROP TABLE IF EXISTS public.acorn_calendar_event_part_user;
DROP TABLE IF EXISTS public.acorn_calendar_calendars;
DROP FOREIGN TABLE IF EXISTS live_public.acorn_exam_scores;
DROP USER MAPPING IF EXISTS FOR university SERVER localserver_universityacceptance;
DROP USER MAPPING IF EXISTS FOR token_1 SERVER localserver_universityacceptance;
DROP USER MAPPING IF EXISTS FOR sz SERVER localserver_universityacceptance;
DROP SERVER IF EXISTS localserver_universityacceptance;
DROP USER MAPPING IF EXISTS FOR sz SERVER live_university;
DROP SERVER IF EXISTS live_university;
DROP AGGREGATE IF EXISTS public.agg_acorn_last(anyelement);
DROP AGGREGATE IF EXISTS public.agg_acorn_first(anyelement);
DROP FUNCTION IF EXISTS public.fn_acorn_user_user_languages_current();
DROP FUNCTION IF EXISTS public.fn_acorn_user_user_group_version_current();
DROP FUNCTION IF EXISTS public.fn_acorn_user_user_group_first_version();
DROP FUNCTION IF EXISTS public.fn_acorn_user_get_seed_user();
DROP FUNCTION IF EXISTS public.fn_acorn_user_code_acronym(name character varying, word integer, length integer);
DROP FUNCTION IF EXISTS public.fn_acorn_user_code(name character varying, word integer, length integer);
DROP FUNCTION IF EXISTS public.fn_acorn_updated_by_user_id();
DROP FUNCTION IF EXISTS public.fn_acorn_university_table_counts(_schema character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_university_students_ales_refresh(p_model_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_university_student_identities_current();
DROP FUNCTION IF EXISTS public.fn_acorn_university_student_documents();
DROP FUNCTION IF EXISTS public.fn_acorn_university_student_codes_current();
DROP FUNCTION IF EXISTS public.fn_acorn_university_semester_ordinal_insert();
DROP FUNCTION IF EXISTS public.fn_acorn_university_semester_ordinal_delete();
DROP FUNCTION IF EXISTS public.fn_acorn_university_scope_entities(p_descendant_entity_id uuid, p_ancestor_entity_id character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_university_provision_year_semesters();
DROP FUNCTION IF EXISTS public.fn_acorn_university_legacy_import_enrollment(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_legacy_import_county(p_county character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_university_legacy_import_certificate_code(p_county_name character varying, p_certificate_name character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous boolean, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous boolean, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_lecture_sync_lock_event();
DROP FUNCTION IF EXISTS public.fn_acorn_university_import_source_empty();
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchy_lock_event();
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_update_version();
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_manage_cys();
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_entity_leaf_type(p_entity_id uuid, p_throw_invalid boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_descendants_user_cnts();
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_descendants_user_cnt(p_id uuid, p_nest_left integer, p_nest_depth integer, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_descendants(p_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_delete_version();
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_create_version();
DROP FUNCTION IF EXISTS public.fn_acorn_university_hierarchies_ascendants(p_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_university_entities_leaf_table();
DROP FUNCTION IF EXISTS public.fn_acorn_university_enrollment_year();
DROP FUNCTION IF EXISTS public.fn_acorn_university_delete_user_group();
DROP FUNCTION IF EXISTS public.fn_acorn_university_delete_entity();
DROP FUNCTION IF EXISTS public.fn_acorn_university_cys_manage_hierarchy();
DROP FUNCTION IF EXISTS public.fn_acorn_university_courses_unique_name_type();
DROP FUNCTION IF EXISTS public.fn_acorn_university_cm_order();
DROP FUNCTION IF EXISTS public.fn_acorn_university_cascade_delete_event();
DROP FUNCTION IF EXISTS public.fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]);
DROP FUNCTION IF EXISTS public.fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_hierarchies_refresh_counts(p_model_id uuid, p_user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_university_academic_years_copy_to(p_old_academic_year_id uuid, p_new_academic_year_id uuid, p_user_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean, p_old_parent_id uuid, p_new_parent_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_truncate_database(schema_like character varying, table_like character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character);
DROP FUNCTION IF EXISTS public.fn_acorn_table_counts(_schema character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_sumproduct(VARIADIC ints double precision[]);
DROP FUNCTION IF EXISTS public.fn_acorn_sumproduct();
DROP FUNCTION IF EXISTS public.fn_acorn_sum(ints character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_sum(VARIADIC ints double precision[]);
DROP FUNCTION IF EXISTS public.fn_acorn_sum();
DROP FUNCTION IF EXISTS public.fn_acorn_server_id();
DROP FUNCTION IF EXISTS public.fn_acorn_reset_sequences(schema_like character varying, table_like character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_new_replicated_row();
DROP FUNCTION IF EXISTS public.fn_acorn_min(VARIADIC ints double precision[]);
DROP FUNCTION IF EXISTS public.fn_acorn_min();
DROP FUNCTION IF EXISTS public.fn_acorn_max(VARIADIC ints double precision[]);
DROP FUNCTION IF EXISTS public.fn_acorn_max();
DROP FUNCTION IF EXISTS public.fn_acorn_last(anyelement, anyelement);
DROP FUNCTION IF EXISTS public.fn_acorn_first(anyelement, anyelement);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_tokenize(p_expr character varying, p_level integer, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_token_name_internal(p_titles character varying[]);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_token_name(p_id uuid, VARIADIC p_titles character varying[]);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_token_name(VARIADIC p_titles character varying[]);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_scores_log();
DROP FUNCTION IF EXISTS public.fn_acorn_exam_explain(p_expr character varying, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_eval(p_expr character varying, p_level integer, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_concat_strict(VARIADIC p_args anyarray);
DROP FUNCTION IF EXISTS public.fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_score_first(p_enrollment_id uuid, p_user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_desires_ordinal();
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_desire_first(p_enrollment_id uuid, p_user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_all(p_enrollment_id uuid, p_user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid);
DROP FUNCTION IF EXISTS public.fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision);
DROP FUNCTION IF EXISTS public.fn_acorn_created_by_user_id();
DROP FUNCTION IF EXISTS public.fn_acorn_count(VARIADIC ints double precision[]);
DROP FUNCTION IF EXISTS public.fn_acorn_count();
DROP FUNCTION IF EXISTS public.fn_acorn_calendar_seed();
DROP FUNCTION IF EXISTS public.fn_acorn_calendar_lazy_create_event(calendar_name character varying, owner_user_id uuid, type_name character varying, status_name character varying, event_name character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_calendar_is_date(s character varying, d timestamp without time zone);
DROP FUNCTION IF EXISTS public.fn_acorn_calendar_generate_event_instances(new_event_part record, old_event_part record);
DROP FUNCTION IF EXISTS public.fn_acorn_calendar_events_generate_event_instances();
DROP FUNCTION IF EXISTS public.fn_acorn_calendar_create_event(p_calendar_id uuid, p_owner_user_id uuid, p_event_type_id uuid, p_event_status_id uuid, p_name character varying, p_date_from timestamp without time zone, p_date_to timestamp without time zone);
DROP FUNCTION IF EXISTS public.fn_acorn_calendar_create_event(calendar_id uuid, owner_user_id uuid, type_id uuid, status_id uuid, name character varying);
DROP FUNCTION IF EXISTS public.fn_acorn_avg(VARIADIC ints double precision[]);
DROP FUNCTION IF EXISTS public.fn_acorn_avg();
DROP FUNCTION IF EXISTS public.fn_acorn_add_websockets_triggers(schema character varying, table_prefix character varying);
DROP EXTENSION IF EXISTS postgres_fdw;
DROP EXTENSION IF EXISTS pg_trgm;
DROP EXTENSION IF EXISTS http;
DROP EXTENSION IF EXISTS hostname;
DROP EXTENSION IF EXISTS fuzzystrmatch;
DROP EXTENSION IF EXISTS earthdistance;
DROP EXTENSION IF EXISTS cube;
-- *not* dropping schema, since initdb creates it
DROP SCHEMA IF EXISTS product;
DROP SCHEMA IF EXISTS live_public;
DROP SCHEMA IF EXISTS live_4_backup;
--
-- Name: live_4_backup; Type: SCHEMA; Schema: -; Owner: sz
--

CREATE SCHEMA live_4_backup;


ALTER SCHEMA live_4_backup OWNER TO sz;

--
-- Name: live_public; Type: SCHEMA; Schema: -; Owner: sz
--

CREATE SCHEMA live_public;


ALTER SCHEMA live_public OWNER TO sz;

--
-- Name: product; Type: SCHEMA; Schema: -; Owner: university
--

CREATE SCHEMA product;


ALTER SCHEMA product OWNER TO university;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: postgres
--

-- *not* creating schema, since initdb creates it


ALTER SCHEMA public OWNER TO postgres;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: postgres
--

COMMENT ON SCHEMA public IS '';


--
-- Name: cube; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS cube WITH SCHEMA public;


--
-- Name: EXTENSION cube; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION cube IS 'data type for multidimensional cubes';


--
-- Name: earthdistance; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS earthdistance WITH SCHEMA public;


--
-- Name: EXTENSION earthdistance; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION earthdistance IS 'calculate great-circle distances on the surface of the Earth';


--
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- Name: hostname; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS hostname WITH SCHEMA public;


--
-- Name: EXTENSION hostname; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION hostname IS 'Get the server host name';


--
-- Name: http; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS http WITH SCHEMA public;


--
-- Name: EXTENSION http; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION http IS 'HTTP client for PostgreSQL, allows web page retrieval inside the database.';


--
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


--
-- Name: postgres_fdw; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgres_fdw WITH SCHEMA public;


--
-- Name: EXTENSION postgres_fdw; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgres_fdw IS 'foreign-data wrapper for remote PostgreSQL servers';


--
-- Name: fn_acorn_add_websockets_triggers(character varying, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_add_websockets_triggers(schema character varying, table_prefix character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
            
            begin
        -- SELECT * FROM information_schema.tables;
        -- This assumes that fn_acorn_new_replicated_row() exists
        -- Trigger on replpica also: ENABLE ALWAYS
        execute (
          SELECT string_agg(concat(
            'ALTER TABLE IF EXISTS ', table_schema, '.', table_name, ' ADD COLUMN IF NOT EXISTS response text;',
            'CREATE OR REPLACE TRIGGER tr_', table_name, '_new_replicated_row
                BEFORE INSERT
                ON ', table_schema, '.', table_name, '
                FOR EACH ROW
                EXECUTE FUNCTION public.fn_acorn_new_replicated_row();',
            'ALTER TABLE IF EXISTS ', table_schema, '.', table_name, ' ENABLE ALWAYS TRIGGER tr_', table_name, '_new_replicated_row;'
          ), ' ')
          FROM information_schema.tables
          where table_catalog = current_database()
          and table_schema like(schema)
          and table_name like(table_prefix)
          and table_type = 'BASE TABLE'
        );
end;
            $$;


ALTER FUNCTION public.fn_acorn_add_websockets_triggers(schema character varying, table_prefix character varying) OWNER TO university;

--
-- Name: fn_acorn_avg(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_avg() RETURNS double precision
    LANGUAGE sql
    AS $$
	select NULL::int;
$$;


ALTER FUNCTION public.fn_acorn_avg() OWNER TO university;

--
-- Name: fn_acorn_avg(double precision[]); Type: FUNCTION; Schema: public; Owner: sz
--

CREATE FUNCTION public.fn_acorn_avg(VARIADIC ints double precision[]) RETURNS double precision
    LANGUAGE sql
    AS $$
	select avg(unnest) from (SELECT unnest(ints)) a;
$$;


ALTER FUNCTION public.fn_acorn_avg(VARIADIC ints double precision[]) OWNER TO sz;

--
-- Name: fn_acorn_calendar_create_event(uuid, uuid, uuid, uuid, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_calendar_create_event(calendar_id uuid, owner_user_id uuid, type_id uuid, status_id uuid, name character varying) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
            
            begin
            return public.fn_acorn_calendar_create_event(calendar_id, owner_user_id, type_id, status_id, name, now()::timestamp without time zone, now()::timestamp without time zone);
end;
            $$;


ALTER FUNCTION public.fn_acorn_calendar_create_event(calendar_id uuid, owner_user_id uuid, type_id uuid, status_id uuid, name character varying) OWNER TO university;

--
-- Name: fn_acorn_calendar_create_event(uuid, uuid, uuid, uuid, character varying, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_calendar_create_event(p_calendar_id uuid, p_owner_user_id uuid, p_event_type_id uuid, p_event_status_id uuid, p_name character varying, p_date_from timestamp without time zone, p_date_to timestamp without time zone) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
declare
	p_new_event_id uuid;
begin
	insert into public.acorn_calendar_events(calendar_id, owner_user_id) 
		values(p_calendar_id, p_owner_user_id) returning id into p_new_event_id;
	insert into public.acorn_calendar_event_parts(event_id, type_id, status_id, name, start, "end") 
		values(p_new_event_id, p_event_type_id, p_event_status_id, p_name, p_date_from, p_date_to);
	return p_new_event_id;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_calendar_create_event(p_calendar_id uuid, p_owner_user_id uuid, p_event_type_id uuid, p_event_status_id uuid, p_name character varying, p_date_from timestamp without time zone, p_date_to timestamp without time zone) OWNER TO university;

--
-- Name: fn_acorn_calendar_events_generate_event_instances(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_calendar_events_generate_event_instances() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
            
            begin
            return public.fn_acorn_calendar_generate_event_instances(NEW, OLD);
end;
            $$;


ALTER FUNCTION public.fn_acorn_calendar_events_generate_event_instances() OWNER TO university;

--
-- Name: fn_acorn_calendar_generate_event_instances(record, record); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_calendar_generate_event_instances(new_event_part record, old_event_part record) RETURNS record
    LANGUAGE plpgsql
    AS $$
            declare
days_before interval;
days_after interval;
days_count int;
today date := now();
date_start date;
            begin
                -- This function creates the individual event instances on specific dates
                -- from event definitions, that can have preiodic repetition
                -- For example, an single event definition that repeats weekly for 2 months
                -- may have 9 individual event instances on specific dates
                -- Declares are configurable from WinterCMS settings

                -- Check if anything repeaty has changed (not locked_by_user_id)
                if     old_event_part is null
                    or new_event_part.start  is distinct from old_event_part.start
                    or new_event_part."end"  is distinct from old_event_part."end"
                    or new_event_part.until  is distinct from old_event_part.until
                    or new_event_part.mask   is distinct from old_event_part.mask
                    or new_event_part.repeat is distinct from old_event_part.repeat
                    or new_event_part.mask_type is distinct from old_event_part.mask_type
                    or new_event_part.repeat_frequency     is distinct from old_event_part.repeat_frequency
                    or new_event_part.parent_event_part_id is distinct from old_event_part.parent_event_part_id
                    or new_event_part.instances_deleted    is distinct from old_event_part.instances_deleted
                then
                    -- Settings
                    select coalesce((select substring("value" from '"days_before":"([^"]+)"')
                        from system_settings where item = 'acorn_calendar_settings'), '1 year')
                        into days_before;
                    select coalesce((select substring("value" from '"days_after":"([^"]+)"')
                        from system_settings where item = 'acorn_calendar_settings'), '2 years')
                        into days_after;
                    select extract('epoch' from days_before + days_after)/3600/24.0
                        into days_count;
                    select today - days_before
                        into date_start;

                    -- For updates (id cannot change)
                    delete from acorn_calendar_instances where event_part_id = new_event_part.id;

                    -- For inserts
                    insert into acorn_calendar_instances("date", event_part_id, instance_start, instance_end, instance_num)
                    select date_start + interval '1' day * gs as "date", ev.*
                    from generate_series(0, days_count) as gs
                    inner join (
                        -- single event
                        select new_event_part.id as event_part_id,
                            new_event_part."start" as "instance_start",
                            new_event_part."end"   as "instance_end",
                            0 as instance_num
                        where new_event_part.repeat is null
                    union all
                        -- repetition, no parent container
                        select new_event_part.id as event_part_id,
                            new_event_part."start" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs as "instance_start",
                            new_event_part."end" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs   as "instance_end",
                            gs.gs as instance_num
                        from generate_series(0, days_count) as gs
                        where not new_event_part.repeat is null and new_event_part.parent_event_part_id is null
                        and (new_event_part.instances_deleted is null or not gs.gs = any(new_event_part.instances_deleted))
                        and (new_event_part.until is null or new_event_part."start" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs < new_event_part.until)
                        and (new_event_part.mask = 0 or new_event_part.mask & (2^date_part(new_event_part.mask_type, new_event_part."start" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs))::int != 0)
                    union all
                        -- repetition with parent_event_part_id container calendar events
                        select new_event_part.id as event_part_id,
                            new_event_part."start" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs as "instance_start",
                            new_event_part."end" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs   as "instance_end",
                            gs.gs as instance_num
                        from generate_series(0, days_count) as gs
                        inner join acorn_calendar_instances pcc on new_event_part.parent_event_part_id = pcc.event_part_id
                            and (pcc.date, pcc.date + 1)
                            overlaps (new_event_part."start" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs, new_event_part."end" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs)
                        where not new_event_part.repeat is null
                        and (new_event_part.instances_deleted is null or not gs.gs = any(new_event_part.instances_deleted))
                        and (new_event_part.until is null or new_event_part."start" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs < new_event_part.until)
                        and (new_event_part.mask = 0 or new_event_part.mask & (2^date_part(new_event_part.mask_type, new_event_part."start" + new_event_part.repeat_frequency * new_event_part."repeat" * gs.gs))::int != 0)
                    ) ev
                    on  (date_start + interval '1' day * gs, date_start + interval '1' day * (gs+1))
                    overlaps (ev.instance_start, ev.instance_end);

                    -- Recursively update child event parts
                    -- TODO: This could infinetly cycle
                    update acorn_calendar_event_parts set id = id
                        where parent_event_part_id = new_event_part.id
                        and not id = new_event_part.id;
                end if;

                return new_event_part;
end;
            $$;


ALTER FUNCTION public.fn_acorn_calendar_generate_event_instances(new_event_part record, old_event_part record) OWNER TO university;

--
-- Name: fn_acorn_calendar_is_date(character varying, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_calendar_is_date(s character varying, d timestamp without time zone) RETURNS timestamp without time zone
    LANGUAGE plpgsql
    AS $$
            
            begin

                if s is null then
                    return d;
                end if;
                perform s::timestamp without time zone;
                    return s;
                exception when others then
                    return d;
            
end;
            $$;


ALTER FUNCTION public.fn_acorn_calendar_is_date(s character varying, d timestamp without time zone) OWNER TO university;

--
-- Name: fn_acorn_calendar_lazy_create_event(character varying, uuid, character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_calendar_lazy_create_event(calendar_name character varying, owner_user_id uuid, type_name character varying, status_name character varying, event_name character varying) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
            declare
event_calendar_id uuid;
event_type_id uuid;
event_status_id  uuid;
            begin
            -- Lazy creates
            select into event_calendar_id id from acorn_calendar_calendars where name = calendar_name;
            if event_calendar_id is null then
                insert into acorn_calendar_calendars(name) values(calendar_name) returning id into event_calendar_id;
            end if;
        
            select into event_type_id id from acorn_calendar_event_types where name = type_name;
            if event_type_id is null then
                insert into acorn_calendar_event_types(name, calendar_id) values(type_name, event_calendar_id) returning id into event_type_id;
            end if;
        
            select into event_status_id id from acorn_calendar_event_statuses where name = status_name;
            if event_status_id is null then
                insert into acorn_calendar_event_statuses(name, calendar_id) values(status_name, event_calendar_id) returning id into event_status_id;
            end if;
        
            return public.fn_acorn_calendar_create_event(event_calendar_id, owner_user_id, event_type_id, event_status_id, event_name);
end;
            $$;


ALTER FUNCTION public.fn_acorn_calendar_lazy_create_event(calendar_name character varying, owner_user_id uuid, type_name character varying, status_name character varying, event_name character varying) OWNER TO university;

--
-- Name: fn_acorn_calendar_seed(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_calendar_seed() RETURNS void
    LANGUAGE plpgsql
    AS $$
            
            begin
            -- Default calendars, with hardcoded ids
            if not exists(select * from acorn_calendar_calendars where "id" = 'ceea8856-e4c8-11ef-8719-5f58c97885a2'::uuid) then
                insert into acorn_calendar_calendars(id, "name", "system") 
                    values('ceea8856-e4c8-11ef-8719-5f58c97885a2'::uuid, 'Default', true);
            end if;
            if not exists(select * from acorn_calendar_calendars where "id" = 'f3bc49bc-eac7-11ef-9e4a-1740a039dada'::uuid) then
                insert into acorn_calendar_calendars(id, "name", "system") 
                    values('f3bc49bc-eac7-11ef-9e4a-1740a039dada'::uuid, 'Activity Log', true);
            end if;

            -- System Statuses. Cannot be deleted
            if not exists(select * from acorn_calendar_event_statuses where "id" = '27446472-e4c9-11ef-bde0-9b663c96a619'::uuid) then
                insert into acorn_calendar_event_statuses(id, "name", "system") 
                    values('27446472-e4c9-11ef-bde0-9b663c96a619'::uuid, 'Normal', TRUE);
            end if;
            if not exists(select * from acorn_calendar_event_statuses where "id" = 'fb2392de-e62e-11ef-b202-5fe79ff1071f') then
                insert into acorn_calendar_event_statuses(id, "name", "system", "style") 
                    values('fb2392de-e62e-11ef-b202-5fe79ff1071f', 'Cancelled', TRUE, 'text-decoration:line-through;border:1px dotted #fff;');
            end if;
            if not exists(select * from acorn_calendar_event_statuses where "name" = 'Tentative') then
                insert into acorn_calendar_event_statuses("name", "system", "style") 
                    values('Tentative', TRUE, 'opacity:0.7;');
            end if;
            -- TODO: Does status "Conflict" make sense? Because maybe only 1 instance will conflict
            if not exists(select * from acorn_calendar_event_statuses where "name" = 'Conflict') then
                insert into acorn_calendar_event_statuses("name", "system", "style") 
                    values('Conflict', TRUE, 'border:1px solid red;background-color:#fff;color:#000;font-weight:bold;');
            end if;

            -- System Types. Cannot be deleted
            -- Types for each table in the activity log are lazy created
            if not exists(select * from acorn_calendar_event_types where "id" = '2f766546-e4c9-11ef-be8c-1f2daa98a10f'::uuid) then
                insert into acorn_calendar_event_types(id, "name", "system", "colour", "style") 
                    values('2f766546-e4c9-11ef-be8c-1f2daa98a10f'::uuid, 'Normal', TRUE, '#091386', 'color:#fff');
            end if;
            if not exists(select * from acorn_calendar_event_types where "name" = 'Meeting') then
                insert into acorn_calendar_event_types("name", "system", "colour", "style") 
                    values('Meeting', TRUE, '#C0392B', 'color:#fff');
            end if;

            -- Activity log statuses: TG_OP / Soft DELETE
            if not exists(select * from acorn_calendar_event_statuses where "id" = '7b432540-eac8-11ef-a9bc-434841a9f67b'::uuid) then
                insert into acorn_calendar_event_statuses(id, "name", "system", "style") 
                    values('7b432540-eac8-11ef-a9bc-434841a9f67b'::uuid, 'acorn.calendar::lang.models.general.insert', TRUE, 'color:#fff');
            end if;
            if not exists(select * from acorn_calendar_event_statuses where "id" = '7c18bb7e-eac8-11ef-b4f2-ffae3296f461'::uuid) then
                insert into acorn_calendar_event_statuses(id, "name", "system", "style") 
                    values('7c18bb7e-eac8-11ef-b4f2-ffae3296f461'::uuid, 'acorn.calendar::lang.models.general.update', TRUE, 'color:#fff');
            end if;
            -- Soft DELETE (Actually an UPDATE TG_OP)
            if not exists(select * from acorn_calendar_event_statuses where "id" = '7ceca4c0-eac8-11ef-b685-f7f3f278f676'::uuid) then
                insert into acorn_calendar_event_statuses(id, "name", "system", "style") 
                    values('7ceca4c0-eac8-11ef-b685-f7f3f278f676'::uuid, 'acorn.calendar::lang.models.general.soft_delete', TRUE, 'color:#fff');
            end if;
            if not exists(select * from acorn_calendar_event_statuses where "id" = 'f9690600-eac9-11ef-8002-5b2cbe0c12c0'::uuid) then
                insert into acorn_calendar_event_statuses(id, "name", "system", "style") 
                    values('f9690600-eac9-11ef-8002-5b2cbe0c12c0'::uuid, 'acorn.calendar::lang.models.general.soft_undelete', TRUE, 'color:#fff');
            end if;
end;
            $$;


ALTER FUNCTION public.fn_acorn_calendar_seed() OWNER TO university;

--
-- Name: fn_acorn_count(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_count() RETURNS integer
    LANGUAGE sql
    AS $$
	select 0;
$$;


ALTER FUNCTION public.fn_acorn_count() OWNER TO university;

--
-- Name: fn_acorn_count(double precision[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_count(VARIADIC ints double precision[]) RETURNS integer
    LANGUAGE sql
    AS $$
	-- Do not count the NULLs
	select array_length(array_remove(ints, NULL),1);
$$;


ALTER FUNCTION public.fn_acorn_count(VARIADIC ints double precision[]) OWNER TO university;

--
-- Name: fn_acorn_created_by_user_id(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_created_by_user_id() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
declare
begin
	-- On update of tables with updated_by_user_id
	-- DBAuth required
	-- Will return NULL if not regexp_like(CURRENT_USER, '^token_[0-9]+$')
	select u.id into new.created_by_user_id from acorn_dbauth_user u;
    return new;
end;
            
$_$;


ALTER FUNCTION public.fn_acorn_created_by_user_id() OWNER TO university;

--
-- Name: fn_acorn_enrollment_action_enrollments_add_cs_hi(uuid, uuid, uuid, boolean, uuid, uuid, uuid, integer, integer, double precision); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare 
	p_uuids uuid[];
	p_result character varying(1024);
begin
	-- Add all course hierarchies from the descendants of p_ancestor_hierarchy_id
	with inserted as (
		insert into acorn_enrollment_courses(
			enrollment_id, course_hierarchy_id, created_by_user_id
		) 
			select p_model_id, hi.id, p_user_id
			from acorn_university_hierarchies hi
			inner join acorn_university_courses cs on cs.entity_id = hi.entity_id
			inner join acorn_university_hierarchies hiA 
				on not array_position(hiA.nest_descendants, hi.id) is null
				or hiA.id = hi.id
			where hiA.id = p_ancestor_hierarchy_id
			on conflict do nothing
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	p_result := coalesce(array_upper(p_uuids, 1), 0) || ' Courses added';
		
	if p_define_entry_requirements then
		insert into acorn_enrollment_course_entry_requirements(
			enrollment_course_id, minimum_students, maximum_students, 
			required_interview_id, related_course_id, required_exam_id, minimum_score,
			created_by_user_id
		)
			select ec.id, p_minimum_students, p_maximum_students,
				p_required_interview_id, p_related_course_id, p_related_exam_id, p_minimum_entry_score,
				p_user_id
			from acorn_enrollment_courses ec
			inner join unnest(p_uuids) on ec.id = unnest;
		p_result := p_result || ' and entry requirements defined';
	end if;

	return p_result;
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision) IS 'labels:
  en: Add multiple courses
  ku: Gelek qursan lê zêde bike
  ar: إضافة دورات متعددة
comment:
  en: Add all courses available in an organisation. Plus optional entry settings
  ku: Hemû qursên berdest di rêxistinekê de lê zêde bike. Digel mîhengên têketinê yên bijarte
  ar: أضف جميع الدورات المتاحة في المؤسسة، بالإضافة إلى إعدادات إدخال اختيارية.
condition: not exists(select * from acorn_enrollment_students es where not es.proposed_desire_id is null and es.enrollment_id = acorn_enrollment_enrollments.id and not manual_proposed) and acorn_enrollment_enrollments.applied_at is null
result-action: refresh
fields:
  p_ancestor_hierarchy_id:
    type: dropdown
    placeholder: backend::lang.form.select
    required: true
    options: Acorn\University\Models\Hierarchy::dropdownOptions
  p_define_entry_requirements:
    comment: Settings below will be added to every course
  p_related_course_id:
    type: dropdown
    placeholder: backend::lang.form.select
    required: true
    options: Acorn\University\Models\Course::dropdownOptions
    span: storm
    css-class: col-xs-4
  p_related_exam_id:
    type: dropdown
    placeholder: backend::lang.form.select
    options: Acorn\Exam\Models\Exam::dropdownOptions
    span: storm
    css-class: col-xs-4
  p_required_interview_id:
    type: dropdown
    placeholder: backend::lang.form.select
    options: Acorn\Exam\Models\Interview::dropdownOptions
    span: storm
    css-class: col-xs-4
  p_minimum_students:
    span: storm
    css-class: col-xs-4 new-row
  p_maximum_students:
    span: storm
    css-class: col-xs-4
  p_minimum_entry_score:
    span: storm
    css-class: col-xs-4
';


--
-- Name: fn_acorn_enrollment_action_enrollments_add_st_hi(uuid, uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare 
	p_uuids uuid[];
	p_result character varying(1024);
begin
	-- Add all students in course hierarchies from the descendants of p_hierarchy_id
	with inserted as (
		insert into acorn_enrollment_students(
			enrollment_id, student_id, created_by_user_id
		) 
			select p_model_id, s.id, p_user_id
			from acorn_university_hierarchies hi
			inner join acorn_university_courses cs on cs.entity_id = hi.entity_id
			inner join acorn_user_user_group_version ugv on hi.user_group_version_id = ugv.user_group_version_id
			inner join acorn_university_students s on s.user_id = ugv.user_id
			inner join acorn_university_hierarchies hiA 
				on not array_position(hiA.nest_descendants, hi.id) is null
				or hiA.id = hi.id
			where hiA.id = p_hierarchy_id
			on conflict do nothing
			returning student_id
		)
		select array_agg(inserted.student_id) into p_uuids from inserted;
		
	p_result := coalesce(array_upper(p_uuids, 1), 0) || ' Students added';

	return p_result;

end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid) IS 'labels:
  en: Add multiple students
  ku: Çend xwendekaran lê zêde bike
  ar: إضافة عدة طلاب
comment:
  en: Add all students from any organisation or single course
  ku: Hemû xwendekarên ji her rêxistinekê an jî ji her qursekê lê zêde bike
  ar: أضف جميع الطلاب من أي منظمة أو دورة واحدة
condition: not exists(select * from acorn_enrollment_students es where not es.proposed_desire_id is null and es.enrollment_id = acorn_enrollment_enrollments.id and not manual_proposed) and acorn_enrollment_enrollments.applied_at is null
result-action: refresh
fields:
  p_hierarchy_id:
    type: dropdown
    options: Acorn\University\Models\Hierarchy::dropdownOptions';


--
-- Name: fn_acorn_enrollment_action_enrollments_apply(uuid, uuid, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare 
	p_uuids uuid[];
	p_result character varying(1024);
begin
	if p_confirm then
		-- Apply the proposed allocations
		-- The acorn_user_user_group_version trigger will update counts
		with inserted as (
			insert into acorn_user_user_group_version(user_id, user_group_version_id)
				select s.user_id, hi.user_group_version_id 
				from acorn_enrollment_students es
				inner join acorn_enrollment_course_entry_requirements cer on es.proposed_course_entry_requirements_id = cer.id
				inner join acorn_enrollment_courses ecs on cer.enrollment_course_id = ecs.id
				inner join acorn_university_hierarchies hi on ecs.course_hierarchy_id = hi.id
				inner join acorn_university_students s on es.student_id = s.id
				where es.enrollment_id = p_model_id
			-- Ignore students that are already enrolled on their course
			-- probably a manual action
			on conflict do nothing
			returning user_group_version_id
		)
		select array_agg(inserted.user_group_version_id) into p_uuids from inserted;

		-- Set enrollment as applied
		update public.acorn_enrollment_enrollments 
			set applied_at = now()
			where id = p_model_id;

		p_result := coalesce(array_upper(p_uuids, 1), 0) || ' Students added to courses';
	else
		p_result := 'Not confirmed';
	end if;

	return p_result;
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean) IS 'labels:
  en: Apply
  ku: Bikaranîn
  ar: يتقدم
result-action: refresh
comment:
  en: This will carry out the proposed allocations, adding students on to courses. This action cannot be reversed.
  ku: Ev ê dabeşkirinên pêşniyarkirî pêk bîne, xwendekaran li dersan zêde bike. Ev çalakî nayê vegerandin.
  ar: سيؤدي هذا إلى تنفيذ التخصيصات المقترحة، وإضافة الطلاب إلى المقررات الدراسية. لا يمكن التراجع عن هذا الإجراء.
condition: ''exists(select * from acorn_enrollment_students es where not es.proposed_desire_id is null and es.enrollment_id = acorn_enrollment_enrollments.id) and acorn_enrollment_enrollments.applied_at is null''';


--
-- Name: fn_acorn_enrollment_action_enrollments_reset(uuid, uuid, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_result character varying(1024);
begin
	if p_confirm then
		-- Remove all students and courses
		delete from public.acorn_enrollment_courses  where enrollment_id = p_model_id;
		if p_clear_manually_added_students then
			delete from public.acorn_enrollment_students where enrollment_id = p_model_id;
			p_result := 'All Students and courses removed';
		else
			delete from public.acorn_enrollment_students where enrollment_id = p_model_id and not manual_added;
			p_result := 'All bulk added Students and courses removed';
		end if;
	else
		p_result := 'Not confirmed';
	end if;

	return p_result;
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean) IS 'labels:
  en: Reset
  ku: Vegerandin
  ar: إعادة ضبط
comment:
  en: This will remove ALL students and courses from the enrollment
  ku: Ev ê HEMÛ xwendekar û qursan ji qeydkirinê derxîne
  ar: سيؤدي هذا إلى إزالة جميع الطلاب والدورات من التسجيل
condition: ''exists(select * from acorn_enrollment_students es where es.enrollment_id = acorn_enrollment_enrollments.id) and acorn_enrollment_enrollments.applied_at is null''';


--
-- Name: fn_acorn_enrollment_action_enrollments_rollback(uuid, uuid, boolean, boolean); Type: FUNCTION; Schema: public; Owner: sz
--

CREATE FUNCTION public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_result character varying(1024);
begin
	if p_confirm then
		if p_clear_manual_proposals then
			update acorn_enrollment_students es
				set proposed_desire_id = NULL,
				manual_proposed = false
				where es.enrollment_id = p_model_id;
			p_result := 'All Proposals cleared';
		else
			update acorn_enrollment_students es
				set proposed_desire_id = NULL
				where es.enrollment_id = p_model_id and not manual_proposed;
			p_result := 'Process run Proposals cleared';
		end if;
	else
		p_result := 'Not confirmed';
	end if;
	return p_result;
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean) OWNER TO sz;

--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean); Type: COMMENT; Schema: public; Owner: sz
--

COMMENT ON FUNCTION public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean) IS 'labels:
  en: Clear Proposals
  ku: Pêşniyarên Zelal
  ar: مقترحات واضحة
labels-plural:
  en: Clear Proposals
  ku: Pêşniyarên Zelal
  ar: مقترحات واضحة
';


--
-- Name: fn_acorn_enrollment_action_enrollments_run(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_result character varying(1024);
begin
	select case
		when strategy_function = 'all'          then fn_acorn_enrollment_all(p_model_id, p_user_id)
		when strategy_function = 'score_first'  then fn_acorn_enrollment_score_first(p_model_id, p_user_id)
		when strategy_function = 'desire_first' then fn_acorn_enrollment_desire_first(p_model_id, p_user_id)
	end into p_result
		from acorn_enrollment_enrollments
		where id = p_model_id;
		
	return p_result;
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid) IS 'labels:
  en: Generate proposals
  ku: Pêşniyaran çêbikin
  ar: إنشاء المقترحات
commentHtml: true
comment:
  en: This will apply all rules and create allocation proposals for all added students. No actual changes will happen until the proposals are <b>Applied</b>
  ku: Ev ê hemû rêzikan bicîh bîne û ji bo hemû xwendekarên zêdekirî pêşniyarên dabeşkirinê biafirîne. Heta ku pêşniyar neyên <b>Bikaranîn</b>, ti guhertinên rastîn çênabin.
  ar: سيؤدي هذا إلى تطبيق جميع القواعد وإنشاء مقترحات توزيع لجميع الطلاب المضافين. لن تُجرى أي تغييرات فعلية حتى يتم تطبيق المقترحات.
result-action: refresh
condition: ''not exists(select * from acorn_enrollment_students es where not es.proposed_desire_id is null and not manual_proposed and es.enrollment_id = acorn_enrollment_enrollments.id) and acorn_enrollment_enrollments.applied_at is null''';


--
-- Name: fn_acorn_enrollment_all(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_all(p_enrollment_id uuid, p_user_id uuid) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_record record;
	p_count int := 0;
begin
	-- TODO: Assign to their first desire
	-- Assign all students to the first entity
	for p_record in select es.id, es.enrollment_id, es.student_id
		from acorn_enrollment_students es 
		where es.enrollment_id = p_enrollment_id
		and   es.proposed_desire_id is null
	loop
		update acorn_enrollment_students es
			set proposed_desire_id = (
				select ed.id
				from acorn_enrollment_desires ed
				where ed.enrollment_student_id = es.id
				limit 1
			), 
			manual_proposed = false
		where es.id = p_record.id;
		
		p_count := p_count + 1;
	end loop;

	return p_count::text || ' Students allocated with [all] process';
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_all(p_enrollment_id uuid, p_user_id uuid) OWNER TO university;

--
-- Name: fn_acorn_enrollment_desire_first(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_desire_first(p_enrollment_id uuid, p_user_id uuid) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_record record;
	p_count int := 0;
begin
	-- TODO: Assign to their first desire
	-- Assign all students to the first entity
	for p_record in select es.id, es.student_id
		from acorn_enrollment_students es 
		where es.enrollment_id = p_enrollment_id
	loop
		p_count := p_count + 1;
	end loop;

	return p_count::text || ' Students allocated with [Desire First] process';
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_desire_first(p_enrollment_id uuid, p_user_id uuid) OWNER TO university;

--
-- Name: fn_acorn_enrollment_desires_ordinal(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_desires_ordinal() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	if new.sort_order is null then
		select coalesce(max(sort_order), 0) + 1 into new.sort_order 
			from acorn_mofadala_desires ds
			where ds.academic_year_id = new.academic_year_id
			and   ds.student_id       = new.student_id;
	end if;
	return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_enrollment_desires_ordinal() OWNER TO university;

--
-- Name: fn_acorn_enrollment_enrollments_state_indicator(record); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record) RETURNS character varying[]
    LANGUAGE plpgsql
    AS $$
declare
	state_indicator character varying[];
begin
	-- BEFORE update or insert
	-- Set the state_indicator for the row
	case
		when not p_enrollment.applied_at is null 
			then state_indicator = '{applied, complete}'; 
		when exists(select * from acorn_enrollment_students where enrollment_id = p_enrollment.id and not proposed_desire_id is null)
			then state_indicator = '{ran_not_applied, step-2}'; 
		when exists(select * from acorn_enrollment_students where enrollment_id = p_enrollment.id)
			then state_indicator = '{content_not_run, step-1}'; 
		else state_indicator = '{new, step-0}';
	end case;
	
	return state_indicator;
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record) OWNER TO university;

--
-- Name: fn_acorn_enrollment_score_first(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_enrollment_score_first(p_enrollment_id uuid, p_user_id uuid) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_run_id uuid;
	p_record record;
	p_count int;
	p_count_failed_courses int;
begin
	-- Make a new run for marking things
	insert into acorn_enrollment_runs(enrollment_id, created_by_user_id)
		values(p_enrollment_id, p_user_id)
		returning id into p_run_id;

	-- Main loop for repeating the process
	-- when things have been changed
	-- like under minimum failed courses
	loop
		p_count := 0;
		p_count_failed_courses := coalesce((select count(*)
			from acorn_enrollment_courses ec
			where enrollment_id = p_enrollment_id and failed_below_minimum
		), 0);

		-- Main ordered student desire loop
		-- allocating as we go
		for p_record in select 
				es.id as enrollment_student_id, 
				es.student_id, 
				ed.id as desire_id, 
				xr.result
			from acorn_enrollment_students es 
			inner join acorn_enrollment_enrollments e on es.enrollment_id = e.id
			inner join acorn_exam_results xr 
				on  xr.calculation_id = e.calculation_id
				and xr.student_id = es.student_id
				and (e.calculation_academic_year_id is null or xr.academic_year_id = e.calculation_academic_year_id)
				and (e.calculation_course_id        is null or xr.course_id        = e.calculation_course_id)
				and (e.calculation_exam_id          is null or xr.exam_id          = e.calculation_exam_id)
			inner join acorn_enrollment_desires ed on ed.enrollment_student_id = es.id
			where es.enrollment_id = p_enrollment_id
			-- Incremental
			and   es.proposed_desire_id is null
			and   not es.manual_proposed
			-- Score first, desire priority 2nd
			order by xr.result desc, es.id, ed.sort_order desc
		loop
			-- Assign student
			update acorn_enrollment_students es
				set proposed_desire_id = (
					select ed.id
					from acorn_enrollment_desires ed
					where ed.enrollment_student_id = es.id
					limit 1
				), 
				proposal_run_id = p_run_id
				where es.id = p_record.enrollment_student_id;		
			p_count := p_count + 1;
		end loop;

		-- TODO: Fail under minimum courses
		update acorn_enrollment_courses ec
			set failed_below_minimum = true
			where coalesce((
				select count(*) 
				from acorn_enrollment_students es
				inner join acorn_enrollment_course_entry_requirements cer on es.proposed_desire_id = cer.id
				where cer.enrollment_course_id = ec.id
			), 0) < coalesce((
				select sum(minimum_students) 
				from acorn_enrollment_course_entry_requirements cer
				where cer.enrollment_course_id = ec.id
			), 0)
			and enrollment_id = p_enrollment_id;

		-- If no new departments have been failed 
		-- then we finish
		exit when coalesce((select count(*)
			from acorn_enrollment_courses ec
			where failed_below_minimum), 0) = p_count_failed_courses;

		-- Tidy up, because we will run again
		update acorn_enrollment_students
			set proposed_desire_id = NULL,
				proposal_run_id = NULL
			where proposal_run_id = p_run_id;
	end loop;

	-- Mark run complete
	update acorn_enrollment_runs
		set completed_at = now()
		where id = p_run_id;
		
	return p_count::text || ' Students allocated with [Score First] process, ' || p_count_failed_courses::text || ' Courses failed';
end;
$$;


ALTER FUNCTION public.fn_acorn_enrollment_score_first(p_enrollment_id uuid, p_user_id uuid) OWNER TO university;

--
-- Name: fn_acorn_exam_action_results_refresh(uuid, uuid, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_action_results_refresh(p_student_id uuid DEFAULT NULL::uuid, p_academic_year_id uuid DEFAULT NULL::uuid, p_messages boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	-- Delete rows first
	if not p_student_id is null and not p_academic_year_id is null then
		delete from acorn_exam_result_internal2s where student_id = p_student_id and academic_year_id = p_academic_year_id;
	elsif not p_student_id is null then
		delete from acorn_exam_result_internal2s where student_id = p_student_id;
	elsif not p_academic_year_id is null then
		delete from acorn_exam_result_internal2s where academic_year_id = p_academic_year_id;
	else 
		truncate acorn_exam_result_internal2s;
	end if;
	
	insert into acorn_exam_result_internal2s(name, student_id, academic_year_id, exam_id, course_material_id, course_id, material_id, calculation_id, calculation_type_id, calculation_type_name, project_id, interview_id, expression, minimum, maximum, required, expression_type, needs_evaluate, resolved_expression, result, explanation)
		 SELECT 
		    et.name,
		    et.student_id,
		    et.academic_year_id,
		    et.exam_id,
		    et.course_material_id,
		    et.course_id,
		    et.material_id,
		    et.calculation_id,
		    ct.id AS calculation_type_id,
		    ct.name AS calculation_type_name,
		    et.project_id,
		    et.interview_id,
		    et.expression,
		    et.minimum,
		    et.maximum,
		    et.required,
		    et.expression_type,
		    et.needs_evaluate,
		    fn_acorn_exam_tokenize(et.expression::character varying, 0, p_messages) AS resolved_expression,
		    fn_acorn_exam_eval(fn_acorn_exam_tokenize(et.expression::character varying), 0, p_messages) AS result,
			fn_acorn_exam_explain(et.expression) as explanation
		   FROM acorn_exam_token2s et
			 inner join acorn_university_academic_years ays on et.academic_year_id = ays.id
		     LEFT JOIN acorn_exam_calculations c ON et.calculation_id = c.id
		     LEFT JOIN acorn_exam_calculation_types ct ON c.calculation_type_id = ct.id
		where (et.student_id = p_student_id or p_student_id is NULL)
		and   (et.academic_year_id = p_academic_year_id or (p_academic_year_id is NULL and ays.enabled));
end;
$$;


ALTER FUNCTION public.fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean) IS 'labels:
  en: Refresh all results
  ku: Hemû encaman nûve bike
  ar: تحديث جميع النتائج
type: list';


--
-- Name: fn_acorn_exam_concat_strict(anyarray); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_concat_strict(VARIADIC p_args anyarray) RETURNS text
    LANGUAGE plpgsql
    AS $$
begin
	if not array_position(p_args, NULL) is null then
		return NULL;
	end if;
	return concat(VARIADIC p_args);
end;
$$;


ALTER FUNCTION public.fn_acorn_exam_concat_strict(VARIADIC p_args anyarray) OWNER TO university;

--
-- Name: fn_acorn_exam_eval(character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: sz
--

CREATE FUNCTION public.fn_acorn_exam_eval(p_expr character varying, p_level integer DEFAULT 0, p_messages boolean DEFAULT false) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
declare
	p_regexp_matches character varying[];
	p_result double precision;
begin
	-- Run the eval
	if trim(p_expr) = '' then
		if p_messages then raise notice '  %: Expression is NULL', p_level; end if;
		p_result := NULL;
	elsif array_length(regexp_match(p_expr, '^[0-9.-]+$'), 1) != 0 then
		if p_messages then raise notice '  %: Expression is numeric(%)', p_level, p_expr; end if;
		p_result := p_expr::double precision;
	else
		if p_messages then raise notice '  %: Evaluating(%)', p_level, p_expr; end if;
	
		-- Namespace our spreadsheet functions to acorn
		p_regexp_matches := regexp_match(p_expr, '([a-zA-Z]+)\(');
		if array_length(p_regexp_matches, 1) != 0 then
			if p_messages then raise notice '  %: Morphing % functions() => fn_acorn_*() namespace', p_level, array_length(p_regexp_matches, 1); end if;
			p_expr := regexp_replace(p_expr, '([a-zA-Z]+)\(', 'fn_acorn_\1(', 'g');
		end if;
	
		execute concat('select ', p_expr) into p_result;
	end if;

	return p_result;
end;
$_$;


ALTER FUNCTION public.fn_acorn_exam_eval(p_expr character varying, p_level integer, p_messages boolean) OWNER TO sz;

--
-- Name: fn_acorn_exam_explain(character varying, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_explain(p_expr character varying, p_messages boolean DEFAULT false) RETURNS character varying[]
    LANGUAGE plpgsql
    AS $$
declare
	p_sub_expression character varying(4096);
	p_token_record record;
	p_regexp_matches character varying(1024)[];
	p_passed boolean;
	p_passed_string character varying(1024);
	p_algorithm_name_position int;
	p_parts character varying(1024)[];
	p_explanations character varying(1024)[];
begin
	-- Expression explanation(s)
	if p_messages then raise notice 'Expression: %', p_expr; end if;
	for p_token_record in select regexp_matches[1] as "match"
		from regexp_matches(p_expr, '(:\?[^:]+:)', 'g')
	loop
		p_sub_expression := p_token_record.match;
		select array_agg(regexp_matches) into p_parts from regexp_matches(p_sub_expression, '[^/:]+', 'g');
		if p_messages then raise notice 'Sub-Expression: %', p_sub_expression; end if;

		-- Evaluate this sub-level to a boolean
		p_passed := fn_acorn_exam_eval(
			fn_acorn_exam_tokenize(p_sub_expression, 0, p_messages)
		);
		if p_messages then raise notice '  => %', p_passed; end if;

		p_passed_string := case 
				when p_passed is null then 'NULL' 
				when p_passed then 'Passed' 
				else 'Failed' 
			end;
			
		p_algorithm_name_position := case
			when p_parts[1][1] = '?course' then 6
			when p_parts[1][1] = '?calculation' then 4
		end case;
		
		p_explanations := array_append(p_explanations, p_passed_string || ': ' || p_parts[p_algorithm_name_position][1]);
	end loop;

	return p_explanations;
end;
$$;


ALTER FUNCTION public.fn_acorn_exam_explain(p_expr character varying, p_messages boolean) OWNER TO university;

--
-- Name: fn_acorn_exam_scores_log(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_scores_log() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
declare
	p_new_score double precision;
	p_student_id uuid;
	p_exam_material_id uuid;
begin
	-- Runs after insert, update & delete
	-- student_id & exam_material_id are assumed they cannot change
	-- NOTE: This will make an event for every hierarchy parent (school) 
	-- in the case that the course appears under many parents with the student in
	p_new_score        := new.score;
	p_student_id       := case when not old.student_id       is null then old.student_id       else new.student_id end;
	p_exam_material_id := case when not old.exam_material_id is null then old.exam_material_id else new.exam_material_id end;

	insert into system_event_logs(level, message, details, created_at)
		select 'info', 'Exam score ' || TG_OP,

			-- JSON
			to_json(ARRAY[
				'Student:'  || su.name || ' ' || su.surname || '(' || s.id || ')',
				'Score:'    || coalesce(old.score::text, '-') || '=>' || coalesce(new.score::text, '-') || '(' || coalesce(old.id, new.id) || ')',
				'Material:' || m.name || '(' || m.id || ')',
				'Course:'   || ugs_c.name|| '(' || c.id || ',' || coalesce(ugs_p.name, '<no course parent>') || ')',
				'User:'     || current_user || '(' || coalesce(bk.login, '<not token backend user>') || ', ' || coalesce(ugs_g.name, '<no entity restriction>') || ')',
				'Action:'   || TG_OP
			]),
			now()
		from acorn_university_students s
		inner join acorn_user_users su on su.id = s.user_id,
		
		acorn_exam_exam_materials em
		inner join acorn_university_course_materials cm on em.course_material_id = cm.id
		inner join acorn_university_materials m on cm.material_id = m.id
		inner join acorn_university_course_year_semesters cys on cys.id = cm.course_year_semester_id
		inner join acorn_university_academic_year_semesters ays on ays.id = cys.academic_year_semester_id

		inner join acorn_university_courses c on cys.course_id = c.id
		inner join acorn_university_entities en_c on en_c.id = c.entity_id
		inner join acorn_user_user_groups ugs_c on en_c.user_group_id = ugs_c.id

		-- Hierarchies (needs to include user_group_version of the student)
		-- A course can appear in many places for same year
		left join acorn_university_hierarchies hi on hi.entity_id = en_c.id and hi.academic_year_id = ays.academic_year_id
		left join acorn_user_user_group_version ugv_p on hi.user_group_version_id = ugv_p.user_group_version_id
		left join acorn_university_students s2 on ugv_p.user_id = s2.user_id
		left join acorn_university_hierarchies hi_p on hi.parent_id = hi_p.id
		left join acorn_university_entities en_p on hi_p.entity_id = en_p.id
		left join acorn_user_user_groups ugs_p on ugs_p.id = en_p.user_group_id

		-- DBAuth systems only: token_<bk.id>
		-- We LEFT JOIN because it may not be relevant
		left join backend_users bk on bk.id = case 
			-- token_* logins
			when regexp_like(current_user, '^token_[0-9]+$') then regexp_replace(current_user, '^token_', '')::int
			-- Direct users
			else NULL::int
		end
		left join acorn_user_users u on u.id = bk.acorn_user_user_id
		left join acorn_university_entities en_g on en_g.id = u.global_scope_entity_id
		left join acorn_user_user_groups ugs_g on ugs_g.id = en_g.user_group_id
		
		where s.id  = p_student_id
		and   s2.id = p_student_id
		and   em.id = p_exam_material_id;
	
	return new;
end;
            
$_$;


ALTER FUNCTION public.fn_acorn_exam_scores_log() OWNER TO university;

--
-- Name: fn_acorn_exam_token_name(character varying[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_token_name(VARIADIC p_titles character varying[]) RETURNS character varying
    LANGUAGE sql
    AS $$
select fn_acorn_exam_token_name_internal(p_titles);
$$;


ALTER FUNCTION public.fn_acorn_exam_token_name(VARIADIC p_titles character varying[]) OWNER TO university;

--
-- Name: fn_acorn_exam_token_name(uuid, character varying[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_token_name(p_id uuid, VARIADIC p_titles character varying[]) RETURNS character varying
    LANGUAGE sql
    AS $$
select fn_acorn_exam_token_name_internal(array_prepend(p_id::character varying, p_titles));
$$;


ALTER FUNCTION public.fn_acorn_exam_token_name(p_id uuid, VARIADIC p_titles character varying[]) OWNER TO university;

--
-- Name: fn_acorn_exam_token_name_internal(character varying[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_token_name_internal(p_titles character varying[]) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	token character varying = '';
	record record;
begin
	for record in select unnest as title from unnest(p_titles) loop
		if not record.title is null and length(record.title) > 0 then
			if length(token) > 0 then token := token || '/'; end if;
			-- Before we used:
			--   fn_acorn_exam_token_name_internal()
			--   => regexp_replace(lower(p_title), '[^a-z0-9.]+', '-', 'g');
			-- now we use raw names, + / delimeters
			-- TODO: In future we should replace :/ with &#<x>; or something
			token := token || record.title;
		end if;
	end loop;

	return token;
end;
$$;


ALTER FUNCTION public.fn_acorn_exam_token_name_internal(p_titles character varying[]) OWNER TO university;

--
-- Name: fn_acorn_exam_tokenize(character varying, integer, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_exam_tokenize(p_expr character varying, p_level integer DEFAULT 0, p_messages boolean DEFAULT false) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$
declare
	p_etype character varying(1024);
	p_sub_expression character varying(4096);
	p_token_record record;
	p_regexp_matches character varying(1024)[];
	p_passed boolean;
	p_default character varying(1024);
	p_results character varying(1024)[];
	p_results_string character varying;
	p_level_string character varying(1024);
	p_num_results int;
	p_num_results_removed int;

	-- Elements
	p_student_number character varying(1024);
	p_academic_year  character varying(1024);
	p_course         character varying(1024);
	p_course_type    character varying(1024);
	p_material       character varying(1024);
	p_material_type  character varying(1024);
	p_exam           character varying(1024);
	p_exam_type      character varying(1024);
	p_algorithm      character varying(1024);
	p_algorithm_type character varying(1024);
	p_attribute      character varying(1024);
	p_check          character varying(1024);
	p_project        character varying(1024);
	p_interview      character varying(1024);
	p_required       boolean;
begin
	-- Expression analysis
	-- Expressions are essentially a different, text based, recursive way to refer to data in the database
	-- like Microsoft Excel names and data cells
	--
	-- Matches are case sensitive
	-- TODO: Characters :/ in names are escaped to &#<x>;
	-- .* indicates any
	-- :etype/student_number/year/.* stub is always required
	p_level_string = repeat(' ', 4 * p_level);
	if p_messages then raise notice '% %: Expression: %', p_level_string, p_level, p_expr; end if;
	for p_token_record in select 
			regexp_matches[1] as "match", 
			regexp_matches[2] as passed,
			regexp_matches[3] as etype,
			regexp_matches[4] as student_number,
			regexp_matches[5] as academic_year,
			regexp_matches[6] as sub_expression,
			-- 7 is the full default match with the equals =
			regexp_matches[8] as "default"
		from regexp_matches(p_expr, '(:(\??)([^/]+)/([^/]+)/([^/]+)/([^:=]+)(=([^:]+))?:)', 'g')
	loop
		p_etype          := p_token_record.etype;
		p_sub_expression := p_token_record.sub_expression;
		p_passed         := (p_token_record.passed = '?'); -- Always capture group
		p_student_number := p_token_record.student_number;
		p_academic_year  := p_token_record.academic_year;
		p_default        := case   -- Always capture group
			when p_token_record.default = '' then NULL 
			else p_token_record.default 
		end;
		if p_messages then raise notice '% %: Sub-Expression: %?%/%/%...=%', p_level_string, p_level, p_passed, p_etype, p_student_number, p_academic_year, p_default; end if;
		p_results := '{}';
		
		case
			when p_etype = 'student' then
				-- ########################################################## Student data point
				-- Example: :student/<student>/<year>/age|something[/value_to_compare]:
				-- 1 result
				p_regexp_matches := regexp_matches(p_sub_expression, '([^/]+)(/([^/]+))?');
				p_attribute      := p_regexp_matches[1];
				p_check          := p_regexp_matches[3]; -- Optional, can be NULL
				if p_messages then raise notice '% %: Student data point(Data:%, Check:%)', p_level_string, p_level, p_attribute, p_check; end if;
				case
					when p_attribute = 'age' then
					    select array_agg(EXTRACT(year FROM age(ay.start, u.birth_date))) into p_results 
					     FROM acorn_university_students s
						 JOIN acorn_user_users u ON s.user_id = u.id,
						 acorn_university_academic_years ay
						where (p_student_number = '.*' or s.number = p_student_number::integer)
						  and (ay.name  = p_academic_year  or p_academic_year = '.*');
					when p_attribute = 'locale' then
						-- :student/345/2023-2024/locale/ku: => 1|0
						-- p_check required
						-- returns 1 if check compares, 0 otherwise
						-- Default still dictates the result if there is no student locale
					    select array_agg((l.locale = p_check)::int) into p_results 
					     FROM acorn_university_students s
						 JOIN acorn_user_users u ON s.user_id = u.id
						 LEFT JOIN acorn_user_user_languages ul on ul.user_id = u.id and ul.current
						 LEFT JOIN acorn_user_languages l on ul.language_id = l.id
						where (p_student_number = '.*' or s.number = p_student_number::integer);
					when p_attribute = 'type' then
						-- :student/345/2023-2024/type/regular: => 1|0
						-- p_check required
						-- returns 1 if check compares, 0 otherwise
						-- Default still dictates the result if there is no student locale
					    select array_agg((s.legacy_import_student_type = p_check)::int) into p_results 
					     FROM acorn_university_students s
						where (p_student_number = '.*' or s.number = p_student_number::integer);
					else 
						NULL;
				end case;
			when p_etype = 'score' then
				-- ########################################################## Score data point
				-- Current materials result from exam scores: avg(:score/<student>/<year>/<course>/<material>/<material-type>/<exam>/<exam-type>:)
				-- 0, 1 or multiple results
				-- passed is not relevant
				-- score is NOT NULL
				-- default is only relevant if there are no scores at all
				p_regexp_matches := regexp_matches(p_sub_expression, '([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)');
				p_course         := p_regexp_matches[1];
				p_material       := p_regexp_matches[2];
				p_material_type  := p_regexp_matches[3];
				p_exam           := p_regexp_matches[4];
				p_exam_type      := p_regexp_matches[5];
				if p_messages then raise notice '% %: Score data point(Course:%, Material:%(%), Exam:%(%))', p_level_string, p_level, p_course, p_material, p_material_type, p_exam, p_exam_type; end if;
				
				select array_agg(score) into p_results -- score NOT NULL
				   FROM acorn_exam_scores sc
					  JOIN acorn_university_students s ON sc.student_id = s.id
					  JOIN acorn_exam_exam_materials em ON sc.exam_material_id = em.id
					  JOIN acorn_exam_exams e ON em.exam_id = e.id
					  JOIN acorn_exam_types et ON e.type_id = et.id
					  JOIN acorn_university_course_materials cm ON em.course_material_id = cm.id
					  JOIN acorn_university_course_year_semesters cys ON cm.course_year_semester_id = cys.id
					  JOIN acorn_university_academic_year_semesters ays ON cys.academic_year_semester_id = ays.id
					  JOIN acorn_university_academic_years ay ON ay.id = ays.academic_year_id
					  JOIN acorn_university_courses c ON cys.course_id = c.id
					  JOIN acorn_university_entities en ON c.entity_id = en.id
					  JOIN acorn_user_user_groups ugs ON en.user_group_id = ugs.id
					  JOIN acorn_university_materials m ON cm.material_id = m.id
					  JOIN acorn_university_material_types mt ON m.material_type_id = mt.id
					WHERE
						    (p_student_number = '.*' or s.number = p_student_number::integer)
						and (ay.name  = p_academic_year or p_academic_year = '.*')
						and (ugs.name = p_course        or p_course = '.*')
						and (m.name   = p_material      or p_material = '.*')
						and (mt.name  = p_material_type or p_material_type = '.*')
						and (e.name   = p_exam          or p_exam = '.*')
						and (et.name  = p_exam_type     or p_exam_type = '.*');
			when p_etype = 'project' then
				-- ########################################################## Project data point
				-- Current materials result from exam scores: avg(:project/<student>/<year>/<project>:)
				-- 0, 1 or multiple results
				-- score is NOT NULL
				-- default is only relevant if there are no scores at all
				p_regexp_matches := regexp_matches(p_sub_expression, '([^/]+)');
				p_project        := p_regexp_matches[1];
				if p_messages then raise notice '% %: Project data point(Project:%)', p_level_string, p_level, p_project; end if;
				
				select array_agg(
					case 
						when p_passed then
							-- (result between min and max)::int => 0|1
							-- Any NULLs lead to NULL
							-- NULL triggers the default
							fn_acorn_exam_concat_strict('('::text, p.score::text, ' between '::text, pr.minimum::text, ' and '::text, pr.maximum::text, ')::int'::text)
						else
							p.score::character varying
					end) into p_results -- score NOT NULL
				   FROM acorn_university_project_students p
				     JOIN acorn_university_projects pr ON p.project_id = pr.id
				     JOIN acorn_university_students s ON p.owner_student_id = s.id
					WHERE
						    (p_student_number = '.*' or s.number = p_student_number::integer)
						and (ay.name  = p_academic_year  or p_academic_year = '.*')
						and (p.name   = p_project        or p_project = '.*')
						and (pr.required or not p_required);
			when p_etype = 'interview' then
				-- ########################################################## Interview data point
				-- Current materials result from exam scores: avg(:interview/<student>/<year>/<interview>:)
				-- 0, 1 or multiple results
				-- score is NOT NULL
				-- default is only relevant if there are no scores at all
				p_regexp_matches := regexp_matches(p_sub_expression, '([^/]+)');
				p_interview      := p_regexp_matches[1];
				if p_messages then raise notice '% %: Interview data point(Project:%)', p_level_string, p_level, p_interview; end if;
				
				select array_agg(
					case 
						when p_passed then
							-- (result between min and max)::int => 0|1
							-- Any NULLs lead to NULL
							fn_acorn_exam_concat_strict('('::text, iss.score::text, ' between '::text, i.minimum::text, ' and '::text, i.maximum::text, ')::int'::text)
						else
							iss.score::character varying
					end) into p_results -- score NOT NULL
				   FROM acorn_exam_interview_students iss
				     JOIN acorn_university_students s ON iss.student_id = s.id
				     JOIN acorn_exam_interviews i ON iss.interview_id = i.id
					WHERE
						    (p_student_number = '.*' or s.number = p_student_number::integer)
						and (ay.name  = p_academic_year  or p_academic_year = '.*')
						and (i.name   = p_interview      or p_interview = '.*')
						and (i.required or not p_required);
			when p_etype = 'material' then
				-- ########################################################## Material result from child exams
				-- Current course result from materials: avg(:material/<student>/<year>/<course>/.*/material/.*/score/(required)?/?result:)
				-- default replaces individual default values, for example, in the case of passed but minimum is NULL
				-- AND if there are no results at all
				p_regexp_matches := regexp_matches(p_sub_expression, '([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)/(required)?/?result');
				p_course         := p_regexp_matches[1];
				p_course_type    := p_regexp_matches[2];
				p_material       := p_regexp_matches[3];
				p_material_type  := p_regexp_matches[4];
				p_algorithm      := p_regexp_matches[5];
				p_algorithm_type := p_regexp_matches[6];
				p_required       := (not p_regexp_matches[7] is null); -- Optional capture group (NULL if not present)
				if p_messages then raise notice '% %: Material result(Course:%(%), Material:%(%), Algorithm:%(%), Required:%)', p_level_string, p_level, p_course, p_course_type, p_material, p_material_type, p_algorithm, p_algorithm_type, p_required; end if;

				-- array_agg will collect NULLs
				select array_agg(
					coalesce(
						case
					    	when p_passed then
								-- Any NULLs lead to NULL
								-- (result between min and max)::int => 0|1
								fn_acorn_exam_concat_strict('('::text,
								fn_acorn_exam_tokenize(
									replace(replace(replace(replace(replace(replace(
											coalesce(camt.expression, cacm.expression), 
										'<course>',        ugs.name), 
										'<course-type>',   ct.name), 
										'<material>',      m.name), 
										'<material-type>', mt.name), 
										'<year>',          ay.name), 
										'<student>',       s.number::text),
								p_level+1, p_messages)::text, ' between '::text, cm.minimum::text, ' and '::text, cm.maximum::text, ')::int'::text)
							else fn_acorn_exam_tokenize(
								replace(replace(replace(replace(replace(replace(
										coalesce(camt.expression, cacm.expression), 
									'<course>',        ugs.name), 
									'<course-type>',   ct.name), 
									'<material>',      m.name), 
									'<material-type>', mt.name), 
									'<year>',          ay.name), 
									'<student>',       s.number::text),
								p_level+1, p_messages)
						end,
						p_default) -- NULL if not set
					) into p_results
				   FROM acorn_university_course_materials cm
					 JOIN acorn_university_course_year_semesters cys ON cm.course_year_semester_id = cys.id
				     JOIN acorn_university_academic_year_semesters ays ON cys.academic_year_semester_id = ays.id
				     JOIN acorn_university_academic_years ay ON ay.id = ays.academic_year_id
				     JOIN acorn_university_courses c ON cys.course_id = c.id
				     JOIN acorn_university_course_types ct on c.course_type_id = ct.id
				     JOIN acorn_university_entities en ON c.entity_id = en.id
				     JOIN acorn_university_hierarchies hi ON hi.entity_id = en.id AND hi.academic_year_id = ay.id
				     JOIN acorn_user_user_group_versions ugv ON hi.user_group_version_id = ugv.id
				     JOIN acorn_user_user_groups ugs ON ugv.user_group_id = ugs.id
				     JOIN acorn_user_user_group_version ug ON ugv.id = ug.user_group_version_id
				     JOIN acorn_university_students s ON ug.user_id = s.user_id
				     JOIN acorn_university_materials m ON cm.material_id = m.id
				     JOIN acorn_university_material_types mt ON m.material_type_id = mt.id

					 -- 2 Failover alternative expression settings
				     LEFT JOIN acorn_exam_calculation_material_types cmt ON mt.id = cmt.material_type_id AND cmt.academic_year_id = ays.academic_year_id
				     LEFT JOIN acorn_exam_calculations camt ON cmt.calculation_id = camt.id
				     LEFT JOIN acorn_exam_calculation_types ectmt ON camt.calculation_type_id = ectmt.id
     
					 LEFT JOIN acorn_exam_calculation_course_materials ccm ON ccm.course_material_id = cm.id AND ccm.academic_year_id = ays.academic_year_id
				     LEFT JOIN acorn_exam_calculations cacm ON ccm.calculation_id = cacm.id
				     LEFT JOIN acorn_exam_calculation_types ectcm ON cacm.calculation_type_id = ectcm.id
					WHERE   (p_student_number  = '.*' or s.number = p_student_number::integer)
						and (ay.name   = p_academic_year  or p_academic_year = '.*')
						and (ugs.name  = p_course         or p_course = '.*')
						and (ct.name   = p_course_type    or p_course_type = '.*')
						and (m.name    = p_material       or p_material = '.*')
						and (  mt.name = p_material_type  
							or p_material_type = '.*'
							-- TODO: Expensive, maybe require a leading !?
							-- TODO: Also great risk of accidental matches without ^...$
							-- string, pattern
							-- For example: (material|language)
							or regexp_like(mt.name, p_material_type) 
						)
						and (coalesce(camt.name, cacm.name)   = p_algorithm      or p_algorithm = '.*')
						and (coalesce(ectmt.name, ectcm.name) = p_algorithm_type or p_algorithm_type = '.*')
						and (cm.required or not p_required)
						and not (camt.expression is null and cacm.expression is null);
			when p_etype = 'course' then
				-- ########################################################## Course result from child materials
				-- Current bakeloria result from courses: avg(:course/<student>/<year>/course/course_type/.*/score/(required)/result:)
				-- default replaces individual default values, for example, in the case of passed but minimum is NULL
				-- AND if there are no results at all
				p_regexp_matches := regexp_matches(p_sub_expression, '([^/]+)/([^/]+)/([^/]+)/([^/]+)/(required)?/?result');
				p_course         := p_regexp_matches[1];
				p_course_type    := p_regexp_matches[2];
				p_algorithm      := p_regexp_matches[3];
				p_algorithm_type := p_regexp_matches[4];
				p_required       := (not p_regexp_matches[5] is null); -- Optional capture group (NULL if not present)
				if p_messages then raise notice '% %: Course result(Course:%(%), Algorithm:%(%), Required:%)', p_level_string, p_level, p_course, p_course_type, p_algorithm, p_algorithm_type, p_required; end if;

				-- array_agg will collect NULLs
				select array_agg(
					coalesce(
						case
					    	when p_passed then
								-- (result between min and max)::int => 0|1
								-- Any NULLs lead to NULL
								fn_acorn_exam_concat_strict('('::text,
								fn_acorn_exam_tokenize(
									replace(replace(replace(replace(
											coalesce(cac.expression, cact.expression), 
										'<course>',  ugs.name), 
										'<course-type>',  ct.name), 
										'<year>',    ay.name), 
										'<student>', s.number::text),
								p_level+1, p_messages)::text, ' between '::text, 
								coalesce(cys.minimum, cac.minimum, cact.minimum)::text, ' and '::text, 
								coalesce(cys.maximum, cac.maximum, cact.maximum)::text, ')::int'::text)
							else fn_acorn_exam_tokenize(
								replace(replace(replace(replace(
										coalesce(cac.expression, cact.expression), 
									'<course>',  ugs.name), 
									'<course-type>',  ct.name), 
									'<year>',    ay.name), 
									'<student>', s.number::text),
								p_level+1, p_messages)
						end,
						p_default) -- NULL if not set
					) into p_results
				   FROM acorn_university_courses c
				     JOIN acorn_university_course_types ct on c.course_type_id = ct.id
				     JOIN acorn_university_entities en ON c.entity_id = en.id
				     JOIN acorn_university_hierarchies hi ON hi.entity_id = en.id
				     JOIN acorn_university_academic_years ay ON hi.academic_year_id = ay.id
				     JOIN acorn_user_user_group_versions ugv ON hi.user_group_version_id = ugv.id
				     JOIN acorn_user_user_groups ugs ON ugv.user_group_id = ugs.id
				     JOIN acorn_user_user_group_version ug ON ugv.id = ug.user_group_version_id
				     JOIN acorn_university_students s ON ug.user_id = s.user_id

					 -- TODO: Need to do semesters
					 LEFT JOIN acorn_university_course_plans cys on c.id = cys.course_id and ay.id = cys.enrollment_academic_year_id

					 -- 2 Failover alternative expression settings
				     LEFT JOIN acorn_exam_calculation_courses cc ON c.id = cc.course_id AND cc.academic_year_id = ay.id
				     LEFT JOIN acorn_exam_calculations cac ON cc.calculation_id = cac.id
				     LEFT JOIN acorn_exam_calculation_types ect ON cac.calculation_type_id = ect.id
     
				     LEFT JOIN acorn_exam_calculation_course_types cct ON cct.course_type_id = c.course_type_id AND cct.academic_year_id = ay.id
				     LEFT JOIN acorn_exam_calculations cact ON cct.calculation_id = cact.id
				     LEFT JOIN acorn_exam_calculation_types ectt ON cact.calculation_type_id = ectt.id
					WHERE   (p_student_number  = '.*' or s.number = p_student_number::integer)
						and (ay.name   = p_academic_year  or p_academic_year = '.*')
						and (ugs.name  = p_course         or p_course = '.*')
						and (  ct.name = p_course_type    
							or ct.code = p_course_type 
							or p_course_type = '.*'
							-- TODO: Expensive, maybe require a leading !?
							-- TODO: Also great risk of accidental matches without ^...$
							-- string, pattern
							or regexp_like(ct.name, p_course_type) 
							or regexp_like(ct.code, p_course_type) 
						)
						and (coalesce(cac.name, cact.name) = p_algorithm      or p_algorithm = '.*')
						and (coalesce(ect.name, ectt.name) = p_algorithm_type or p_algorithm_type = '.*')
						and (coalesce(cys.required, cac.required, cact.required) or not p_required)
						and not (cac.expression is null and cact.expression is null);
			when p_etype = 'calculation' then
				-- ########################################################## Pure Calculations
				-- Current bakeloria final pass result: sum(..., :?calculation/<student>/<year>/.*/score/Bakeloria final mark=0:)
				-- default replaces individual default values, for example, in the case of passed but minimum is NULL
				-- AND if there are no results at all
				p_regexp_matches := regexp_matches(p_sub_expression, '([^/]+)/([^/]+)');
				p_algorithm      := p_regexp_matches[1];
				p_algorithm_type := p_regexp_matches[2];
				if p_messages then raise notice '% %: Calculation result(Algorithm:%(%))', p_level_string, p_level, p_algorithm, p_algorithm_type; end if;

				-- array_agg will collect NULLs
				select array_agg(
					coalesce(
						case
					    	when p_passed then
								-- (result between min and max)::int => 0|1
								-- Any NULLs lead to NULL
								fn_acorn_exam_concat_strict('('::text,
								fn_acorn_exam_tokenize(
									replace(replace(c.expression,
										'<year>',    ay.name), 
										'<student>', s.number::text),
								p_level+1, p_messages)::text, ' between '::text, c.minimum::text, ' and '::text, c.maximum::text, ')::int'::text)
							else fn_acorn_exam_tokenize(
								replace(replace(c.expression, 
									'<year>',    ay.name), 
									'<student>', s.number::text),
								p_level+1, p_messages)
						end,
						p_default) -- NULL if not set
					) into p_results
				   FROM acorn_exam_calculations c 
				   		JOIN acorn_exam_calculation_types ect ON c.calculation_type_id = ect.id,
					    acorn_university_students s,
					    acorn_university_academic_years ay
					WHERE   (p_student_number  = '.*' or s.number = p_student_number::integer)
						and (ay.name   = p_academic_year  or p_academic_year = '.*')
						and (c.name    = p_algorithm      or p_algorithm = '.*')
						and (ect.name  = p_algorithm_type or p_algorithm_type = '.*')
						and (c.required or not p_required);
		end case;

		-- Evaluate this sub-level
		-- so that we can assess expression NULL results and replace them with defaults
		-- has also the advantage the resolved_expression is the top level only
		p_num_results = coalesce(array_length(p_results, 1), 0);
		select array_agg(fn_acorn_exam_eval(unnest)) into p_results 
			from unnest(p_results) 
			where not unnest is NULL;
		p_num_results_removed := p_num_results - coalesce(array_length(p_results, 1), 0);
		if p_num_results_removed > 0 then 
			if p_messages then raise notice '% %: % evaluated to NULL and removed', p_level_string, p_level, p_num_results_removed; end if;
		end if;

		-- Replace individual NULLs with the default
		-- sum|avg|count() should ignore NULLs
		p_num_results = coalesce(array_length(p_results, 1), 0);
		if p_default is NULL then
			select array_agg(unnest) into p_results from unnest(p_results) where not unnest is NULL;
		else
			if p_messages then raise notice '% %: Replacing individual NULLs with %', p_level_string, p_level, p_default; end if;
			select array_agg(coalesce(unnest, p_default)) into p_results from unnest(p_results);
		end if;
		p_num_results_removed := p_num_results - coalesce(array_length(p_results, 1), 0);
		if p_num_results_removed > 0 then 
			if p_messages then raise notice '% %: % NULLs removed', p_level_string, p_level, p_num_results_removed; end if;
		end if;

		-- Replace overall result with the default
		p_results_string := '';
		if array_length(p_results, 1) is null then
			-- Empty multi-set default replacement
			-- The replace() below will nullify the entire output if p_results_string is NULL
			if p_default is NULL then 
				p_results_string := '';
			else
				p_results_string := p_default;
				if p_messages then raise notice '% %: Using default %', p_level_string, p_level, p_results_string; end if;
			end if;
		else
			p_results_string := array_to_string(p_results, ',');
		end if;
		if p_messages then raise notice '% %: Replacing % with %', p_level_string, p_level, p_token_record.match, case 
				when p_results_string = '' then '<empty string>'
				else p_results_string
			end;
		end if;
		-- If p_results_string is NULL, result will always be NULL
		p_expr := replace(p_expr, p_token_record.match, p_results_string);
	end loop;

	-- We want to trigger coalesce() clauses properly
	if trim(p_expr) = '' then 
		p_expr := NULL; 
		if p_messages then raise notice '% %: Changed empty string to NULL', p_level_string, p_level; end if;
	end if;

	if p_messages then raise notice '% %: Returning %', p_level_string, p_level, p_expr; end if;
	return p_expr;
end;
$_$;


ALTER FUNCTION public.fn_acorn_exam_tokenize(p_expr character varying, p_level integer, p_messages boolean) OWNER TO university;

--
-- Name: fn_acorn_first(anyelement, anyelement); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_first(anyelement, anyelement) RETURNS anyelement
    LANGUAGE sql IMMUTABLE STRICT PARALLEL SAFE
    AS $_$
            
            SELECT $1;
            $_$;


ALTER FUNCTION public.fn_acorn_first(anyelement, anyelement) OWNER TO university;

--
-- Name: fn_acorn_last(anyelement, anyelement); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_last(anyelement, anyelement) RETURNS anyelement
    LANGUAGE sql IMMUTABLE STRICT PARALLEL SAFE
    AS $_$
            
            SELECT $2;
            $_$;


ALTER FUNCTION public.fn_acorn_last(anyelement, anyelement) OWNER TO university;

--
-- Name: fn_acorn_max(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_max() RETURNS double precision
    LANGUAGE sql
    AS $$
	select NULL::int;
$$;


ALTER FUNCTION public.fn_acorn_max() OWNER TO university;

--
-- Name: fn_acorn_max(double precision[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_max(VARIADIC ints double precision[]) RETURNS double precision
    LANGUAGE sql
    AS $$
	select max(unnest) from (SELECT unnest(ints)) a;
$$;


ALTER FUNCTION public.fn_acorn_max(VARIADIC ints double precision[]) OWNER TO university;

--
-- Name: fn_acorn_min(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_min() RETURNS double precision
    LANGUAGE sql
    AS $$
	select NULL::int;
$$;


ALTER FUNCTION public.fn_acorn_min() OWNER TO university;

--
-- Name: fn_acorn_min(double precision[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_min(VARIADIC ints double precision[]) RETURNS double precision
    LANGUAGE sql
    AS $$
	select min(unnest) from (SELECT unnest(ints)) a;
$$;


ALTER FUNCTION public.fn_acorn_min(VARIADIC ints double precision[]) OWNER TO university;

--
-- Name: fn_acorn_new_replicated_row(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_new_replicated_row() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
            declare
server_domain varchar(1024);
plugin_path varchar(1024);
action varchar(2048);
params varchar(2048);
url varchar(2048);
res public.http_response;
            begin
            -- https://www.postgresql.org/docs/current/plpgsql-trigger.html
            select "domain" into server_domain from acorn_servers where hostname = hostname();
            if server_domain is null then
              new.response = 'No domain specified';
            else
                    plugin_path = '/api';
                    action = '/datachange';
                    params = concat('TG_NAME=', TG_NAME, '&TG_OP=', TG_OP, '&TG_TABLE_SCHEMA=', TG_TABLE_SCHEMA, '&TG_TABLE_NAME=', TG_TABLE_NAME, '&ID=', new.id);
                    url = concat('http://', server_domain, plugin_path, action, '?', params);
        
                    res = public.http_get(url);
                    new.response = concat(res.status, ' ', res.content);
            end if;

            return new;
end;
            $$;


ALTER FUNCTION public.fn_acorn_new_replicated_row() OWNER TO university;

--
-- Name: fn_acorn_reset_sequences(character varying, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_reset_sequences(schema_like character varying, table_like character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
            declare
reset_query varchar(32596);
            begin
        reset_query = (SELECT string_agg(
                concat('SELECT SETVAL(''',
              PGT.schemaname, '.', S.relname,
              ''', COALESCE(MAX(', C.attname, '), 1) ) FROM ',
              PGT.schemaname, '.', T.relname, ';'),
            '')
          FROM pg_class AS S,
            pg_depend AS D,
            pg_class AS T,
            pg_attribute AS C,
            pg_tables AS PGT
          WHERE S.relkind = 'S'
            AND S.oid = D.objid
            AND D.refobjid = T.oid
            AND D.refobjid = C.attrelid
            AND D.refobjsubid = C.attnum
            AND T.relname = PGT.tablename
            AND PGT.schemaname like(schema_like)
            AND T.relname like(table_like)
        );
        if not reset_query is null then
          execute reset_query;
        end if;
end;
            $$;


ALTER FUNCTION public.fn_acorn_reset_sequences(schema_like character varying, table_like character varying) OWNER TO university;

--
-- Name: fn_acorn_server_id(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_server_id() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
            declare
pid uuid;
            begin
        if new.server_id is null then
          select "id" into pid from acorn_servers where hostname = hostname();
          if pid is null then
            insert into acorn_servers(hostname) values(hostname()) returning id into pid;
          end if;
          new.server_id = pid;
        end if;
        return new;
end;
            $$;


ALTER FUNCTION public.fn_acorn_server_id() OWNER TO university;

--
-- Name: fn_acorn_sum(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_sum() RETURNS double precision
    LANGUAGE sql
    AS $$
	select NULL::double precision;
$$;


ALTER FUNCTION public.fn_acorn_sum() OWNER TO university;

--
-- Name: fn_acorn_sum(double precision[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_sum(VARIADIC ints double precision[]) RETURNS double precision
    LANGUAGE sql
    AS $$
	select sum(unnest) from (SELECT unnest(ints)) a;
$$;


ALTER FUNCTION public.fn_acorn_sum(VARIADIC ints double precision[]) OWNER TO university;

--
-- Name: fn_acorn_sum(character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_sum(ints character varying) RETURNS integer
    LANGUAGE sql
    AS $$
	select sum(unnest) from (SELECT unnest(ints::integer[]))
$$;


ALTER FUNCTION public.fn_acorn_sum(ints character varying) OWNER TO university;

--
-- Name: fn_acorn_sumproduct(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_sumproduct() RETURNS double precision
    LANGUAGE plpgsql
    AS $$
declare
begin
	return NULL::int;
end
$$;


ALTER FUNCTION public.fn_acorn_sumproduct() OWNER TO university;

--
-- Name: fn_acorn_sumproduct(double precision[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_sumproduct(VARIADIC ints double precision[]) RETURNS double precision
    LANGUAGE plpgsql
    AS $$
declare
	len int;
	result double precision;
	values double precision[];
	weights double precision[];
begin
	len     := array_upper(ints,1) / 2;
	values  := ints[1:len];
	weights := ints[len+1:];

	result := 0;
	for i in 1..len loop
		result := result + (values[i] * weights[i]);
	end loop;

	return result;
end
$$;


ALTER FUNCTION public.fn_acorn_sumproduct(VARIADIC ints double precision[]) OWNER TO university;

--
-- Name: fn_acorn_table_counts(character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_table_counts(_schema character varying) RETURNS TABLE("table" text, count bigint)
    LANGUAGE plpgsql
    AS $$
            
            begin
          -- SELECT * FROM information_schema.tables;
          return query execute (select concat(
          'select "table", "count" from (',
            (
              SELECT string_agg(
              concat('select ''', table_name, ''' as "table", count(*) as "count" from ', table_name),
              ' union all '
            )
            FROM information_schema.tables
            where table_catalog = current_database()
            and table_schema = _schema
            and table_type = 'BASE TABLE'
          ),
          ') data order by "count" desc, "table" asc'
        ));
end;
            $$;


ALTER FUNCTION public.fn_acorn_table_counts(_schema character varying) OWNER TO university;

--
-- Name: fn_acorn_translate(character varying, character varying, uuid, character); Type: FUNCTION; Schema: public; Owner: sz
--

CREATE FUNCTION public.fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character) RETURNS character varying
    LANGUAGE plpgsql
    AS $_$
declare
	p_model_parts character varying(1024)[];
	p_author character varying(1024);
	p_plugin character varying(1024);
	p_class  character varying(1024);
	p_model character varying(1024);
	p_translated_name character varying(1024);
begin
	-- Failover translateable attribute
	if p_locale = 'en' then
		p_translated_name := p_fallback_name;
	else
		-- acorn_university_students => Acorn\Uniersity\Models\Student
		p_model_parts := regexp_split_to_array(p_table, '_');
		p_author := initcap(p_model_parts[1]);
		p_plugin := initcap(p_model_parts[2]);
		p_class  := initcap(p_model_parts[3]);
		
		p_author := replace(p_author, 'Acorn', 'Acorn');
		p_class  := regexp_replace(p_class, 'ies$', 'y');
		p_class  := regexp_replace(p_class, 's$', '');
		
		p_model_parts := ARRAY[p_author, p_plugin, 'Models', p_class];
		p_model := array_to_string(p_model_parts, '\');
	
		p_translated_name := (
			select json_extract_path_text(attribute_data::json, 'name')
			from winter_translate_attributes
			where model_type = p_model and model_id = p_id::text and locale = p_locale
		);

		if p_translated_name is null or p_translated_name = '' then
			p_translated_name := p_fallback_name;
		end if;
	end if;

	return p_translated_name;
end;
$_$;


ALTER FUNCTION public.fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character) OWNER TO sz;

--
-- Name: fn_acorn_truncate_database(character varying, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_truncate_database(schema_like character varying, table_like character varying) RETURNS void
    LANGUAGE plpgsql
    AS $$
            declare
reset_query varchar(32596);
            begin
        reset_query = (SELECT 'TRUNCATE TABLE '
              || string_agg(format('%I.%I', schemaname, tablename), ', ')
              || ' CASCADE'
            FROM   pg_tables
            WHERE  schemaname like(schema_like)
            AND tablename like(table_like)
          );
        if not reset_query is null then
          execute reset_query;
        end if;
end;
            $$;


ALTER FUNCTION public.fn_acorn_truncate_database(schema_like character varying, table_like character varying) OWNER TO university;

--
-- Name: fn_acorn_university_academic_years_copy_to(uuid, uuid, uuid, boolean, boolean, boolean, boolean, boolean, uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_academic_years_copy_to(p_old_academic_year_id uuid, p_new_academic_year_id uuid, p_user_id uuid, p_copy_hierarchy boolean DEFAULT false, p_copy_semesters boolean DEFAULT false, p_copy_materials boolean DEFAULT false, p_copy_seminars boolean DEFAULT false, p_copy_calculations boolean DEFAULT false, p_old_parent_id uuid DEFAULT NULL::uuid, p_new_parent_id uuid DEFAULT NULL::uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
declare
	p_description text;
	p_year_diff interval;
	-- p_new_hids uuid[];
	p_nowhere uuid[];
begin
	select 'Copied from ' || name into p_description 
		from acorn_university_academic_years 
		where id = p_old_academic_year_id;

	-- ------------------------------------------------ Copy Semesters
	if p_copy_semesters then
		-- Year Diff between new and old to add to the dates of the semesters
		select ('P' || extract(year from ep_new.start) - extract(year from ep_old.start) || 'Y')::interval into p_year_diff
			from acorn_university_academic_years ay_old
			inner join acorn_calendar_events ev_old on ev_old.id = ay_old.event_id
			inner join acorn_calendar_event_parts ep_old on ep_old.event_id = ev_old.id,
			
			acorn_university_academic_years ay_new
			inner join acorn_calendar_events ev_new on ev_new.id = ay_new.event_id
			inner join acorn_calendar_event_parts ep_new on ep_new.event_id = ev_new.id

			where ay_old.id = p_old_academic_year_id
			and ay_new.id = p_new_academic_year_id;			
		
		insert into acorn_university_academic_year_semesters(academic_year_id, semester_id, created_by_user_id, event_id)
			select p_new_academic_year_id, ays_old.semester_id, p_user_id,
			fn_acorn_calendar_create_event(
				ev_old.calendar_id, p_user_id, ep_old.type_id, ep_old.status_id, 
				'Semester ' || ay_new.name || '::' || sem_old.name,
				ep_old.start + p_year_diff, 
				ep_old.end   + p_year_diff
			)
			-- From Academic Year
			from acorn_university_academic_years ay_old
			inner join acorn_university_academic_year_semesters ays_old on ay_old.id = ays_old.academic_year_id
			inner join acorn_university_semesters sem_old on sem_old.id = ays_old.semester_id
			inner join acorn_calendar_events ev_old on ev_old.id = ays_old.event_id
			inner join acorn_calendar_event_parts ep_old on ep_old.event_id = ev_old.id
			-- New Academic Year (semesters being insterted)
			cross join acorn_university_academic_years ay_new
			
			where ay_old.id = p_old_academic_year_id
			and ay_new.id = p_new_academic_year_id
			on conflict do nothing; -- Don't overwrite existing entries
	end if;

	-- ------------------------------------------------ Copy Hierarchy
	-- Recursive
	-- Note that entities can have multiple hierarchy parents
	-- thus the recursive copy
	if p_copy_hierarchy then
		with inserted as (
			insert into acorn_university_hierarchies(
				entity_id, academic_year_id, 
				parent_id, 
				created_by_user_id, description, 
				import_source
			)
				select 
					hi_old.entity_id, p_new_academic_year_id, 
					p_new_parent_id, -- NULL at top level
					p_user_id, hi_old.description, 
					-- import_source: Ugly temp solution, because we are not sure how to pass through the old id
					hi_old.id::character varying(64) 
				from acorn_university_hierarchies hi_old
				where hi_old.academic_year_id = p_old_academic_year_id
				and (hi_old.parent_id = p_old_parent_id or 
					(p_old_parent_id is NULL and hi_old.parent_id is NULL)
				)
				returning import_source::uuid as old_id, id as new_id
			)
			select array_agg(fn_acorn_university_academic_years_copy_to(
					p_old_academic_year_id, p_new_academic_year_id, p_user_id,
					p_copy_hierarchy, p_copy_semesters, p_copy_materials, p_copy_seminars, p_copy_calculations,
					inserted.old_id, inserted.new_id
				)) into p_nowhere
			from inserted;
	
		-- TODO: Get inserted in to p_new_hids, and update things...
		-- update acorn_university_hierarchies set import_source = p_description || ':' || import_source
		-- 	where id in(select unnest from unnest(p_new_hids));
	end if;
		
	return p_new_academic_year_id;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_academic_years_copy_to(p_old_academic_year_id uuid, p_new_academic_year_id uuid, p_user_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean, p_old_parent_id uuid, p_new_parent_id uuid) OWNER TO university;

--
-- Name: fn_acorn_university_action_academic_years_clear(uuid, uuid, boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean DEFAULT false, p_for_enrollment_year boolean DEFAULT false, p_clear_exams_and_scores boolean DEFAULT false, p_confirm boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	if p_confirm then
		delete from acorn_university_hierarchies where academic_year_id = model_id;

		if p_clear_course_materials or p_clear_exams_and_scores then
			-- This will casscade to scores
			delete from acorn_exam_exam_materials
				where course_material_id in(
					select id from acorn_university_course_materials
						where enrollment_academic_year_id = model_id
				);
		end if;
		
		if p_clear_course_materials then
			-- This will cascade to calculation_course_materials
			if p_for_enrollment_year then
				delete from acorn_university_course_materials
					where enrollment_academic_year_id = model_id;
			else
				delete from acorn_university_course_materials
					where academic_year_semester_id in(
						select id from public.acorn_university_academic_year_semesters
						where academic_year_id = model_id
					);
			end if;
		end if;
	end if;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) IS 'labels:
  en: Clear year data
  ku: Daneyên salê paqij bike
  ar: بيانات السنة واضحة
result-action: refresh
condition: exists(select * from acorn_university_hierarchies where academic_year_id = acorn_university_academic_years.id)
comment:
  en: >
    The data for the next following years can be deleted for courses starting on _this_ enrollment year.
    *or* for course materials falling in this year from any previous enrollment year course
  ku: >
    Agahiyên salên pêş de dikarin ji bo dersên ku di _vê_ sala qeydkirinê_ de dest pê dikin werin jêbirin.
    *an* ji bo materyalên dersê yên ku di vê salê de ji her dersa sala qeydkirinê ya berê ne.
  ar: >
    يمكن حذف بيانات السنوات التالية للدورات التي تبدأ في سنة التسجيل هذه. أو للمواد الدراسية التي تقع في هذا العام من أي دورة دراسية سابقة في سنة التسجيل.';


--
-- Name: fn_acorn_university_action_academic_years_copy_to(uuid, uuid, uuid, boolean, boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean DEFAULT false, p_copy_semesters boolean DEFAULT false, p_copy_materials boolean DEFAULT false, p_copy_seminars boolean DEFAULT false, p_copy_calculations boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	perform fn_acorn_university_academic_years_copy_to(
		model_id, p_academic_year_id, user_id,
		p_copy_hierarchy, p_copy_semesters, p_copy_materials, p_copy_seminars, p_copy_calculations
	);

	-- TODO: Do this fn_acorn_university_hierarchies_counts with a trigger?
	-- perform fn_acorn_university_hierarchies_counts(id)
	-- 	from acorn_university_hierarchies
	-- 	where parent_id is NULL;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) IS 'labels:
  en: Copy year data to
  ku: Daneyên salê kopî bikin bo
  ar: نسخ بيانات السنة إلى
result-action: refresh
condition: exists(select * from acorn_university_hierarchies where academic_year_id = acorn_university_academic_years.id)';


--
-- Name: fn_acorn_university_action_academic_years_import2425b(boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean DEFAULT true, p_confirm boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	if p_confirm then
		perform fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous);
	end if;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean) IS 'result-action: refresh
condition: (id = ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'')
labels:
  en: Import Legacy High School (v1)
comment-icon: info
comment:
  en: >
    Schools results happened end of 2023-2024.
    Data will be imported from linked university-acceptance database.';


--
-- Name: fn_acorn_university_action_academic_years_import2425e(boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean DEFAULT true, p_enroll_students_into_courses boolean DEFAULT true, p_delete_previous boolean DEFAULT true, p_confirm boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	if p_confirm then
		perform fn_acorn_university_legacy_import_enrollment(
			p_import_mofadala_students,
			p_enroll_students_into_courses,
			p_delete_previous
		);
	end if;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean) IS 'result-action: refresh
condition: (id = ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'')
labels:
  en: Import Legacy Enrollment
comment-icon: info
comment:
  en: >
    University enrollment happened beginning of 2024-2025.
    Data will be imported from linked university-acceptance database.';


--
-- Name: fn_acorn_university_action_academic_years_import2526b(boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean DEFAULT true, p_confirm boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	if p_confirm then
		perform fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous);
	end if;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean) IS 'result-action: refresh
condition: (id = ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'')
labels:
  en: Import Legacy High School (v2)
comment-icon: info
comment:
  en: >
    Schools results happened end of 2024-2025.
    Data will be imported from linked university-acceptance database.';


--
-- Name: fn_acorn_university_action_academic_years_provision(uuid, uuid, uuid, integer, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer DEFAULT 5, p_enabled boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare
	p_max_academic_year_id uuid;
	p_new_academic_year_ids uuid[];
	p_calendar_id     uuid;
	p_event_type_id   uuid;
	p_event_status_id uuid;
begin
	-- Max year so far
	select id into p_max_academic_year_id
		from acorn_university_academic_years
		order by ordinal desc
		limit 1;

	-- Copy event settings
	select ev_copy.calendar_id, ep_copy.type_id, ep_copy.status_id into p_calendar_id, p_event_type_id, p_event_status_id
		from acorn_university_academic_years ay_copy
		inner join acorn_calendar_events ev_copy on ev_copy.id = ay_copy.event_id
		inner join acorn_calendar_event_parts ep_copy on ep_copy.event_id = ev_copy.id
		where ay_copy.id = p_copy_academic_year_id
		order by ep_copy.start asc
		limit 1;
			
	-- Provision the Years
	with inserted as (
		insert into acorn_university_academic_years(name, ordinal, enabled, event_id)
			select (extract(year from ep_max.start) + cy.ordinal)::text || '-' || (extract(year from ep_max.end) + cy.ordinal)::text,
				ay_max.ordinal + cy.ordinal, 
				p_enabled, 
				fn_acorn_calendar_create_event(
					p_calendar_id, p_user_id, p_event_type_id, p_event_status_id, 
					'Academic Year ' || (extract(year from ep_max.start) + cy.ordinal)::text || '-' || (extract(year from ep_max.end) + cy.ordinal)::text,
					ep_max.start + ('P' || cy.ordinal || 'Y')::interval, 
					ep_max.end   + ('P' || cy.ordinal || 'Y')::interval
				)
			-- Use the Course Years as our counter
			from acorn_university_course_years cy
			-- Get the current years semester from/to to copy from
			cross join acorn_university_academic_years ay_max
			inner join acorn_calendar_events ev_max on ev_max.id = ay_max.event_id
			inner join acorn_calendar_event_parts ep_max on ep_max.event_id = ev_max.id
			where ay_max.id = p_max_academic_year_id
			and cy.ordinal <= p_num_years
			returning id
	) select array_agg(id) into p_new_academic_year_ids from inserted;

	-- Provision semesters
	-- TODO: Container event
	insert into acorn_university_academic_year_semesters(academic_year_id, semester_id, event_id)
		select ay_new.id, ays_copy.semester_id, 
			-- Create the event
			fn_acorn_calendar_create_event(
				p_calendar_id, p_user_id, p_event_type_id, p_event_status_id, 
				'Semester ' || ay_new.name || '::' || sem_copy.name,
				ep_copy.start + ('P' || (ay_new.ordinal - ay_copy.ordinal) || 'Y')::interval, 
				ep_copy.end   + ('P' || (ay_new.ordinal - ay_copy.ordinal) || 'Y')::interval
			)
		from acorn_university_academic_years ay_new
		-- Get the current years semester from/to to copy from
		-- TODO: It is an error for a semester to have multiple event_parts
		cross join acorn_university_academic_years ay_copy
		inner join acorn_calendar_events ev_copy on ev_copy.id = ay_copy.event_id
		inner join acorn_calendar_event_parts ep_copy on ep_copy.event_id = ev_copy.id
		-- Copy Semesters
		inner join acorn_university_academic_year_semesters ays_copy on ay_copy.id = ays_copy.academic_year_id
		inner join acorn_university_semesters sem_copy on ays_copy.semester_id = sem_copy.id
		where ay_copy.id = p_copy_academic_year_id
		-- Newly created years
		and not array_position(p_new_academic_year_ids, ay_new.id) is null;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean) IS 'labels:
  en: Provision years and their semesters
  ku: Salên dabînkirinê û semestrên wan
  ar: سنوات الدراسة وفصولها الدراسية
result-action: refresh
type: list
fields:
  p_copy_academic_year_id:
    options: Acorn\University\Models\AcademicYear::dropdownOptions
    type: dropdown
    required: true
  p_enabled:
    label: Enable new years
    cssClass: col-xs-6
    default: true
  p_num_years:
    label: Number of new years
    cssClass: col-xs-6
	default: 5
comment:
  en: >
    Provision multiple Academic years and semesters into the future. Semesters will be copied from the most recent Academic Year setup.
  ku: >
    Pêşkêşkirina çend sal û semesterên akademîk bo pêşerojê. Semester dê ji sazkirina Sala Akademîk a herî dawî werin kopî kirin.
  ar: >
    توفير سنوات دراسية وفصول دراسية متعددة مستقبلًا. سيتم نسخ الفصول الدراسية من أحدث إعداد للسنة الدراسية.';


--
-- Name: fn_acorn_university_action_academic_years_res_ref(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	perform fn_acorn_exam_action_results_refresh(NULL, model_id);
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid) IS 'labels:
  en: Refresh results
  ku: Encamên nûve bike
  ar: تحديث النتائج
result-action: refresh
condition: enabled
comment:
  en: >
    The final results are calculated and cached. 
    If scores and data has changed, the results can be refreshed here.
  ku: >
    Encamên dawî tên hesabkirin û di keşê de têne tomarkirin.
    Ger puan û dane guherîn, encam dikarin li vir werin nûkirin.
  ar: >
    يتم حساب النتائج النهائية وتخزينها مؤقتًا. في حال تغيّر النتائج والبيانات، يُمكن تحديث النتائج هنا.';


--
-- Name: fn_acorn_university_action_course_materials_cm_copy2(uuid, uuid, uuid, boolean, boolean, boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean DEFAULT true, p_copy_projects boolean DEFAULT false, p_copy_interviews boolean DEFAULT false, p_copy_calculations boolean DEFAULT false, p_copy_students boolean DEFAULT false, p_delete_existing boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean) IS 'labels:
  en: Copy materials to
  ku: Materyalan kopî bikin bo
  ar: نسخ المواد إلى
comment:
  en: Add selected information available to another course-academic year-course year-semester
  ku: Agahiyên bijartî yên berdest li qursek din-sala akademîk-qursa sal-semester zêde bikin
  ar: إضافة المعلومات المحددة المتاحة لدورة أخرى-السنة الدراسية-السنة الدراسية-الفصل الدراسي
fields:
  p_course_id:
    type: dropdown
    placeholder: backend::lang.form.select
    required: true
    options: Acorn\University\Models\Course::dropdownOptions
  p_academic_year_semester_id:
    type: dropdown
    placeholder: backend::lang.form.select
    required: true
    options: Acorn\University\Models\AcademicYearSemester::dropdownOptions
    span: storm
    css-class: col-xs-6 new-row
  p_course_year_id:
    type: dropdown
    placeholder: backend::lang.form.select
    options: Acorn\University\Models\CourseYear::dropdownOptions
    span: storm
    css-class: col-xs-6
	
  p_copy_exams:
    span: storm
    css-class: col-xs-4 new-row
  p_copy_projects:
    span: storm
    css-class: col-xs-4
  p_copy_interviews:
    span: storm
    css-class: col-xs-4
  p_copy_calculations:
    span: storm
    css-class: col-xs-4
  p_delete_existing:
    span: storm
    css-class: col-xs-4
  p_copy_students:
    span: storm
    css-class: col-xs-4
comment-icon: info';


--
-- Name: fn_acorn_university_action_course_year_semesters_spec(uuid, uuid, uuid, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean DEFAULT true, p_copy_exams boolean DEFAULT true) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_id uuid;
	p_ids uuid[];
begin
	-- CYS - Entity - User Group
	insert into acorn_user_user_groups(name, code)
		select ugs.name || ' ' || spec.name, 
		 	'CYS-SPEC-' || p_model_id || '::' || p_course_specialization_id
		from acorn_university_course_year_semesters cys
		inner join acorn_university_entities en on cys.entity_id = en.id
		inner join acorn_user_user_groups ugs on en.user_group_id = ugs.id,
		acorn_university_course_specializations spec
		where cys.id = p_model_id and spec.id = p_course_specialization_id
		returning id into p_id;
	insert into acorn_university_entities(user_group_id) values(p_id)
		returning id into p_id;
	insert into acorn_university_course_year_semesters(course_id, course_year_id, academic_year_semester_id, entity_id, enrollment_academic_year_id, academic_year_semester_ordinal, course_plan_id, course_specialization_id)
		select course_id, course_year_id, academic_year_semester_id, p_id, enrollment_academic_year_id, academic_year_semester_ordinal, course_plan_id, 
		p_course_specialization_id
		from acorn_university_course_year_semesters where id = p_model_id
		returning id into p_id;

	if p_copy_materials then 
		with inserted as (
			insert into acorn_university_course_materials(material_id, required, minimum, maximum, created_by_user_id, weight, sort_order, course_year_semester_id)
				select material_id, required, minimum, maximum, p_user_id, weight, sort_order, p_id
				from acorn_university_course_materials where course_year_semester_id = p_model_id
				returning id
		) select array_agg(id) into p_ids from inserted;

		-- TODO: Copy exams
		-- if p_copy_exams then
		-- 	insert into
		-- end if;
	end if;
	
	return 'SUCCESS';
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean) IS 'labels:
  en: Specialize
  ku: Taybetkirin
  ar: متخصص
result-action: refresh
condition: course_specialization_id is null
comment:
  en: Duplicate this semester with its own student group for a specialization.
  ku: Vê semesterê bi koma xwendekarên xwe re ji bo pisporiyê dubare bike.
  ar: تكرار هذا الفصل الدراسي مع مجموعته الطلابية الخاصة للتخصص.
fields:
  p_course_specialization_id:
    type: dropdown
    options: Acorn\University\Models\CourseSpecialization::dropdownOptions';


--
-- Name: fn_acorn_university_action_hierarchies_append_child(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
begin
	return '/backend/acorn/university/hierarchies/create?parent=' || p_model_id;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid) IS 'labels:
  en: Append child to
  ku: Zarokek zede dike
  ar: إضافة الطفل إلى
result-action: model-uuid-redirect
type: row';


--
-- Name: fn_acorn_university_action_hierarchies_clear(uuid, uuid, boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean DEFAULT false, p_for_enrollment_year boolean DEFAULT false, p_clear_exams_and_scores boolean DEFAULT false, p_confirm boolean DEFAULT false) RETURNS void
    LANGUAGE sql
    AS $$
	select fn_acorn_university_action_academic_years_clear(
		academic_year_id, user_id, p_clear_course_materials, p_for_enrollment_year, p_clear_exams_and_scores, p_confirm
	) from acorn_university_hierarchies where id = model_id;
$$;


ALTER FUNCTION public.fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) IS 'labels:
  en: Clear year data
  ku: Bayonetê Salê redike
  ar: بيانات السنة واضحة
result-action: refresh
condition: parent_id is null
comment:
  en: >
    The data for the next following years can be deleted for courses starting on _this_ enrollment year.
    *or* for course materials falling in this year from any previous enrollment year course
  ku: >
    Agahiyên salên pêş de dikarin ji bo dersên ku di _vê_ sala qeydkirinê_ de dest pê dikin werin jêbirin.
    *an* ji bo materyalên dersê yên ku di vê salê de ji her dersa sala qeydkirinê ya berê ne.
  ar: >
    يمكن حذف بيانات السنوات التالية للدورات التي تبدأ في سنة التسجيل هذه. أو للمواد الدراسية التي تقع في هذا العام من أي دورة دراسية سابقة في سنة التسجيل.';


--
-- Name: fn_acorn_university_action_hierarchies_copy_to(uuid, uuid, uuid, boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean DEFAULT true, p_copy_materials boolean DEFAULT true, p_copy_seminars boolean DEFAULT true, p_copy_calculations boolean DEFAULT true) RETURNS void
    LANGUAGE sql
    AS $$
	select fn_acorn_university_action_academic_years_copy_to(
		academic_year_id, user_id, p_academic_year_id, p_promote_successful_students, p_copy_materials, p_copy_seminars, p_copy_calculations
	) from acorn_university_hierarchies where id = model_id;
$$;


ALTER FUNCTION public.fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) IS 'labels:
  en: Copy year data to
  ku: Daneyên salê kopî bike bo
  ar: نسخ بيانات السنة إلى
result-action: refresh
condition: parent_id is null';


--
-- Name: fn_acorn_university_action_hierarchies_refresh_counts(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_hierarchies_refresh_counts(p_model_id uuid, p_user_id uuid) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
begin
	update acorn_university_hierarchies hi
		set nest_descendants       = fn_acorn_university_hierarchies_descendants(id),
		    nest_ascendants        = fn_acorn_university_hierarchies_ascendants(id);
	perform fn_acorn_university_hierarchies_descendants_user_cnt();

	return 'SUCCESS';
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_hierarchies_refresh_counts(p_model_id uuid, p_user_id uuid) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_hierarchies_refresh_counts(p_model_id uuid, p_user_id uuid); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_hierarchies_refresh_counts(p_model_id uuid, p_user_id uuid) IS 'labels:
  en: Refresh Counts
  ku: Jimareyên Nûjenkirinê
  ar: عدد مرات التحديث
result-action: refresh
type: list';


--
-- Name: fn_acorn_university_action_students_refresh(uuid, uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	perform fn_acorn_exam_action_results_refresh(model_id);
end;
$$;


ALTER FUNCTION public.fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid) IS 'labels:
  en: Refresh results
  ku: Encamên nûve bike
  ar: تحديث النتائج
result-action: refresh
advanced: true
comment:
  en: The final results are calculated and cached. If scores and data has changed, the results can be refreshed here.
  ku: Encamên dawî tên hesabkirin û di keşê de têne hilanîn. Ger puan û daneyên we guherîn, encam dikarin li vir werin nûkirin.
  ar: يتم حساب النتائج النهائية وتخزينها مؤقتًا. في حال تغيّر النتائج والبيانات، يُمكن تحديث النتائج هنا.';


--
-- Name: fn_acorn_university_after_courses_add_to_hierarchy(uuid, uuid, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean DEFAULT true) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
begin
	return 'SUCCESS';
end;
$$;


ALTER FUNCTION public.fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean) IS 'labels:
  en: Add to your organisation
  ku: Li rêxistina xwe zêde bike
  ar: أضف إلى مؤسستك
conditions: |
  select count(*) from acorn_dbauth_user u
  inner join acorn_university_entities en on en.id = u.global_scope_entity_id
  where en.leaf_table = ''acorn_university_schools''
fields:
  p_add:
    contexts: create
    default: true
    comment-html: true
    comment:
      en: Add this course to your organisation for the <b>current year</b>
      ku: Vê qursê ji bo rêxistina xwe ji bo <b>sala heyî</b> zêde bikin
      ar: أضف هذه الدورة إلى مؤسستك للعام الحالي
    tab-location: 3
';


--
-- Name: fn_acorn_university_after_students_add_to_courses(uuid, uuid, uuid[]); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
begin
	return 'SUCCESS';
end;
$$;


ALTER FUNCTION public.fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]) IS 'labels:
  en: Add to your courses
  ku: Li qursên xwe zêde bikin
  ar: أضف إلى دوراتك
order: 500
conditions: |
  select count(*) from acorn_dbauth_user u
  inner join acorn_university_entities en on en.id = u.global_scope_entity_id
  where en.leaf_table = ''acorn_university_schools''
fields:
  p_course_ids:
    contexts: create
    type: checkboxlist
    options: Acorn\University\Models\Course::dropdownOptions
    css-classes: nolabel
    commentHtml: true
    comment:
      en: Add this student to your following courses for the <b>current year</b>. <span class="danger">At least one course is required</span> otherwise the student will not be registered at your school!
      ku: Vê xwendekarê ji bo <b>sala niha</b> li qursên xwe yên jêrîn zêde bike. <span class="danger">Herî kêm qursek pêwîst e</span> wekî din xwendekar dê li dibistana te neyê qeydkirin!
      ar: أضف هذا الطالب إلى دوراتك التالية للسنة الحالية. <span class="danger">مطلوب دورة واحدة على الأقل</span> وإلا فلن يتم تسجيل الطالب في مدرستك!
';


--
-- Name: fn_acorn_university_after_students_set_code(uuid, uuid, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
begin
	return 'SUCCESS';
end;
$$;


ALTER FUNCTION public.fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying) IS 'labels:
  en: Code 
  ku: Koda
  ar: شفرة
order: 200
conditions: |
  select count(*) from acorn_dbauth_user u
  inner join acorn_university_entities en on en.id = u.global_scope_entity_id
  where en.leaf_table = ''acorn_university_schools''
fields:
  p_code:
    type: text
    readOnly: true
    contexts: create
    comment:
      en: The computer will assign a code for the student and show you after. This can be useful to find the student later on.
      ku: Komputer dê kodekê ji bo xwendekar destnîşan bike û piştre nîşanî we bide. Ev dikare ji bo dîtina xwendekar paşê kêrhatî be.
      ar: سيُخصِّص الحاسوب رمزًا للطالب ويُظهِره لك لاحقًا. قد يكون هذا مفيدًا للعثور على الطالب لاحقًا.
';


--
-- Name: fn_acorn_university_after_students_set_language(uuid, uuid, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
begin
	return 'SUCCESS';
end;
$$;


ALTER FUNCTION public.fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying) IS 'labels:
  en: Primary language 
  ku: Zimanê sereke
  ar: اللغة الأساسية
order: 300
conditions: |
  select count(*) from acorn_dbauth_user u
  inner join acorn_university_entities en on en.id = u.global_scope_entity_id
  where en.leaf_table = ''acorn_university_schools''
fields:
  p_language:
    type: dropdown
    placeholder: backend::lang.form.select
    options: Acorn\User\Models\Language::dropdownOptions
    contexts: create
    comment:
      en: You can add more languages later on
      ku: Hûn dikarin paşê zimanên din lê zêde bikin
      ar: يمكنك إضافة المزيد من اللغات لاحقًا
';


--
-- Name: fn_acorn_university_before_course_plans_prov(uuid, uuid, uuid, integer, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean DEFAULT true) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
begin
	-- BEFORE INSERT
	if p_provision_missing_years then
		perform fn_acorn_university_action_academic_years_provision(
			p_model_id,
			p_user_id,
			p_enrollment_academic_year_id,
			p_length,
			true
		);
	end if;
	return 'SUCCESS';
end;
$$;


ALTER FUNCTION public.fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean) OWNER TO university;

--
-- Name: FUNCTION fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean); Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON FUNCTION public.fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean) IS 'labels:
  en: Provision missing years
  ku: Salên winda yên dabînkirinê
  ar: توفير سنوات مفقودة
fields:
  p_provision_missing_years:
    contexts: create
    default: true
    css-classes: col-xs-12
    comment-html: true
    comment:
      en: Auto-Provision any missing academic years based on the <b>enrollment year</b>
      ku: Pêşkêşkirina otomatîkî ya her salên akademîk ên winda li gorî <b>sala qeydkirinê</b>
      ar: التزويد التلقائي لأي سنوات دراسية مفقودة استنادًا إلى سنة التسجيل
    tab-location: 3
';


--
-- Name: fn_acorn_university_cascade_delete_event(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_cascade_delete_event() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- On Delete lecture
	-- event_id NOT NULL
	delete from public.acorn_calendar_events where id = old.event_id;
	return old;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_cascade_delete_event() OWNER TO university;

--
-- Name: fn_acorn_university_cm_order(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_cm_order() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- Runs before INSERT on acorn_university_course_materials
	if new.sort_order is null then
		select coalesce(max("sort_order"), 0) + 100 into new.sort_order 
		from acorn_university_course_materials;
	end if;
    return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_cm_order() OWNER TO university;

--
-- Name: fn_acorn_university_courses_unique_name_type(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_courses_unique_name_type() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_course_name character varying(1024);
	p_course_type_id uuid;
begin
	-- BEFORE INSERT or UPDATE

	/* TODO: Unique names...
	select ugs.name, new.course_type_id into p_course_name, p_course_type_id
		from acorn_university_entities en
		inner join acorn_user_user_groups ugs on en.user_group_id = ugs.id
		where en.id = new.entity_id;
		
	if exists(select * from acorn_university_courses c
		inner join acorn_university_entities en on c.entity_id = en.id
		inner join acorn_user_user_groups ugs on en.user_group_id = ugs.id
		where ugs.name = p_course_name
		and c.course_type_id = p_course_type_id) 
	then
		raise exception 'Duplicate course name and type: %', p_course_name;
	end if;
*/
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_courses_unique_name_type() OWNER TO university;

--
-- Name: fn_acorn_university_cys_manage_hierarchy(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_cys_manage_hierarchy() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- INSERT trigger on cys
	-- Maintain CYS list under all course hierarchy nodes
	-- CASCADE on hierarchies.entity_id will handle deletion
	-- A sister trigger on hierarchies handles post-insert of course there
	insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id)
		select new.entity_id, hi.academic_year_id, hi.id
		from acorn_university_courses c
		inner join acorn_university_hierarchies hi on hi.entity_id = c.entity_id,
		acorn_university_academic_year_semesters ays
		where c.id = new.course_id
		and ays.id = new.academic_year_semester_id
		and hi.academic_year_id = ays.academic_year_id;
	return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_cys_manage_hierarchy() OWNER TO university;

--
-- Name: fn_acorn_university_delete_entity(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_delete_entity() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- AFTER delete on all leaf tables
	delete from public.acorn_university_entities
		where id = old.entity_id;
	return old;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_delete_entity() OWNER TO university;

--
-- Name: fn_acorn_university_delete_user_group(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_delete_user_group() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- AFTER delete on acorn_university_entities
	delete from public.acorn_user_user_groups
		where id = old.user_group_id;
	return old;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_delete_user_group() OWNER TO university;

--
-- Name: fn_acorn_university_enrollment_year(); Type: FUNCTION; Schema: public; Owner: sz
--

CREATE FUNCTION public.fn_acorn_university_enrollment_year() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_course_year_ordinal int;
	p_academic_year_ordinal int;
begin
	-- BEFORE INSERT on acorn_university_course_year_semesters

 	select ay.ordinal into p_academic_year_ordinal
	 	from acorn_university_academic_year_semesters ays
		inner join acorn_university_academic_years ay on ays.academic_year_id = ay.id
		where ays.id = new.academic_year_semester_id;
	-- acorn_university_course_years.name is an int
	select name into p_course_year_ordinal 
		from acorn_university_course_years 
		where id = new.course_year_id;
	
	-- If p_course_year_ordinal is 1 (1st year)
	-- then p_enrollment_academic_year_id should == p_academic_year_id
	-- If course Year >= 2nd, year of enrollment is before academic_year_id
	-- but we need to navigate by ordinals
	select id into new.enrollment_academic_year_id 
		from acorn_university_academic_years
		where ordinal <= (p_academic_year_ordinal - p_course_year_ordinal + 1)
		order by ordinal desc
		limit 1;
	return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_enrollment_year() OWNER TO sz;

--
-- Name: fn_acorn_university_entities_leaf_table(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_entities_leaf_table() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- AFTER INSERT on any leaf tables
	update acorn_university_entities
		set leaf_table = TG_TABLE_NAME
		where id = new.entity_id;
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_entities_leaf_table() OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_ascendants(uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_ascendants(p_id uuid) RETURNS uuid[]
    LANGUAGE plpgsql
    AS $$
declare 
	p_record record;
	p_ascendants uuid[] := ARRAY[]::uuid[];
begin
	-- TODO: Recursion check
	-- Returns the hierarchy.ids of all the descendants of a given hierarchy node
	for p_record in select 
			parent_id, fn_acorn_university_hierarchies_ascendants(parent_id) as ascendants
		from acorn_university_hierarchies
		where id = p_id and not parent_id is null
	loop
		p_ascendants := array_append(p_ascendants, p_record.parent_id);
		p_ascendants := array_cat(p_ascendants, p_record.ascendants);
	end loop;
	
	return p_ascendants;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_ascendants(p_id uuid) OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_create_version(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_create_version() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- BEFORE INSERT
	-- Add a new version for this entity/user_group
	insert into acorn_user_user_group_versions(user_group_id)
		select user_group_id 
			from acorn_university_entities en
			where en.id = new.entity_id
		returning id into new.user_group_version_id;

	-- new.id not present in table yet
	-- Cache values, very useful for seeding, scopes and names
	new.nest_ascendants  = fn_acorn_university_hierarchies_ascendants(new.parent_id) || new.parent_id;
	new.nest_descendants = ARRAY[]::uuid[];
	new.leaf_table       = fn_acorn_university_hierarchies_entity_leaf_type(new.entity_id);

	-- Update the nest_descendants of the ascendants
	-- to add this node
	update acorn_university_hierarchies hi
		set nest_descendants = fn_acorn_university_hierarchies_descendants(id) || new.id
		where not array_position(new.nest_ascendants, id) is null;

	-- UNIQUE
	if new.import_source = '' then new.import_source = NULL; end if;

	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_create_version() OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_delete_version(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_delete_version() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- parent_id CONSTRAINT is CASCADE DELETE

	-- Remove the associated UGV
	delete from public.acorn_user_user_group_versions
		where id = old.user_group_version_id;

	-- Update the nest_descendants of the ascendants
	-- to remove this node
	update acorn_university_hierarchies hi
		set nest_descendants = fn_acorn_university_hierarchies_descendants(id)
		where not array_position(old.nest_ascendants, id) is null;
		
	return old;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_delete_version() OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_descendants(uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_descendants(p_id uuid) RETURNS uuid[]
    LANGUAGE plpgsql
    AS $$
declare 
	p_record record;
	p_descendants uuid[] := ARRAY[]::uuid[];
begin
	-- TODO: Recursion check
	-- Returns the hierarchy.ids of all the descendants of a given hierarchy node
	for p_record in select 
			id, fn_acorn_university_hierarchies_descendants(id) as descendants
		from acorn_university_hierarchies
		where parent_id = p_id 
	loop
		p_descendants := array_append(p_descendants, p_record.id);
		p_descendants := array_cat(p_descendants, p_record.descendants);
	end loop;
	
	return p_descendants;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_descendants(p_id uuid) OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_descendants_user_cnt(uuid, integer, integer, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnt(p_id uuid DEFAULT NULL::uuid, p_nest_left integer DEFAULT NULL::integer, p_nest_depth integer DEFAULT NULL::integer, p_messages boolean DEFAULT false) RETURNS integer[]
    LANGUAGE plpgsql
    AS $$
declare
	p_record record;
	p_counts integer[];
	p_users_count int;
	p_name character varying;
	p_descendant_users_count int := 0;
begin
	-- AFTER INSERT, DELETE or UPDATE on acorn_user_user_group_version
	-- Update the whole hierarchy for this academic year
	-- recursing down from the ancestors and then updating our way back up

	if p_id is null then
		-- Special DEFAULT request to start at NULL top node
		p_nest_left  := -1;
		p_nest_depth := -1;
	else
		update acorn_university_hierarchies
			set nest_left              = coalesce(p_nest_left, 0),
				nest_depth             = coalesce(p_nest_depth, 0)
			where id = p_id;
	end if;

	-- Get the descendant count for this group version
	-- TODO: nest_left logic does not work yet. Needs to return the value
	for p_record in select id, ROW_NUMBER() over()::int as rownumber
		from acorn_university_hierarchies
		where parent_id = p_id
		or p_id is null and parent_id is null
	loop
		p_counts    := fn_acorn_university_hierarchies_descendants_user_cnt(p_record.id, p_nest_left + 1, p_nest_depth + 1, p_messages);
		p_descendant_users_count := p_descendant_users_count + coalesce(p_counts[1], 0);
		p_nest_left := p_counts[2];
	end loop;

	update acorn_university_hierarchies
		set descendant_users_count = p_descendant_users_count
		where id = p_id;

	-- Get the count for just this group version
	select coalesce(count(*), 0) into p_users_count
		from acorn_university_hierarchies hi
		inner join acorn_user_user_group_version uugv on hi.user_group_version_id = uugv.user_group_version_id
		where hi.id = p_id;

	-- Report name and counts
	select ugs.name into p_name 
		from acorn_university_hierarchies hi
		inner join acorn_user_user_group_versions ugv on hi.user_group_version_id = ugv.id
		inner join acorn_user_user_groups ugs on ugv.user_group_id = ugs.id
		where hi.id = p_id;
	if p_messages then raise notice '% users, % descendants for %', p_users_count, p_descendant_users_count, p_name; end if;

	return ARRAY[p_users_count + p_descendant_users_count, p_nest_left];
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnt(p_id uuid, p_nest_left integer, p_nest_depth integer, p_messages boolean) OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_descendants_user_cnts(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnts() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_ancestor uuid;
	p_record record;
begin
	-- This trigger runs AFTER acorn_user_user_group_version changes
	-- when a user is inserted, deleted or updated

	-- Update the whole hierarchy for the relevant year(s)
	-- recursing down from the ancestors and then updating our way back up
	for p_record in select 
			ays.name as year_name, hi_anc.id
		from acorn_university_hierarchies hi 
		inner join acorn_university_academic_years ays on hi.academic_year_id = ays.id
		inner join acorn_university_hierarchies hi_anc 
			on hi_anc.parent_id is null and hi_anc.academic_year_id = ays.id
		where hi.user_group_version_id = new.user_group_version_id
	loop
		raise notice '--- Begin Hierarchy updates to %', p_record.year_name;
		perform fn_acorn_university_hierarchies_descendants_user_cnt(p_record.id);
		raise notice '--- Finished Hierarchy updates';
	end loop;

	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnts() OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_entity_leaf_type(uuid, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_entity_leaf_type(p_entity_id uuid, p_throw_invalid boolean DEFAULT true) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
declare
	p_leaf_type character varying(1024);
begin
	if p_entity_id is null then raise exception 'Entity ID not specified'; end if;

	select case
		when exists(select * from acorn_university_course_year_semesters where entity_id = p_entity_id) then 'acorn_university_course_year_semesters'
		when exists(select * from acorn_university_courses where entity_id = p_entity_id) then 'acorn_university_courses'
		when exists(select * from acorn_university_departments where entity_id = p_entity_id) then 'acorn_university_departments'
		when exists(select * from acorn_university_education_authorities where entity_id = p_entity_id) then 'acorn_university_education_authorities'
		when exists(select * from acorn_university_faculties where entity_id = p_entity_id) then 'acorn_university_faculties'
		when exists(select * from acorn_university_schools where entity_id = p_entity_id) then 'acorn_university_schools'
		when exists(select * from acorn_university_universities where entity_id = p_entity_id) then 'acorn_university_universities'
		else NULL
	end into p_leaf_type;

	if p_leaf_type is null and p_throw_invalid then 
		raise exception 'Entity leaf table for % not registered', p_entity_id; 
	end if;
	
	return p_leaf_type;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_entity_leaf_type(p_entity_id uuid, p_throw_invalid boolean) OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_manage_cys(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_manage_cys() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_type_id uuid;
begin
	-- AFTER INSERT trigger on hierarchies
	-- Maintain CYS list under all course hierarchy nodes
	-- CASCADE on hierarchies.entity_id will handle deletion
	-- A sister trigger on cys handles post-insert of cys there
	select id into p_type_id from acorn_university_courses 
		where entity_id = new.entity_id;
	if not p_type_id is null then
		-- It is a course node
		-- Add all its CYS nodes underneath with new (triggered) user group versions
		-- for the Academic Year
		-- tr/fn_acorn_university_hierarchies_new_version() will complete the new user_group_version_id
		-- BEFORE this INSERT
		insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id)
			select cys.entity_id, new.academic_year_id, new.id
			from acorn_university_course_year_semesters cys
			inner join acorn_university_academic_year_semesters ays on cys.academic_year_semester_id = ays.id
			where cys.course_id = p_type_id
			and not cys.entity_id = new.entity_id -- This should not happen, but just in case
			and ays.academic_year_id = new.academic_year_id;
	end if;
	
	select id into p_type_id from acorn_university_course_year_semesters 
		where entity_id = new.entity_id;
	if not p_type_id is null then
		-- It is a CYS
		-- If it has existing seminars (events) with no user groups
		-- then set the user groups to the newly created one from the hierarchy
		update acorn_calendar_event_parts
			set user_group_version_id = new.user_group_version_id
			where id in(
				select ep.id from acorn_calendar_event_parts ep
				inner join acorn_university_lectures l on l.event_id = ep.event_id
				inner join acorn_university_course_materials cm on l.course_material_id = cm.id
				where cm.course_year_semester_id = p_type_id
				and ep.user_group_version_id is null
			);
	end if;

	return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_manage_cys() OWNER TO university;

--
-- Name: fn_acorn_university_hierarchies_update_version(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchies_update_version() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- BEFORE UPDATE on acorn_university_hierarchies
	-- new.id is present in table
	-- Cache values, very useful for seeding, scopes and names
	if old.parent_id != new.parent_id then
		new.nest_ascendants  = fn_acorn_university_hierarchies_ascendants(new.parent_id) || new.parent_id;
		
		-- Update the nest_descendants of the new ascendants
		-- to add this node
		update acorn_university_hierarchies hi
			set nest_descendants = fn_acorn_university_hierarchies_descendants(hi.id)
			where not array_position(new.nest_ascendants, hi.id) is null
			and not hi.id = new.id;

		-- Update the nest_descendants of the old ascendants
		-- to remove this node
		update acorn_university_hierarchies hi
			set nest_descendants = fn_acorn_university_hierarchies_descendants(hi.id)
			where not array_position(old.nest_ascendants, hi.id) is null
			and not hi.id = new.id;
	end if;

	if old.entity_id != new.entity_id then
		new.leaf_table = fn_acorn_university_hierarchies_entity_leaf_type(new.entity_id);
	end if;

	-- UNIQUE
	if new.import_source = '' then new.import_source = NULL; end if;
	
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchies_update_version() OWNER TO university;

--
-- Name: fn_acorn_university_hierarchy_lock_event(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_hierarchy_lock_event() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_hi_count int;
	p_user_group_version_id uuid;
begin
	-- AFTER INSERT into public.acorn_university_hierarchy_event
	-- event_id NOT NULL
	-- Sync event user_group_version
	update acorn_calendar_event_parts 
		set user_group_version_id = (
			select user_group_version_id 
			from acorn_university_hierarchies
			where id = new.hierarchy_id
		),
		user_group_version_locked_external = true
		where event_id = new.event_id
		and user_group_version_id is null;

	return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_hierarchy_lock_event() OWNER TO university;

--
-- Name: fn_acorn_university_import_source_empty(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_import_source_empty() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
	begin
        if new.import_source = '' then new.import_source = NULL; end if;
        return new;
	end;
$$;


ALTER FUNCTION public.fn_acorn_university_import_source_empty() OWNER TO university;

--
-- Name: fn_acorn_university_lecture_sync_lock_event(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_lecture_sync_lock_event() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_hi_count int;
	p_hi_1 uuid;
	p_hi_self_and_nest_ascendants uuid[];
	p_user_group_version_id uuid;
	p_default_calendar_id uuid;
	p_default_calendar uuid = 'ceea8856-e4c8-11ef-8719-5f58c97885a2'::uuid;
begin
	-- AFTER INSERT into public.acorn_university_lectures
	-- On Create lecture, sync user_group_id and lock it
	-- event_id NOT NULL

	-- TODO: What if the course year semester appears in more than 0|>1 place in the hierarchy
	-- with different user groups!!!
	-- Probably should be foreign attached to the hierarchies table in future
	select count(*) into p_hi_count
		from acorn_university_course_materials cm
		inner join acorn_university_course_year_semesters cys on cm.course_year_semester_id = cys.id
		inner join acorn_university_entities en on cys.entity_id = en.id
		inner join acorn_university_hierarchies hi on hi.entity_id = en.id
		where cm.id = new.course_material_id;

	-- If there are no associated user_group_version yet
	-- then leave it because
	-- a sister trigger on hierarchies will update the events when it is added
	if p_hi_count > 1 then
		raise exception 'Multiple User Groups not supported yet for the event';
	elsif p_hi_count = 1 then
		-- Provision first only
		select hi.user_group_version_id, hi.id, array_prepend(hi.id, hi.nest_ascendants)
			into p_user_group_version_id, p_hi_1, p_hi_self_and_nest_ascendants
			from acorn_university_course_materials cm
			inner join acorn_university_course_year_semesters cys on cm.course_year_semester_id = cys.id
			inner join acorn_university_entities en on cys.entity_id = en.id
			inner join acorn_university_hierarchies hi on hi.entity_id = en.id
			where cm.id = new.course_material_id;

		-- Sync event user_group_version
		update acorn_calendar_event_parts 
			set user_group_version_id = p_user_group_version_id
			where event_id = new.event_id;

		-- TODO: Sync user additions and removals

		-- Sync calendar
		select hi.default_calendar_id into p_default_calendar_id
			-- Start with the array for correct ordering
			-- closest ascendant first
			from unnest(p_hi_self_and_nest_ascendants)
			inner join acorn_university_hierarchies hi on hi.id = unnest
			where not default_calendar_id is null
			limit 1;
		-- It is possible that there is none
		-- in which case we leave it in default calendar
		if not p_default_calendar_id is null then
			update acorn_calendar_events 
				set calendar_id = p_default_calendar_id
				where id = new.event_id
				-- Let's not change it if they set a specific one
				and calendar_id = p_default_calendar;
		end if;
	end if;
		
	-- Always lock the event user_group_version, even if NULL
	update acorn_calendar_event_parts 
		set user_group_version_locked_external = true
		where event_id = new.event_id;

	return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_lecture_sync_lock_event() OWNER TO university;

--
-- Name: fn_acorn_university_legacy_import_bakeloria_v1(boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous boolean DEFAULT true, p_messages boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
	-- Import Bakeloria students from a legacy university-acceptance database
	-- for a given source-target year
	--   university_mofadala_baccalaureate_marks => bakeloria students only (no university_mofadala_students entry)
	p_use_counties_as_schools boolean := true;
	p_bakeloria_academic_year_id uuid;
	p_bakeloria_source_year_simple_name character varying(1024);
	p_bakeloria_source_year_name character varying(1024);
	p_bakeloria_academic_year_name character varying(1024);
	p_bakeloria_semester1 uuid;
	p_material_type_normal_id uuid := '6b4bae9a-149f-11f0-a4e5-779d31ace22e'::uuid;
	p_course_year_id uuid := '5afc781c-2b47-11f0-bc2a-0bdc97d6ed09'::uuid;
	p_jineologi_material uuid := 'd88f0f6e-2bd9-11f0-8846-8bc9dcb96017'::uuid;
	p_exam_theory_id uuid := '0816bbee-2bdd-11f0-8400-57e43cb8bcc9'::uuid;
	p_bakeloria_materials uuid[];
	p_pass_min int := 40; -- TODO: Make this come from the spreadsheet
	p_year_10_entity_id uuid := '68054916-5190-11f0-bc03-7fbd63763efa'::uuid;
	p_year_11_entity_id uuid := '68054952-5190-11f0-bc04-73801473724c'::uuid;
	p_year_9_entity_id uuid := '6805498e-5190-11f0-bc05-f77ff88dbc17'::uuid;

	-- Inserting
	p_uuid uuid;
	p_uuids uuid[];
	p_hi_uuids uuid[];
	p_created_by_user_id uuid;
	p_imported character varying(1024);
	p_imported_like character varying(1024);
	
	-- Education Authorities (university_category) hierarchy entries (checked below)
	p_top_node_entity_id   uuid := '5a722502-2cfc-11f0-8fc6-4f662cb2699a'::uuid;
	-- Lazy created for year
	p_bakeloria_hi_top_level_node uuid;  -- Bakeloria year TLN
	p_bakeloria_hi_org_edu_node uuid;    -- Bakeloria hierarchy authority

	-- Addresses (required, checked below)
	p_area_type_city    uuid := '1ecf9d88-e963-4563-9dea-d9ef246977eb'::uuid;
	p_area_type_village uuid := '4c09bda0-32fe-41da-933e-d7fc441e15ce'::uuid;
	p_area_type_town    uuid := '4eb637b9-7a39-4c90-9308-8c01929b019c'::uuid;
	p_area_type_canton  uuid := '558b28b3-46b3-4e4e-84ce-021376882018'::uuid;
	p_area_type_country uuid := '8dfda3c6-3f2c-4a3a-a72a-f4e9391dd282'::uuid;
	p_area_type_commune uuid := 'b3de00b7-c169-40d5-9546-4d5f5715b014'::uuid;

	-- Course Type (seeded, checked below)
	p_course_type_high_school   uuid := 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid;
	p_course_type_high_school_year uuid := '801fb8af-5ed3-4436-b89e-9151e9558c24'::uuid;
	p_course_type_middle_school uuid := '65ddc034-4e96-11f0-91c1-3f7ba40fcde3'::uuid;
	
	-- Misc
	p_syrian_nation_identity_type_id uuid := 'd9f5affa-4873-11f0-8711-cb311b854057'::uuid;
begin
	p_created_by_user_id := fn_acorn_user_get_seed_user();

	-- Check course types are seeded
	if not exists(select * from public.acorn_university_course_types where id = p_course_type_high_school) then
		raise exception 'Course type High School does not exist';
	end if;
	if not exists(select * from public.acorn_university_course_types where id = p_course_type_high_school_year) then
		raise exception 'Course type High School Year does not exist';
	end if;

	-- Let's check we have registered source data!
	if exists(
		select * from university_mofadala_baccalaureate_marks bm where not certificate_language in('Arabic', 'Kurdish')
	) then 
		raise exception 'Un-registered certificate languages';
	end if;
	if exists(
		select * from university_mofadala_baccalaureate_marks bm
			where not exists(
				select * from university_mofadala_type_certificates ct where bm.certificate = ct.name
			)
	) then 
		raise exception 'Un-registered certificate names(university_mofadala_type_certificates) in university_mofadala_baccalaureate_marks';
	end if;

	-- Bakeloria target processing years from university-acceptance database
	--   **2024 (Mofadala) => Bakeloria results end of 2023-2024, Mofadala beginning 2024-2025
	--     2025 (Mofadala) => Bakeloria results end of 2024-2025, Mofadala beginning 2025-2026
	select my.name, (my.name::int - 1) || '-' || my.name -- 2024 => 2023-2024
		into p_bakeloria_source_year_simple_name, p_bakeloria_source_year_name
		from university_mofadala_mofadala_years my
		where my.is_active;
	if p_bakeloria_source_year_name is null then raise exception 'Active Source Bakeloria year not found'; end if;
	if p_messages then raise notice 'Source Bakeloria year: % => %', p_bakeloria_source_year_simple_name, p_bakeloria_source_year_name; end if;
	select id, name into p_bakeloria_academic_year_id, p_bakeloria_academic_year_name
		from acorn_university_academic_years ay
		where ay.name = p_bakeloria_source_year_name;
	if p_bakeloria_academic_year_id is null then raise exception 'Bakeloria target year % not found', p_bakeloria_source_year_name; end if;
	if p_messages then raise notice 'Bakeloria year: %', p_bakeloria_academic_year_name; end if;

	p_imported      := 'Import-v1 from Bakeloria year ' || p_bakeloria_academic_year_name;
	p_imported_like := p_imported || '%';
	if p_messages then raise notice 'Import like: %', p_imported_like; end if;
	select ays.id into p_bakeloria_semester1 
		from acorn_university_academic_year_semesters ays
		inner join acorn_university_semesters sem on ays.semester_id = sem.id
		where academic_year_id = p_bakeloria_academic_year_id
		and sem.ordinal = 1;
	if p_bakeloria_semester1 is null then raise exception 'Bakeloria target year % has no semester 1', p_bakeloria_academic_year_name; end if;

	if p_delete_previous then
		-- ######################################### DELETE PREVIOUS
		-- This will cascade to entities, leafs and hierarchies
		if p_messages then raise notice 'Begin delete of previously imported data for %...', p_imported_like; end if;
		delete from acorn_user_users             where import_source like(p_imported_like);
		delete from acorn_user_user_groups       where import_source like(p_imported_like);
		delete from acorn_location_addresses     where import_source like(p_imported_like);
		update      acorn_location_areas set parent_area_id = NULL where import_source like(p_imported_like);
		delete from acorn_location_areas         where import_source like(p_imported_like);
		-- Remove the persistent Year 9,10,11 course materials for this year
		delete from acorn_university_course_materials where academic_year_semester_id = p_bakeloria_semester1 
			and course_id in(select id from acorn_university_courses where entity_id in(p_year_10_entity_id, p_year_11_entity_id, p_year_9_entity_id));
		if p_messages then raise notice 'Deleted previously imported data for %', p_imported_like; end if;
	end if;

	-- ######################################### Top Level Node EA for Rojava
	-- no parent
	if not exists(select * from acorn_university_entities where id = p_top_node_entity_id) then 
		-- user group
		insert into acorn_user_user_groups(name, code) values('Rojava Education Authority', 'EATLN')
			returning id into p_uuid;
		-- entity
		insert into acorn_university_entities(id, user_group_id, created_by_user_id)
			values(p_top_node_entity_id, p_uuid, p_created_by_user_id);
		-- TLN Education Authority
		insert into acorn_university_education_authorities(entity_id) values(p_top_node_entity_id);
		if p_messages then raise notice 'TLN Education Committee inserted'; end if;
	end if;
	-- Hierarchy for this year (lazy create)
	select id into p_bakeloria_hi_top_level_node 
		from acorn_university_hierarchies 
		where entity_id = p_top_node_entity_id 
		and academic_year_id = p_bakeloria_academic_year_id
		and parent_id is null;
	if p_bakeloria_hi_top_level_node is null then
		insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id, created_by_user_id, import_source)
			values(p_top_node_entity_id, p_bakeloria_academic_year_id, NULL, p_created_by_user_id, p_imported || ' ea:' || p_bakeloria_academic_year_name)
			returning id into p_bakeloria_hi_top_level_node;
		if p_messages then raise notice '% Top Level Node Education Authority hierarchy inserted', p_bakeloria_academic_year_name; end if;
	else
		if p_messages then raise notice '% Top Level Node Education Authority hierarchy found', p_bakeloria_academic_year_name; end if;
	end if;

	-- ######################################### Bakeloria
	-- Source table only: university_mofadala_baccalaureate_marks
	-- in order of appearance:
	--   county:               Firat, Tepqa, Reqa, şehba, Cizîrê
	--   code:                 Should be same as students table
	--   certificate:          Science, Literature, etc. (=> students.type_certificate_id 1|2)
	--   place_and_date_of_birth: 12/08/2006 عاموده, Serê Kaniyê 04/01/2003, etc.
	--   total_mark:           double precision
	--   avg:                  double precision
	--   certificate_language: Kurdish, Arabic           (=> students.certificate_language_id 1|2)
	--   result:               Binket, serket, Serket, Serkeftî
	-- <material columns * x>, likely to change!:
	--   Languages:  kurdish_language, english_language, arabic_language
	--   Literature: science_of_woman, history, geography, philosophy, sociology, 
	--   Science:    chemistry, physics, math, biology
	
	-- ######################################### Schools (counties/schools)
	if p_use_counties_as_schools then
		-- School for each county only
		with inserted as (
			insert into acorn_user_user_groups(name, code, import_source)
				select initcap(bm.name), fn_acorn_user_code(name), 
					p_imported || ' university_mofadala_baccalaureate_marks(county school):' || initcap(bm.name)
				from (
					select distinct(county) as name
					from university_mofadala_baccalaureate_marks
				) bm
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% School (counties) User Groups inserted', array_upper(p_uuids, 1); end if;

		-- Entities
		with inserted as (
			insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
				select ugs.id, p_created_by_user_id, ugs.import_source
				from acorn_user_user_groups ugs
				inner join unnest(p_uuids) on ugs.id = unnest
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% School (counties) Entities inserted', array_upper(p_uuids, 1); end if;

		-- Schools
		with inserted as (
			insert into acorn_university_schools(entity_id)
				select unnest from unnest(p_uuids)
				returning id
		)
			select array_agg(inserted.id) into p_hi_uuids from inserted;
		if p_messages then raise notice '% Schools inserted', array_upper(p_hi_uuids, 1); end if;

		-- Place them under the  top level for now
		-- TODO: Place them under the correct EA
		with inserted as (
			insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id, import_source, created_by_user_id)
				select en.id, p_bakeloria_academic_year_id, p_bakeloria_hi_top_level_node, en.import_source, p_created_by_user_id 
				from acorn_university_entities en
				inner join unnest(p_uuids) on en.id = unnest
				returning id
		)
			select array_agg(inserted.id) into p_hi_uuids from inserted;
		if p_messages then raise notice '% Schools inserted into hierarchy', array_upper(p_hi_uuids, 1); end if;
	
		-- ######################################### Year 12 Courses (Bakeloria from Schools)
		-- university_mofadala_type_certificates => Courses
		-- These repeat in different schools (counties)
		-- required for the Mofadala desires also
		-- Science, Literature, etc.
		-- p_course_type_middle_school uuid := '65ddc034-4e96-11f0-91c1-3f7ba40fcde3'::uuid;
		-- p_course_type_high_school := 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid;
		-- Example: 
		--   "Science"
		--   "Literature"
		--   "Economics"
		--   "Agriculture"
		--   "Medical"
		--   "Apprentice - Computer"
		--   "Apprentice - Mechanical"
		--   "Apprentice - Electronic"
		--   "Apprentice - Electrical"
		WITH inserted as (
			insert into acorn_user_user_groups(name, code, description, import_source)
				select initcap(ct.name), 
					'B' 
					|| fn_acorn_user_code(county.name)
					|| fn_acorn_user_code(replace(replace(ct.name, 
						'Electrical', 'L'), 
						'Apprentice - ', 'AP')
					), 
					ct.name || ' course ' || ' for ' || county.name,
					p_imported || ' university_mofadala_type_certificates:' || ct.id || ' county:' || initcap(county.name)
				from university_mofadala_type_certificates ct,
				(
					select distinct(county) as name
					from university_mofadala_baccalaureate_marks
				) county
				returning id
			)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Bakeloria Course User Groups inserted (for each county)', array_upper(p_uuids, 1); end if;
	
		WITH inserted as (
			insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
				select ugs.id, p_created_by_user_id, ugs.import_source
				from acorn_user_user_groups ugs
				inner join unnest(p_uuids) on ugs.id = unnest
				returning id
			)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Bakeloria Course Entities inserted', array_upper(p_uuids, 1); end if;
	
		WITH inserted as (
			insert into acorn_university_courses(entity_id, course_type_id)
				select unnest, p_course_type_high_school -- High School
				from unnest(p_uuids)
				returning id
			)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Bakeloria Courses inserted', array_upper(p_uuids, 1); end if;

		-- Place each bakeloria courses under its county school
		-- This always needs to happen, will be linked to the previous year, next year
		-- UNIQUE: entity, parent, year unique. Also import_source
		with inserted as (
			insert into acorn_university_hierarchies(academic_year_id, created_by_user_id, entity_id, parent_id, import_source)
				select p_bakeloria_academic_year_id, p_created_by_user_id,
					en_cs.id, hi.id, en_cs.import_source
				from 
				-- Bakeloria Courses
				acorn_university_entities en_cs
				inner join acorn_university_courses cs 
					on cs.entity_id = en_cs.id and cs.course_type_id = p_course_type_high_school,
					-- import_source: p_imported || ' university_mofadala_type_certificates:' || ct.id || ' county:' || initcap(county.name)
				-- Schools for this year
				acorn_university_hierarchies hi
				inner join acorn_university_entities en_sc on hi.entity_id = en_sc.id
				inner join acorn_user_user_groups ugs_sc on ugs_sc.id = en_sc.user_group_id
				inner join acorn_university_schools sch 
					on en_sc.id = sch.entity_id
					-- import_source: p_imported || ' university_mofadala_baccalaureate_marks(county school):' || initcap(bm.name)
				-- Where the course(cs) is for the school(sc)
				where en_cs.import_source like('% county:' || ugs_sc.name) 
					and hi.academic_year_id = p_bakeloria_academic_year_id
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Bakeloria courses attatched to schools in hierarchy', array_upper(p_uuids, 1); end if;

		-- Year 10, 11, 9: Check/create exists
		-- Static, non-repeating, 1 off, seeded courses
		insert into acorn_user_user_groups(id, name, code, description) values
			('680546dc-5190-11f0-bc00-2b9974d04458'::uuid, 'Year 10', 'Y10', '1st year of High School'),
			('6805488a-5190-11f0-bc01-dbc094fbb388'::uuid, 'Year 11', 'Y11', '2nd year of High School'),
			('680548d0-5190-11f0-bc02-fff4f307a4bb'::uuid, 'Year 9',  'Y09', 'Last year of Middle School')
			on conflict(id) do nothing;
		insert into acorn_university_entities(id, user_group_id, created_by_user_id) values
			(p_year_10_entity_id, '680546dc-5190-11f0-bc00-2b9974d04458'::uuid, p_created_by_user_id),
			(p_year_11_entity_id, '6805488a-5190-11f0-bc01-dbc094fbb388'::uuid, p_created_by_user_id),
			(p_year_9_entity_id,  '680548d0-5190-11f0-bc02-fff4f307a4bb'::uuid, p_created_by_user_id)  
			on conflict(id) do nothing;
		insert into acorn_university_courses(id, entity_id, course_type_id) values
			('680549ca-5190-11f0-bc06-3b2810ca3733'::uuid, p_year_10_entity_id, p_course_type_high_school_year),
			('68054a1a-5190-11f0-bc07-5b0366195244'::uuid, p_year_11_entity_id, p_course_type_high_school_year),
			('68054a56-5190-11f0-bc08-57f3e412fee2'::uuid, p_year_9_entity_id,  p_course_type_middle_school) -- *** Middle School!
			on conflict(id) do nothing;
		-- Place these single courses under every school
		with inserted as (
			insert into acorn_university_hierarchies(academic_year_id, entity_id, parent_id, created_by_user_id, import_source)
				select p_bakeloria_academic_year_id, en_cs.id, hi_sc.id, 
					p_created_by_user_id, en_sc.import_source || ' Course:' || ugs_cs.name
					from 
					-- Year 10,11,9
					acorn_university_entities en_cs
					inner join acorn_university_courses cs 
						on cs.entity_id = en_cs.id and cs.course_type_id in(p_course_type_high_school_year, p_course_type_middle_school)
					inner join acorn_user_user_groups ugs_cs   on ugs_cs.id = en_cs.user_group_id,
					-- Schools
					acorn_university_hierarchies hi_sc
					inner join acorn_university_entities en_sc on hi_sc.entity_id = en_sc.id
					inner join acorn_user_user_groups ugs_sc   on ugs_sc.id = en_sc.user_group_id
					inner join acorn_university_schools sch    on en_sc.id = sch.entity_id
					
					where hi_sc.academic_year_id = p_bakeloria_academic_year_id
					and en_cs.id in(p_year_10_entity_id, p_year_11_entity_id, p_year_9_entity_id)
					and en_sc.import_source like(p_imported || ' university_mofadala_baccalaureate_marks(county school):%')
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Year 9,10,11 courses attatched to schools in hierarchy', array_upper(p_uuids, 1); end if;
	else
		-- school column
		raise exception 'Not supported';

		/*
		with inserted as (
			insert into acorn_user_user_groups(name, code, import_source)
				select initcap(bm.name) || ' school', fn_acorn_user_code(name), p_imported || ' university_mofadala_baccalaureate_marks(county school):' || bm.name
				from (
					select distinct(school) as name
					from university_mofadala_baccalaureate_marks
				) bm
				on conflict do nothing
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% School (counties) User Groups inserted', array_upper(p_uuids, 1); end if;

		with inserted as (
			insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
				select ugs.id, p_created_by_user_id, ugs.import_source
				from acorn_user_user_groups ugs
				inner join unnest(p_uuids) on ugs.id = unnest
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% School Entities inserted', array_upper(p_uuids, 1); end if;

		-- Schools
		with inserted as (
			insert into acorn_university_schools(entity_id)
				select unnest from unnest(p_uuids)
				returning id
		)
			select array_agg(inserted.id) into p_hi_uuids from inserted;
		if p_messages then raise notice '% Schools inserted', array_upper(p_hi_uuids, 1); end if;
		*/
	end if;

	-- ######################################### Students
	-- university_mofadala_baccalaureate_marks: bakeloria code, father_name & mother_name, full_name, place_and_date_of_birth
	
	-- TODO: Sounds like check on names for duplicates
	/*
	select count(*) from university_mofadala_baccalaureate_marks bm
		where exists(select * from acorn_user_users 
			where u.name || ' ' || u.surname sounds_like(bm.full_name)
		);
	*/

	-- INSERT
	WITH inserted as (
		insert into acorn_user_users(
			username, "password",
			"name", surname, birth_date, 
			fathers_name, mothers_name, 
			-- Special, temporary during import:
			import_source
		)
			select
				bm.id::text, -- username: 453
				regexp_replace(gen_random_uuid()::text, '.*-', ''),
				case -- name (first_name)
					when certificate_language = 'Arabic'  then regexp_replace(bm.full_name, '^.* ', '')
					else regexp_replace(bm.full_name, ' .*$', '')
				end,
				case -- surname (last_name)
					when certificate_language = 'Arabic'  then regexp_replace(bm.full_name, ' [^ ]*$', '')
					else regexp_replace(bm.full_name, '^[^ ]* ', '')
				end,
				-- TODO: Old place_and_date_of_birth
				-- regexp_replace(regexp_replace(bm.place_and_date_of_birth, '\.', '/', 'g'), '[^0-9/]', '', 'g')::timestamp,
				NULL,
				bm.father_name, bm.mother_name, 
				p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			from university_mofadala_baccalaureate_marks bm
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria Student Users inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_university_students(
				user_id, import_source,
				-- Legacy & from university_mofadala_baccalaureate_marks
				legacy_import_id, legacy_import_result, legacy_import_avg, legacy_import_total_mark,
				-- Legacy & from new university_mofadala_baccalaureate_marks columns
				legacy_import_final_avg, legacy_import_passed_primaries, legacy_import_passed_secondaries, legacy_import_attendance,
				-- TODO: for later
				import_school, import_qeyd, import_student_type
			)
			select u.id, u.import_source,
				-- Legacy & from university_mofadala_baccalaureate_marks
				bm.id, bm.result, bm.avg, bm.total_mark,
				-- Legacy & from new university_mofadala_baccalaureate_marks columns
				bm.avg, NULL, NULL, 
					(select sum(unnest) from
						unnest(ARRAY[
							(coalesce(kurdish_language, 0) != 0)::int,
							(coalesce(english_language, 0) != 0)::int,
							(coalesce(arabic_language, 0) != 0)::int,
							(coalesce(science_of_woman, 0) != 0)::int,
							(coalesce(history, 0) != 0)::int,
							(coalesce(geography, 0) != 0)::int,
							(coalesce(philosophy, 0) != 0)::int,
							(coalesce(sociology, 0) != 0)::int,
							(coalesce(math, 0) != 0)::int,
							(coalesce(biology, 0) != 0)::int,
							(coalesce(chemistry, 0) != 0)::int,
							(coalesce(physics, 0) != 0)::int,
							(coalesce(community_language, 0) != 0)::int
						]))::int as attendance,
				-- TODO: for later
				NULL, NULL, 'irregular'
			from acorn_user_users u,
				university_mofadala_baccalaureate_marks bm
				where u.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria Students inserted', array_upper(p_uuids, 1); end if;

	-- Language, matched by name
	-- seeded
	-- '9eaa5c4d-9080-4799-afa7-3741349b5beb', 'English',  'en'
	-- '9eaa5c43-db07-4597-ac8c-156253e84376', 'Kurdish',  'ku'
	-- '40aafb9e-41e2-11f0-8065-f75fd6b290d7', 'Arabic',   'ar'
	-- '488cb15e-50f6-11f0-8a5f-3b0d113e458b', 'French',   'fr'
	-- '306e04b6-50f5-11f0-a082-e3e55c5baecd', 'Syriac',   'su'
	-- '306e0826-50f5-11f0-a083-6b25e90008a2', 'Assyrian', 'as'
	WITH inserted as (
		insert into acorn_user_user_languages(user_id, language_id)
			SELECT s.user_id, l.id 
				FROM university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_languages l on l.name = bm.certificate_language
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Languages inserted', array_upper(p_uuids, 1); end if;

	-- Notes
	WITH inserted as (
		insert into acorn_university_student_notes(name, description, 
			student_id, entity_id, created_by_user_id
		)
			select 'Import', p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id, 
					s.id, p_top_node_entity_id, p_created_by_user_id
				FROM university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Notes inserted', array_upper(p_uuids, 1); end if;
		
	-- Inject old bakeloria code, owned by the Top level Education Committee
	WITH inserted as (
		insert into acorn_university_student_codes(student_id, entity_id, code, "current", created_by_user_id)
			select s.id, p_top_node_entity_id, bm.code, true, p_created_by_user_id
			FROM university_mofadala_baccalaureate_marks bm
			inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria Codes inserted', array_upper(p_uuids, 1); end if;

	-- ######################################### Special status
	-- families_of_martyrs:           021c0f46-3b96-11f0-add5-1fdf3952358b
	-- families_of_martyrs_brother:   9b7bab3e-5102-11f0-9cd9-7fb657bb3130
	-- families_of_martyrs_sister:    9b7baeb8-5102-11f0-9cda-bffc4b023c0d
	-- families_of_martyrs_son:       9b7bb020-5102-11f0-9cdb-93d38f211b1c
	-- families_of_martyrs_daughter:  9b7bb0fc-5102-11f0-9cdc-9b34ab0a8820
	-- families_of_martyrs_father:    9b7bb1ba-5102-11f0-9cdd-e70ab0372790
	-- families_of_martyrs_mother:    9b7bb278-5102-11f0-9cde-6796eef88af5
	-- families_of_martyrs_uncle:     9b7bb35e-5102-11f0-9cdf-0344f140c200
	-- families_of_martyrs_aunt:      9b7bb426-5102-11f0-9ce0-cbc33fff389d
	-- from_the_occupied_territories: 021c1022-3b96-11f0-add6-9b77f9e97678
	-- he_served_in_the_army:         021c104a-3b96-11f0-add7-bf3af6dabafb
	-- need_housing:                  021c1068-3b96-11f0-add8-a7fe27552a6d
	-- Bakeloria:
	--   TODO: family_of_martrys: boolean
	--   TODO: kinship: brother|sister|father|mother|uncle|aunt|son|daughter
	/*
	WITH inserted as (
		insert into acorn_university_student_status(student_id, student_status_id)
			select s.id, st.id
				FROM university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_university_student_statuses st on st.name = 'Family Of Martrys ' || bm.kinship -- TODO: 
			returning student_id
		)
		select array_agg(inserted.student_id) into p_uuids from inserted;
	if p_messages then raise notice '% Students families_of_martyrs statuses inserted', array_upper(p_uuids, 1); end if;
	*/
	
	-- ######################################### Students => Bakeloria courses 
	-- in their counties, for their specialization
	-- year: p_bakeloria_academic_year_id
	WITH inserted as (
		insert into acorn_user_user_group_version(user_group_version_id, user_id)
			select hi.user_group_version_id, u.id
				-- Courses
				from acorn_university_hierarchies hi
				inner join acorn_university_entities en_cs on en_cs.id = hi.entity_id
				inner join acorn_user_user_groups ugs_cs   on ugs_cs.id = en_cs.user_group_id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Schools
				inner join acorn_university_hierarchies hiP on hi.parent_id = hiP.id
				inner join acorn_university_entities en_sc on en_sc.id = hiP.entity_id
				inner join acorn_user_user_groups ugs_sc   on ugs_sc.id = en_sc.user_group_id
				inner join acorn_university_schools sc on sc.entity_id = en_sc.id,
				-- Imported Students with bm.certificate (=>ct.id)
				university_mofadala_baccalaureate_marks bm
				inner join acorn_user_users u on u.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				
				where hi.academic_year_id = p_bakeloria_academic_year_id
				-- School (county)
				and ugs_sc.name = initcap(bm.county)
				-- Courses Year 10,11,9 and specialization (Science, Literature, etc.)
				-- Year 10,11,9 have no import_source
				and (initcap(bm.certificate) = ugs_cs.name or en_cs.id in(p_year_11_entity_id, p_year_10_entity_id, p_year_9_entity_id))
				and cs.course_type_id in(p_course_type_high_school, p_course_type_high_school_year, p_course_type_middle_school)
			returning user_id
		)
		select array_agg(inserted.user_id) into p_uuids from inserted;
	if p_messages then raise notice '% Students placed on to Year 12 distributed and 11,10,9 static Bakeloria courses in schools', array_upper(p_uuids, 1); end if;

	-- ######################################### Materials & Course materials
	-- These materials should be seeded, but we add just in case
	-- we assume the material type
	-- Literature (adabi) & Science (el) Bakeloria, etc.
	WITH inserted as (
		insert into acorn_university_materials(id, name, description, material_type_id, created_by_user_id)
			select 'cdc800ae-28be-11f0-a8a6-334555029afd'::uuid, 'Math',       NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'd675a530-28be-11f0-a2c9-9bb10fa15bd3'::uuid, 'Biology',    NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'dd494c0e-28be-11f0-94e1-a7b2083dd749'::uuid, 'Physics',    NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'e427a282-28be-11f0-8856-a7abd8a449c5'::uuid, 'Geography',  NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'ecf3dae8-28be-11f0-91f7-f31527b6ca23'::uuid, 'Chemistry',  NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'f3c853a8-28be-11f0-8938-73b157eb85a1'::uuid, 'Kurdish',    NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'fa61ead0-28be-11f0-9fb3-2bbf7e1c7c7c'::uuid, 'English',    NULL, p_material_type_normal_id, p_created_by_user_id union all
			select '005bba60-28bf-11f0-bf7f-cff663f8102b'::uuid, 'Arabic',     NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'd43af2a2-2bd9-11f0-b08b-5fd59b502470'::uuid, 'History',    NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'd8168f4e-2bd9-11f0-97a5-1b42cf640b5b'::uuid, 'Philosophy', NULL, p_material_type_normal_id, p_created_by_user_id union all
			select 'd84f8434-2bd9-11f0-bfa1-7b92380571bd'::uuid, 'Sociology',  NULL, p_material_type_normal_id, p_created_by_user_id union all
			select p_jineologi_material, 'Jineologi',  NULL, p_material_type_normal_id, p_created_by_user_id union all
			-- New
			select 'b025cfe2-50f3-11f0-96d9-13090f80441e'::uuid, 'Community Language',  NULL, p_material_type_normal_id, p_created_by_user_id union all
			-- Year 10,11 Bakeloria
			select '7f5c3dc8-2e53-11f0-8600-6ff513625846'::uuid, 'Year 10',    NULL, p_material_type_normal_id, p_created_by_user_id union all
			select '7f5c4156-2e53-11f0-8601-43470f236a9e'::uuid, 'Year 11',    NULL, p_material_type_normal_id, p_created_by_user_id union all
			-- Year 9 Middle school
			select 'ee22cafe-502e-11f0-90c2-3702c192c6ec'::uuid, 'Year 9',     NULL, p_material_type_normal_id, p_created_by_user_id
			on conflict(id) do nothing
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice 'Bakeloria materials checked, % inserted', array_upper(p_uuids, 1); end if;

	-- Year 12 materials only
	p_bakeloria_materials = ARRAY['cdc800ae-28be-11f0-a8a6-334555029afd'::uuid,
		'd675a530-28be-11f0-a2c9-9bb10fa15bd3'::uuid,
		'dd494c0e-28be-11f0-94e1-a7b2083dd749'::uuid,
		'e427a282-28be-11f0-8856-a7abd8a449c5'::uuid,
		'ecf3dae8-28be-11f0-91f7-f31527b6ca23'::uuid,
		'f3c853a8-28be-11f0-8938-73b157eb85a1'::uuid,
		'fa61ead0-28be-11f0-9fb3-2bbf7e1c7c7c'::uuid,
		'005bba60-28bf-11f0-bf7f-cff663f8102b'::uuid,
		'd43af2a2-2bd9-11f0-b08b-5fd59b502470'::uuid,
		'd8168f4e-2bd9-11f0-97a5-1b42cf640b5b'::uuid,
		'd84f8434-2bd9-11f0-bfa1-7b92380571bd'::uuid,
		p_jineologi_material,
		'b025cfe2-50f3-11f0-96d9-13090f80441e'::uuid
	];

	-- Initially we add all materials to all courses
	-- they can be edited afterwards
	WITH inserted as (
		insert into acorn_university_course_materials(
			course_id, material_id, 
			required, minimum, maximum, weight, 
			academic_year_semester_id, course_year_id, created_by_user_id
		)
			-- Year 12: Science, Literature, etc., lots of materials
			select cs.id, m.id, 
				(m.id = p_jineologi_material), -- Jineologi required
				p_pass_min, 100, 50, 
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				inner join acorn_university_entities en_cs on en_cs.id = cs.entity_id
				where not array_position(p_bakeloria_materials, m.id) is null
				and cs.course_type_id = p_course_type_high_school
				and not en_cs.id in(p_year_11_entity_id, p_year_10_entity_id, p_year_9_entity_id)
			union all
			-- Year 11. 1 material
			select cs.id, m.id, 
				false, p_pass_min, 100, 50,
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				where m.id = '7f5c4156-2e53-11f0-8601-43470f236a9e'::uuid
				and cs.entity_id = p_year_11_entity_id
			union all
			-- Year 10. 1 material
			select cs.id, m.id, 
				false, p_pass_min, 100, 50,
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				where m.id = '7f5c3dc8-2e53-11f0-8600-6ff513625846'::uuid
				and cs.entity_id = p_year_10_entity_id
			union all
			-- Year 9. 1 material
			select cs.id, m.id, 
				false, p_pass_min, 100, 50,
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				where m.id = 'ee22cafe-502e-11f0-90c2-3702c192c6ec'::uuid
				and cs.entity_id = p_year_9_entity_id
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria course materials inserted (all => all). Edit if needed', array_upper(p_uuids, 1); end if;

	-- ######################################### Exams
	-- => course_materials
	WITH inserted as (
		insert into acorn_exam_exam_materials(exam_id, course_material_id, created_by_user_id)
			select p_exam_theory_id, unnest, p_created_by_user_id
			from unnest(p_uuids)
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria exam materials inserted', array_upper(p_uuids, 1); end if;

	-- ######################################### Scores
	-- 0 score means 0 score
	-- NULL score means that the student did not NEED to take the exam
	-- ###################### Year 9,10,11
	/*
	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.year_11, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id,
				-- Course materials + exam
				acorn_university_courses cs
				inner join acorn_university_course_materials cm on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				where cs.entity_id = p_year_11_entity_id and m.name = 'Year 11'
					-- and bm.year_11 !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Year 11 Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.year_10, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id,
				-- Course materials + exam
				acorn_university_courses cs
				inner join acorn_university_course_materials cm on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				where cs.entity_id = p_year_10_entity_id and m.name = 'Year 10'
					-- and bm.year_10 !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Year 10 Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.year_9, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id,
				-- Course materials + exam
				acorn_university_courses cs
				inner join acorn_university_course_materials cm on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				where cs.entity_id = p_year_9_entity_id and m.name = 'Year 9'
					-- and bm.year_9 !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Year 9 Marks inserted', array_upper(p_uuids, 1); end if;
	*/

	-- ###################### Year 12: Science, Literature, etc.
	-- Multiple materials
	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.math, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Math'              -- Material name (Mathc, etc.)
					and bm.math !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.biology, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Biology'              -- Material name (Mathc, etc.)
					and bm.biology !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.physics, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Physics'              -- Material name (Mathc, etc.)
					and bm.physics !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.geography, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Geography'              -- Material name (Mathc, etc.)
					and bm.geography !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.chemistry, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Chemistry'              -- Material name (Mathc, etc.)
					and bm.chemistry !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.kurdish_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Kurdish'              -- Material name (Mathc, etc.)
					and bm.kurdish_language !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.english_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'English'              -- Material name (Mathc, etc.)
					and bm.english_language !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.arabic_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Arabic'              -- Material name (Mathc, etc.)
					and bm.arabic_language !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.history, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'History'              -- Material name (Mathc, etc.)
					and bm.history !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.philosophy, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Philosophy'              -- Material name (Mathc, etc.)
					and bm.philosophy !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.sociology, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Sociology'              -- Material name (Mathc, etc.)
					and bm.sociology !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.science_of_woman, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Jineologi'              -- Material name (Mathc, etc.)
					and bm.science_of_woman !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	/*
	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.community_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where initcap(bm.county) = ugs_sch.name -- School name   (Cezira, Firat, etc.)
					and bm.certificate = ugs_cs.name    -- Course name   (Science, Literature, etc.)
					and m.name = 'Community Language'              -- Material name (Mathc, etc.)
					and bm.community_language !=0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;
	*/
end;
$_$;


ALTER FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous boolean, p_messages boolean) OWNER TO university;

--
-- Name: fn_acorn_university_legacy_import_bakeloria_v2(boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous boolean DEFAULT true, p_messages boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $_$
declare
	-- Import Bakeloria students from a legacy university-acceptance database
	-- for a given source-target year
	--   university_mofadala_baccalaureate_marks => bakeloria students only (no university_mofadala_students entry)
	p_use_counties_as_schools boolean := true;
	p_bakeloria_academic_year_id uuid;
	p_bakeloria_source_year_simple_name character varying(1024);
	p_bakeloria_source_year_name character varying(1024);
	p_bakeloria_academic_year_name character varying(1024);
	p_bakeloria_semester1 uuid;
	p_material_type_normal_id uuid := '6b4bae9a-149f-11f0-a4e5-779d31ace22e'::uuid;
	p_course_year_id uuid := '5afc781c-2b47-11f0-bc2a-0bdc97d6ed09'::uuid;
	p_jineologi_material uuid := 'd88f0f6e-2bd9-11f0-8846-8bc9dcb96017'::uuid;
	p_exam_theory_id uuid := '0816bbee-2bdd-11f0-8400-57e43cb8bcc9'::uuid;
	p_bakeloria_materials uuid[];
	p_pass_min int := 40; -- TODO: Make this come from the spreadsheet
	p_year_10_entity_id uuid := '68054916-5190-11f0-bc03-7fbd63763efa'::uuid;
	p_year_11_entity_id uuid := '68054952-5190-11f0-bc04-73801473724c'::uuid;
	p_year_9_entity_id uuid := '6805498e-5190-11f0-bc05-f77ff88dbc17'::uuid;

	p_standard text[] := ARRAY['Maths', 'Physics', 'Chemistry', 'Biology', 'History', 'Geography', 'Philosophy', 'Sociology', 'Jineologi', 'Sport', 'Art'];
	p_language text[] := ARRAY['Community Language', 'Kurdish', 'English', 'Arabic'];
	p_normal_certificates text[] := ARRAY['Science', 'Literature'];

	-- Inserting
	p_uuid uuid;
	p_uuids uuid[];
	p_hi_uuids uuid[];
	p_names character varying(1024)[];
	p_created_by_user_id uuid;
	p_imported character varying(1024);
	p_imported_like character varying(1024);
	
	-- Education Authorities (university_category) hierarchy entries (checked below)
	p_top_node_entity_id   uuid := '5a722502-2cfc-11f0-8fc6-4f662cb2699a'::uuid;
	-- Lazy created for year
	p_bakeloria_hi_top_level_node uuid;  -- Bakeloria year TLN
	p_bakeloria_hi_org_edu_node uuid;    -- Bakeloria hierarchy authority

	-- Addresses (required, checked below)
	p_area_type_city    uuid := '1ecf9d88-e963-4563-9dea-d9ef246977eb'::uuid;
	p_area_type_village uuid := '4c09bda0-32fe-41da-933e-d7fc441e15ce'::uuid;
	p_area_type_town    uuid := '4eb637b9-7a39-4c90-9308-8c01929b019c'::uuid;
	p_area_type_canton  uuid := '558b28b3-46b3-4e4e-84ce-021376882018'::uuid;
	p_area_type_country uuid := '8dfda3c6-3f2c-4a3a-a72a-f4e9391dd282'::uuid;
	p_area_type_commune uuid := 'b3de00b7-c169-40d5-9546-4d5f5715b014'::uuid;

	-- Course Type (seeded, checked below)
	p_course_type_high_school      uuid := 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid;
	p_course_type_high_school_year uuid := '801fb8af-5ed3-4436-b89e-9151e9558c24'::uuid;
	p_course_type_middle_school    uuid := '65ddc034-4e96-11f0-91c1-3f7ba40fcde3'::uuid;
	
	-- Misc
	p_syrian_nation_identity_type_id uuid := 'd9f5affa-4873-11f0-8711-cb311b854057'::uuid;
begin
	p_created_by_user_id := fn_acorn_user_get_seed_user();

	-- Check course types are seeded
	if not exists(select * from public.acorn_university_course_types where id = p_course_type_high_school) then
		raise exception 'Course type High School does not exist' using ERRCODE = 'CIM02';
	end if;
	if not exists(select * from public.acorn_university_course_types where id = p_course_type_high_school_year) then
		raise exception 'Course type High School Year does not exist' using ERRCODE = 'CIM03';
	end if;

	-- Let's check we have registered source data!
	if exists(
		select * from university_mofadala_baccalaureate_marks bm where not certificate_language in('Arabic', 'Kurdish')
	) then 
		raise exception 'Un-registered certificate languages' using ERRCODE = 'CIM04';
	end if;
	if exists(
		select * from university_mofadala_baccalaureate_marks bm
			where not exists(
				select * from university_mofadala_type_certificates ct where initcap(bm.certificate) = ct.name
			)
	) then 
		raise exception 'Un-registered certificate names(university_mofadala_type_certificates) in university_mofadala_baccalaureate_marks' using ERRCODE = 'CIM05';
	end if;

	-- Check legacy_import_student_type validity
	if exists(
		select * from university_mofadala_baccalaureate_marks bm
			where not student_type in('regular', 'irregular') or student_type is null
	) then 
		raise exception 'Un-registered student types in university_mofadala_baccalaureate_marks' using ERRCODE = 'CIM06';
	end if;

	-- Bakeloria target processing years from university-acceptance database
	--   **2024 (Mofadala) => Bakeloria results end of 2023-2024, Mofadala beginning 2024-2025
	--     2025 (Mofadala) => Bakeloria results end of 2024-2025, Mofadala beginning 2025-2026
	select my.name, (my.name::int - 1) || '-' || my.name -- 2024 => 2023-2024
		into p_bakeloria_source_year_simple_name, p_bakeloria_source_year_name
		from university_mofadala_mofadala_years my
		where my.is_active;
	if p_bakeloria_source_year_name is null then raise exception 'Active Source Bakeloria year not found' using ERRCODE = 'CIM07'; end if;
	-- This procedure only really runs for 2025 
	-- and is then discarded
	if p_bakeloria_source_year_simple_name != '2025' then raise exception 'Source Bakeloria year: % => % does not = 2025??', p_bakeloria_source_year_simple_name, p_bakeloria_source_year_name using ERRCODE = 'CIM06'; end if;
	if p_messages then raise notice 'Source Bakeloria year: % => %', p_bakeloria_source_year_simple_name, p_bakeloria_source_year_name; end if;
	select id, name into p_bakeloria_academic_year_id, p_bakeloria_academic_year_name
		from acorn_university_academic_years ay
		where ay.name = p_bakeloria_source_year_name;
	if p_bakeloria_academic_year_id is null then raise exception 'Bakeloria target year % not found', p_bakeloria_source_year_name using ERRCODE = 'CIM08'; end if;
	if p_messages then raise notice 'Bakeloria year: %', p_bakeloria_academic_year_name; end if;

	-- p_imported is a no-space string so that it can be easily replaced
	p_imported      := 'Import-v1_from_Bakeloria_year_' || p_bakeloria_academic_year_name;
	p_imported_like := p_imported || '%';
	if p_messages then raise notice 'Import like: %', p_imported_like; end if;
	select ays.id into p_bakeloria_semester1 
		from acorn_university_academic_year_semesters ays
		inner join acorn_university_semesters sem on ays.semester_id = sem.id
		where academic_year_id = p_bakeloria_academic_year_id
		and sem.ordinal = 1;
	if p_bakeloria_semester1 is null then raise exception 'Bakeloria target year % has no semester 1', p_bakeloria_academic_year_name using ERRCODE = 'CIM09'; end if;

	-- ######################################### DELETE PREVIOUS
	-- This will cascade to entities, leafs and hierarchies
	if p_delete_previous then
		if p_messages then raise notice 'Begin delete of previously imported data for %...', p_imported_like; end if;
		delete from acorn_user_users             where import_source like(p_imported_like);
		delete from acorn_user_user_groups       where import_source like(p_imported_like);
		delete from acorn_location_addresses     where import_source like(p_imported_like);
		update      acorn_location_areas set parent_area_id = NULL where import_source like(p_imported_like);
		delete from acorn_location_areas         where import_source like(p_imported_like);
		-- Remove the persistent Year 9,10,11 course materials for this year
		delete from acorn_university_course_materials where academic_year_semester_id = p_bakeloria_semester1 
			and course_id in(select id from acorn_university_courses where entity_id in(p_year_10_entity_id, p_year_11_entity_id, p_year_9_entity_id));
		if p_messages then raise notice 'Deleted previously imported data for %', p_imported_like; end if;
		delete FROM public.winter_translate_attributes
			where model_type = 'Acorn\User\Models\UserGroup'
			and not exists(
				select * from public.acorn_user_user_groups where id = model_id::uuid
			);
		if p_messages then raise notice 'Spurious User Group name attribute translations removed'; end if;
	end if;

	-- ######################################### Check add location info
	-- p_area_type_city|canton|country
	insert into acorn_location_area_types(id, name, created_by_user_id)
		values(p_area_type_city, 'City', p_created_by_user_id) on conflict on constraint name do nothing;
	insert into acorn_location_area_types(id, name, created_by_user_id)
		values(p_area_type_canton, 'Canton', p_created_by_user_id) on conflict on constraint name do nothing;
	insert into acorn_location_area_types(id, name, created_by_user_id)
		values(p_area_type_country, 'Country', p_created_by_user_id) on conflict on constraint name do nothing;
	-- CONSTRAINT: acorn_location_areas.area_area_type: name-area_type_id
	insert into acorn_location_areas(name, area_type_id, parent_area_id, gps_id, created_by_user_id)
		values('Syria', p_area_type_country, NULL, NULL, p_created_by_user_id) on conflict on constraint area_area_type do nothing
		returning id into p_uuid;
	-- 5 x cantons (Same as School names)
	-- Add translations manually
	insert into acorn_location_areas(name, area_type_id, parent_area_id, gps_id, created_by_user_id)
		values('Cizîrê', p_area_type_canton, p_uuid, NULL, p_created_by_user_id) on conflict on constraint area_area_type do nothing;
	insert into acorn_location_areas(name, area_type_id, parent_area_id, gps_id, created_by_user_id)
		values('Tebqa', p_area_type_canton, p_uuid, NULL, p_created_by_user_id) on conflict on constraint area_area_type do nothing;
	insert into acorn_location_areas(name, area_type_id, parent_area_id, gps_id, created_by_user_id)
		values('Efrîn û şehba', p_area_type_canton, p_uuid, NULL, p_created_by_user_id) on conflict on constraint area_area_type do nothing;
	insert into acorn_location_areas(name, area_type_id, parent_area_id, gps_id, created_by_user_id)
		values('Fûrat', p_area_type_canton, p_uuid, NULL, p_created_by_user_id) on conflict on constraint area_area_type do nothing;
	insert into acorn_location_areas(name, area_type_id, parent_area_id, gps_id, created_by_user_id)
		values('Reqa', p_area_type_canton, p_uuid, NULL, p_created_by_user_id) on conflict on constraint area_area_type do nothing;
	insert into acorn_location_areas(name, area_type_id, parent_area_id, gps_id, created_by_user_id)
		values('DêrElzor', p_area_type_canton, p_uuid, NULL, p_created_by_user_id) on conflict on constraint area_area_type do nothing;
	
	-- ######################################### Top Level Node EA for Rojava
	-- no parent
	if not exists(select * from acorn_university_entities where id = p_top_node_entity_id) then 
		-- user group
		insert into acorn_user_user_groups(name, code) values('Rojava Education Authority', 'EATLN')
			returning id into p_uuid;
		-- entity
		insert into acorn_university_entities(id, user_group_id, created_by_user_id)
			values(p_top_node_entity_id, p_uuid, p_created_by_user_id);
		-- TLN Education Authority
		insert into acorn_university_education_authorities(entity_id) values(p_top_node_entity_id);
		if p_messages then raise notice 'TLN Education Committee inserted'; end if;
	end if;
	-- Hierarchy for this year (lazy create)
	select id into p_bakeloria_hi_top_level_node 
		from acorn_university_hierarchies 
		where entity_id = p_top_node_entity_id 
		and academic_year_id = p_bakeloria_academic_year_id
		and parent_id is null;
	if p_bakeloria_hi_top_level_node is null then
		insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id, created_by_user_id, import_source)
			values(p_top_node_entity_id, p_bakeloria_academic_year_id, NULL, p_created_by_user_id, p_imported || ' ea:' || p_bakeloria_academic_year_name)
			returning id into p_bakeloria_hi_top_level_node;
		if p_messages then raise notice '% Top Level Node Education Authority hierarchy inserted', p_bakeloria_academic_year_name; end if;
	else
		if p_messages then raise notice '% Top Level Node Education Authority hierarchy found', p_bakeloria_academic_year_name; end if;
	end if;

	-- ######################################### Bakeloria
	-- Source table only: university_mofadala_baccalaureate_marks
	-- in order of appearance:
	--   county:               Firat, Tepqa, Reqa, şehba, Cizîrê
	--   code:                 Should be same as students table
	--   certificate:          Science, Literature, etc. (=> students.type_certificate_id 1|2)
	--   place_and_date_of_birth: 12/08/2006 عاموده, Serê Kaniyê 04/01/2003, etc.
	--   total_mark:           double precision
	--   avg:                  double precision
	--   certificate_language: Kurdish, Arabic           (=> students.certificate_language_id 1|2)
	--   result:               Binket, serket, Serket, Serkeftî
	-- <material columns * x>, likely to change!:
	--   Languages:  kurdish_language, english_language, arabic_language
	--   Literature: science_of_woman, history, geography, philosophy, sociology, 
	--   Science:    chemistry, physics, math, biology
	
	-- ######################################### Schools (counties/schools)
	if p_use_counties_as_schools then
		-- School for each county only
		-- Insert missing schools
		with inserted as (
			insert into acorn_user_user_groups(name, code, import_source)
				select initcap(bm.name), fn_acorn_user_code(name), 
					p_imported || ' university_mofadala_baccalaureate_marks(county school):' || initcap(bm.name)
				from (
					-- Spelling variations
					select distinct(fn_acorn_university_legacy_import_county(county)) as name
					from university_mofadala_baccalaureate_marks
				) bm
				on conflict(code) do update 
					-- These rows id will still be returned
					set import_source = p_imported || ' university_mofadala_baccalaureate_marks(county school):' || acorn_user_user_groups.name
				returning id, name
		)
			select array_agg(inserted.id), array_agg(inserted.name) into p_uuids, p_names from inserted;
		if p_messages then raise notice '% School (counties) User Groups inserted/updated: %', array_upper(p_uuids, 1), array_to_string(p_names, ','); end if;
		if coalesce(array_upper(p_uuids, 1), 0) < 5 then 
			--raise exception 'Suspicious incomplete feed of region schools %', array_upper(p_uuids, 1) using ERRCODE = 'CIM10'; 
		end if;

		insert into winter_translate_attributes(locale, model_id, model_type, attribute_data)
			SELECT 'ar' as locale, 
				ugs.id as model_id,
				'Acorn\User\Models\UserGroup' as model_type, 
				'{"name":"' || 
					case
						when ugs.name = 'Dêrelzor'     then 'دير الزور'
						when ugs.name = 'Reqa'  then 'الرقة'
						when ugs.name = 'Aleppo'  then 'حلب'
						when ugs.name = 'Heleb'  then 'حلب'
						when ugs.name = 'Cizîrê'   then 'الجزيرة'
						when ugs.name = 'Fûrat' then 'الفرات'
						when ugs.name = 'Tebqa'     then 'الطبقة'
						when ugs.name = 'Efrîn' then 'عفرين'
						when ugs.name = 'Efrîn Û Şehba' then 'عفرين وشهبا'
						when ugs.name = 'Şehba' then 'وشهبا'
						else ''
					end
				|| '","description":""}' as attribute_data
			FROM acorn_user_user_groups ugs
			-- Actually we translate anything with these names, if not already translated
			where ugs.name in('Dêrelzor', 'Reqa', 'Aleppo', 'Heleb', 'Cizîrê', 'Fûrat', 'Tebqa', 'Efrîn', 'Efrîn Û Şehba')
			on conflict on constraint model_locale do update
				set model_id = EXCLUDED.id;

		-- Entities
		with inserted as (
			insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
				select ugs.id, p_created_by_user_id, ugs.import_source
				from acorn_user_user_groups ugs
				inner join unnest(p_uuids) on ugs.id = unnest
				on conflict on constraint unique_user_group_id 
					-- These id will NOT be returned
					do nothing
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% School (counties) Entities inserted', array_upper(p_uuids, 1); end if;

		-- Schools
		-- This will not trigger if no new entities were inserted
		with inserted as (
			insert into acorn_university_schools(entity_id)
				select unnest from unnest(p_uuids)
				returning id
		)
			select array_agg(inserted.id) into p_hi_uuids from inserted;
		if p_messages then raise notice '% Schools inserted', array_upper(p_hi_uuids, 1); end if;

		-- Place them under the  top level for now
		-- There may have been none inserted if the schools are already present from last years import
		-- so we run off the source data, rather than p_uuids
		-- being careful to set the import_source for this year
		-- TODO: Place them under the correct EA
		with inserted as (
			insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id, import_source, created_by_user_id)
				select en.id, p_bakeloria_academic_year_id, p_bakeloria_hi_top_level_node, 
					p_imported || ' university_mofadala_baccalaureate_marks(county school):' || initcap(bm.name), p_created_by_user_id 
				from acorn_university_entities en
				inner join acorn_university_schools sch on sch.entity_id = en.id
				inner join acorn_user_user_groups ugs on en.user_group_id = ugs.id
				inner join (
					select distinct(fn_acorn_university_legacy_import_county(county)) as name
					from university_mofadala_baccalaureate_marks
				) bm on ugs.code = fn_acorn_user_code(bm.name)
				returning id
		)
			select array_agg(inserted.id) into p_hi_uuids from inserted;
		if p_messages then raise notice '% Schools inserted into % hierarchy', array_upper(p_hi_uuids, 1), p_bakeloria_academic_year_name; end if;

		-- ######################################### Year 12 Courses (Bakeloria from Schools) Literature, Science, etc.
		-- university_mofadala_type_certificates => Courses
		-- These repeat in different schools (counties)
		-- required for the Mofadala desires also
		-- Science, Literature, etc.
		-- p_course_type_middle_school uuid := '65ddc034-4e96-11f0-91c1-3f7ba40fcde3'::uuid;
		-- p_course_type_high_school := 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid;
		-- Example: 2023-2024 Name => 2024-2025 Name
		--   Science => Science
		--   Literature  => Literature
		-- New in 2025
		-- FROM university_mofadala_type_certificates!!
		--   Economics => Commerce
		--   Agriculture => Agriculture
		--   Medical => Medicine
		--   Apprentice - Computer => Computer
		--   Apprentice - Mechanical => Mechanics
		--   Apprentice - Electrical => Electricity
		--   Apprentice - Electronic => Electronics
		WITH inserted as (
		    -- Each certificate(type_certificate) under each school(county)
			insert into acorn_user_user_groups(name, code, description, import_source)
				select initcap(cert.name), 
					fn_acorn_university_legacy_import_certificate_code(county.name, cert.name), 
					cert.name || ' course ' || ' for ' || county.name, -- Description
					p_imported || ' university_mofadala_type_certificates:' || cert.id || ' county:' || initcap(county.name)
				from university_mofadala_type_certificates cert,
				(
					select distinct(fn_acorn_university_legacy_import_county(county)) as name
					from university_mofadala_baccalaureate_marks
				) county
				returning id
			)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Bakeloria Course User Groups inserted/updated (for each county)', array_upper(p_uuids, 1); end if;
		if array_upper(p_uuids, 1) < 8 then raise exception 'Suspicious incomplete feed of bakeloria courses %', array_upper(p_uuids, 1) using ERRCODE = 'CIM11'; end if;
		if array_upper(p_uuids, 1) is null then raise warning 'Bakeloria courses for region schools already exist'; 
		else
			-- Translation (UserGroup::name level)
			-- Relies on the on conflict(model_locale) do nothing
			insert into winter_translate_attributes(locale, model_id, model_type, attribute_data)
				SELECT 'ku' as locale, 
					ugs.id as model_id,
					'Acorn\User\Models\UserGroup' as model_type, 
					'{"name":"' || 
						case
						    -- Always
							when ugs.name = 'Science'     then 'Zanistî'
							when ugs.name = 'Literature'  then 'Wejê'
							-- Old names just in case
							when ugs.name = 'Economics'   then 'Aborî'
							when ugs.name = 'Medical'     then 'Pizişkî'
							when ugs.name = 'Apprentice - Computer'   then 'Şagird - Hasabî'
							when ugs.name = 'Apprentice - Mechanical' then 'Şagird - Mekanîkî'
							when ugs.name = 'Apprentice - Electronic' then 'Şagird - Elektronîkî'
							when ugs.name = 'Apprentice - Electrical' then 'Şagird - Elektrîkî'
							-- New in 2025
							when ugs.name = 'Commerce'    then 'Aborî'
							when ugs.name = 'Agriculture' then 'Erdnasî'
							when ugs.name = 'Medicine'    then 'Pizişkî'
							when ugs.name = 'Computer'    then 'Hasabî'
							when ugs.name = 'Mechanics'   then 'Mekanîkî'
							when ugs.name = 'Electricity' then 'Elektrîkî'
							when ugs.name = 'Electronic'  then 'Elektronîkî'
							when ugs.name = 'Electronics' then 'Elektronîkî'
							when ugs.name = 'Torno'       then 'Torno'
							when ugs.name = 'Lathe'       then 'Torno'
							else ''
						end
					|| '","description":""}' as attribute_data
				FROM acorn_user_user_groups ugs
				-- Actually we translate anything with these names, if not already translated
				where ugs.name in('Science', 'Literature', 
					'Economics', 'Agriculture', 'Medical', 
					'Apprentice - Computer', 'Apprentice - Mechanical', 'Apprentice - Electronic', 'Apprentice - Electrical',
					'Commerce', 'Medicine', 'Computer', 'Mechanics', 'Electricity', 'Electronics'
				)
				on conflict on constraint model_locale do update
					set model_id = EXCLUDED.id;
				
			insert into winter_translate_attributes(locale, model_id, model_type, attribute_data)
				SELECT 'ar' as locale, 
					ugs.id as model_id,
					'Acorn\User\Models\UserGroup' as model_type, 
					'{"name":"' || 
						case
						    -- Always
							when ugs.name = 'Science'     then 'علمي'
							when ugs.name = 'Literature'  then 'ادبي'
							-- Old names just in case
							when ugs.name = 'Economics'   then 'اقتصاد'
							when ugs.name = 'Medical'     then 'طب'
							when ugs.name = 'Apprentice - Computer'   then 'كمبيوتر'
							when ugs.name = 'Apprentice - Mechanical' then 'ميكانيك'
							when ugs.name = 'Apprentice - Electronic' then 'إلكترون'
							when ugs.name = 'Apprentice - Electrical' then 'كهرباء'
							-- New in 2025
							when ugs.name = 'Commerce'    then 'الاقتصاد'
							when ugs.name = 'Agriculture' then 'زراعة'
							when ugs.name = 'Medicine'    then 'طب'
							when ugs.name = 'Computer'    then 'كمبيوتر'
							when ugs.name = 'Mechanics'   then 'ميكانيك'
							when ugs.name = 'Electricity' then 'كهرباء'
							when ugs.name = 'Electronic'  then 'الإلكترونيات'
							when ugs.name = 'Electronics' then 'الإلكترونيات'
							when ugs.name = 'Torno'       then 'مخرطة'
							when ugs.name = 'Lathe'       then 'مخرطة'
							else ''
						end
					|| '","description":""}' as attribute_data
				FROM acorn_user_user_groups ugs
				-- Actually we translate anything with these names, if not already translated
				where ugs.name in('Science', 'Literature', 
					'Economics', 'Agriculture', 'Medical', 
					'Apprentice - Computer', 'Apprentice - Mechanical', 'Apprentice - Electronic', 'Apprentice - Electrical',
					'Commerce', 'Medicine', 'Computer', 'Mechanics', 'Electricity', 'Electronics', 'Torno'
				)
				on conflict on constraint model_locale do update
					set model_id = EXCLUDED.id;

			-- Entities
			WITH inserted as (
				insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
					select ugs.id, p_created_by_user_id, ugs.import_source
					from acorn_user_user_groups ugs
					inner join unnest(p_uuids) on ugs.id = unnest
					returning id
				)
				select array_agg(inserted.id) into p_uuids from inserted;
			if p_messages then raise notice '% Bakeloria Course Entities inserted', array_upper(p_uuids, 1); end if;

			-- Courses
			WITH inserted as (
				insert into acorn_university_courses(entity_id, course_type_id)
					select unnest, p_course_type_high_school -- High School
					from unnest(p_uuids)
					returning id
				)
				select array_agg(inserted.id) into p_uuids from inserted;
			if p_messages then raise notice '% Bakeloria Courses inserted', array_upper(p_uuids, 1); end if;
		end if;
		
		-- Place each bakeloria course under its designated county school
		-- This always needs to happen, will be linked to the previous year in the case they already exist
		-- import_source needs to be adjusted
		-- UNIQUE: entity, parent, year unique. Also import_source
		with inserted as (
			insert into acorn_university_hierarchies(academic_year_id, created_by_user_id, entity_id, parent_id, import_source)
				select p_bakeloria_academic_year_id, p_created_by_user_id,
					en_cs.id, hi.id, p_imported || ' university_mofadala_type_certificates:' || ct.id || ' county:' || ugs_sc.name
				from 
				-- Bakeloria Courses
				-- import_source: p_imported || ' university_mofadala_type_certificates:' || ct.id || ' county:' || initcap(county.name)
				acorn_university_entities en_cs
				inner join acorn_user_user_groups ugs_cs on ugs_cs.id = en_cs.user_group_id
				inner join acorn_university_courses cs 
					on cs.entity_id = en_cs.id and cs.course_type_id = p_course_type_high_school
				inner join university_mofadala_type_certificates ct on initcap(ct.name) = ugs_cs.name,
				-- Schools for this year
				-- import_source: p_imported || ' university_mofadala_baccalaureate_marks(county school):' || initcap(bm.name)
				acorn_university_hierarchies hi
				inner join acorn_university_entities en_sc on hi.entity_id = en_sc.id
				inner join acorn_user_user_groups ugs_sc on ugs_sc.id = en_sc.user_group_id
				inner join acorn_university_schools sch 
					on en_sc.id = sch.entity_id
				-- Where the course(cs) is for the school(sc)
				where en_cs.import_source like('% county:' || ugs_sc.name) 
					and hi.academic_year_id = p_bakeloria_academic_year_id
				on conflict(import_source) do nothing
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Bakeloria courses attatched to schools into % hierarchy', array_upper(p_uuids, 1), p_bakeloria_academic_year_name; end if;

		-- Year 10, 11, 9: Check/create exists
		-- Static, non-repeating, 1 off, seeded courses
		insert into acorn_user_user_groups(id, name, code, description) values
			('680546dc-5190-11f0-bc00-2b9974d04458'::uuid, 'Year 10', 'Y10', '1st year of High School'),
			('6805488a-5190-11f0-bc01-dbc094fbb388'::uuid, 'Year 11', 'Y11', '2nd year of High School'),
			('680548d0-5190-11f0-bc02-fff4f307a4bb'::uuid, 'Year 9',  'Y09', 'Last year of Middle School')
			on conflict(id) do nothing;
		if p_messages then raise notice 'Year 9,10,11 user groups Checked/inserted'; end if;
		insert into acorn_university_entities(id, user_group_id, created_by_user_id) values
			(p_year_10_entity_id, '680546dc-5190-11f0-bc00-2b9974d04458'::uuid, p_created_by_user_id),
			(p_year_11_entity_id, '6805488a-5190-11f0-bc01-dbc094fbb388'::uuid, p_created_by_user_id),
			(p_year_9_entity_id,  '680548d0-5190-11f0-bc02-fff4f307a4bb'::uuid, p_created_by_user_id)  
			on conflict(id) do nothing;
		if p_messages then raise notice 'Year 9,10,11 entities Checked/inserted'; end if;
		insert into acorn_university_courses(id, entity_id, course_type_id) values
			('680549ca-5190-11f0-bc06-3b2810ca3733'::uuid, p_year_10_entity_id, p_course_type_high_school_year),
			('68054a1a-5190-11f0-bc07-5b0366195244'::uuid, p_year_11_entity_id, p_course_type_high_school_year),
			('68054a56-5190-11f0-bc08-57f3e412fee2'::uuid, p_year_9_entity_id,  p_course_type_middle_school) -- *** Middle School!
			on conflict(id) do nothing;
		if p_messages then raise notice 'Year 9,10,11 courses Checked/inserted'; end if;
		-- Translation (UserGroup::name level)
		insert into winter_translate_attributes(locale, model_id, model_type, attribute_data) values
			('ku', '680546dc-5190-11f0-bc00-2b9974d04458'::uuid, 'Acorn\User\Models\UserGroup', '{"name":"Salê 10","description":""}'),
			('ku', '6805488a-5190-11f0-bc01-dbc094fbb388'::uuid, 'Acorn\User\Models\UserGroup', '{"name":"Salê 11","description":""}'),
			('ku', '680548d0-5190-11f0-bc02-fff4f307a4bb'::uuid, 'Acorn\User\Models\UserGroup', '{"name":"Salê 9","description":""}')
			on conflict on constraint model_locale do nothing;
		insert into winter_translate_attributes(locale, model_id, model_type, attribute_data) values
			('ar', '680546dc-5190-11f0-bc00-2b9974d04458'::uuid, 'Acorn\User\Models\UserGroup', '{"name":"10 الصف","description":""}'),
			('ar', '6805488a-5190-11f0-bc01-dbc094fbb388'::uuid, 'Acorn\User\Models\UserGroup', '{"name":"11 الصف","description":""}'),
			('ar', '680548d0-5190-11f0-bc02-fff4f307a4bb'::uuid, 'Acorn\User\Models\UserGroup', '{"name":"9 الصف","description":""}')
			on conflict on constraint model_locale do nothing;
		if p_messages then raise notice 'Year 9,10,11 translations Checked/inserted'; end if;
		
		-- Place these single courses under every school
		with inserted as (
			insert into acorn_university_hierarchies(academic_year_id, entity_id, parent_id, created_by_user_id, import_source)
				select p_bakeloria_academic_year_id, en_cs.id, hi_sc.id, 
					p_created_by_user_id, p_imported || ' university_mofadala_baccalaureate_marks(county school):' || ugs_sc.name || ' Course:' || ugs_cs.name
					from 
					-- Year 10,11,9
					acorn_university_entities en_cs
					inner join acorn_university_courses cs 
						on cs.entity_id = en_cs.id and cs.course_type_id in(p_course_type_high_school_year, p_course_type_middle_school)
					inner join acorn_user_user_groups ugs_cs   on ugs_cs.id = en_cs.user_group_id,
					-- Schools
					acorn_university_hierarchies hi_sc
					inner join acorn_university_entities en_sc on hi_sc.entity_id = en_sc.id
					inner join acorn_user_user_groups ugs_sc   on ugs_sc.id = en_sc.user_group_id
					inner join acorn_university_schools sch    on en_sc.id = sch.entity_id
					
					where hi_sc.academic_year_id = p_bakeloria_academic_year_id
					and en_cs.id in(p_year_10_entity_id, p_year_11_entity_id, p_year_9_entity_id)
					on conflict(import_source) do nothing
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Year 9,10,11 courses attatched to schools in hierarchy', array_upper(p_uuids, 1); end if;
	else
		-- school column
		raise exception 'Not supported' using ERRCODE = 'CIM12';

		/*
		with inserted as (
			insert into acorn_user_user_groups(name, code, import_source)
				select initcap(bm.name) || ' school', fn_acorn_user_code(name), p_imported || ' university_mofadala_baccalaureate_marks(county school):' || bm.name
				from (
					select distinct(school) as name
					from university_mofadala_baccalaureate_marks
				) bm
				on conflict do nothing
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% School (counties) User Groups inserted', array_upper(p_uuids, 1); end if;

		with inserted as (
			insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
				select ugs.id, p_created_by_user_id, ugs.import_source
				from acorn_user_user_groups ugs
				inner join unnest(p_uuids) on ugs.id = unnest
				returning id
		)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% School Entities inserted', array_upper(p_uuids, 1); end if;

		-- Schools
		with inserted as (
			insert into acorn_university_schools(entity_id)
				select unnest from unnest(p_uuids)
				returning id
		)
			select array_agg(inserted.id) into p_hi_uuids from inserted;
		if p_messages then raise notice '% Schools inserted', array_upper(p_hi_uuids, 1); end if;
		*/
	end if;

	-- ######################################### Students
	-- university_mofadala_baccalaureate_marks: bakeloria code, father_name & mother_name, full_name, place_and_date_of_birth
	
	-- TODO: Sounds like check on names for duplicates
	/*
	select count(*) from university_mofadala_baccalaureate_marks bm
		where exists(select * from acorn_user_users 
			where u.name || ' ' || u.surname sounds_like(bm.full_name)
		);
	*/

	-- TODO: Create place_and_date_of_birth Locations
	-- NOTE: 
	--   v2 import uses place_and_date_of_birth as place only. birth_date is a new, separate field
	--   v1 import has dirty data in place_and_date_of_birth, Kurdish and Arabic language and dates on either side
	--   تربسبيه 01/01/2005
	--   Gundê Sîha Mezin 01/01/2006
	--   Kobanî 25.10.2006
	--   2006/05/01 Girbelek
	-- select *, 
	-- 	fn_acorn_calendar_is_date(a.birth_date, NULL)
	-- 	from (
	-- 		SELECT place_and_date_of_birth,
	-- 		case when place_and_date_of_birth ~ '(19|20)[0-9]{2}' then
	-- 			regexp_replace(place_and_date_of_birth, ' *[\\0-9/.-]{2,} *', '', 'g')
	-- 		else place_and_date_of_birth end as birth_place,
	-- 		case when place_and_date_of_birth ~ '(19|20)[0-9]{2}' then
	-- 			regexp_replace(place_and_date_of_birth, ' *([^\\0-9/.]{2,}) *', '', 'g')
	-- 		else place_and_date_of_birth end as birth_date
	-- 		FROM public.university_mofadala_baccalaureate_marks
	-- 	) a
	-- 	where fn_acorn_calendar_is_date(a.birth_date, NULL) is NULL;
	
	-- UNIQUE: unique_user
	-- 'name', 'surname', 'birth_date', 'fathers_name', 'mothers_name', 'gender'
	-- TODO: This can be used, if necessary to update the import_source on the duplicates
	if exists(select * from acorn_user_users u where exists(
		select * from university_mofadala_baccalaureate_marks bm
			where u.name = bm.full_name
			and u.surname = bm.surname
			and u.birth_date = bm.birth_date::timestamp
			and u.fathers_name = bm.father_name
			and u.mothers_name = bm.mother_name
			and u.gender = case
					when bm.gender = '' then NULL
					when bm.gender is null then NULL
					when position('Female' in bm.gender) != 0 then 'F'
					when position('Male'   in bm.gender) != 0 then 'M' -- Case Sensitive
					-- Exception if not above
				end
	)) then
		raise exception 'Duplicate users will violate the unique_user constraint' using ERRCODE = 'CIM13';
	end if;

	-- Check religions exist
	select array_agg(bm.religion) into p_names 
		from university_mofadala_baccalaureate_marks bm
		where not bm.religion is null and not bm.religion = ''
		and not exists(select * from acorn_user_religions r where position(lower(r.name) in lower(bm.religion))  != 0);
	if not array_upper(p_names, 1) is null then
		raise exception 'Religions missing: %', array_to_string(p_names, ',') using ERRCODE = 'CIM14';
	end if;
	if p_messages then raise notice 'Religions verified'; end if;
	-- Check ethnicities exist
	select array_agg(bm.ethnicity) into p_names 
		from university_mofadala_baccalaureate_marks bm
		where not bm.ethnicity is null and not bm.ethnicity = ''
		and not exists(select * from acorn_user_ethnicities e where position(lower(e.name) in lower(regexp_replace(bm.ethnicity, 'ish$|ic$', '', 'g'))) != 0);
	if not array_upper(p_names, 1) is null then
		raise exception 'Ethnicities missing: %', array_to_string(p_names, ',') using ERRCODE = 'CIM15';
	end if;
	if p_messages then raise notice 'Ethnicities verified'; end if;
	-- Check languages exist
	select array_agg(bm.certificate_language) into p_names 
		from university_mofadala_baccalaureate_marks bm
		where not bm.certificate_language is null and not bm.certificate_language = ''
		and not exists(select * from acorn_user_languages l where position(lower(l.name) in lower(bm.certificate_language)) != 0);
	if not array_upper(p_names, 1) is null then
		raise exception 'Languages missing: %', array_to_string(p_names, ',') using ERRCODE = 'CIM16';
	end if;
	if p_messages then raise notice 'Languages verified'; end if;
	-- Check other languages exist
	select array_agg(bm.other_language) into p_names 
		from university_mofadala_baccalaureate_marks bm
		where not bm.other_language is null and not bm.other_language = ''
		and not exists(select * from acorn_user_languages l where position(lower(l.name) in lower(bm.other_language)) != 0);
	if not array_upper(p_names, 1) is null then
		raise exception 'Other languages missing: %', array_to_string(p_names, ',') using ERRCODE = 'CIM17';
	end if;
	if p_messages then raise notice 'Other languages verified'; end if;

	-- INSERT
	WITH inserted as (
		insert into acorn_user_users(
			username, "password",
			"name", surname, birth_date, gender, marital_status,
			fathers_name, mothers_name, 
			religion_id, ethnicity_id,
			-- Special, temporary during import:
			import_source
		)
			select
				bm.id::text, -- username: 453
				regexp_replace(gen_random_uuid()::text, '.*-', ''),
				-- v2 names (not full_name only anymore)
				full_name, -- Used for first_name in v2
				surname,
				bm.birth_date::timestamp,
				case
					when bm.gender = '' then NULL
					when bm.gender is null then NULL
					when position('Female' in bm.gender) != 0 then 'F'
					when position('Male'   in bm.gender) != 0 then 'M' -- Case Sensitive
					-- Exception if not above
				end,
				case
					when bm.marital_status = '' then NULL
					when bm.marital_status is null then NULL
					when position('Married' in bm.marital_status) != 0 then 'M'
					when position('Single'  in bm.marital_status) != 0 then 'S'
					-- Exception if not above
				end,
				bm.father_name, bm.mother_name, 
				(select id from acorn_user_religions   r where position(lower(r.name) in lower(bm.religion))  != 0),
				(select id from acorn_user_ethnicities e where position(lower(e.name) in lower(regexp_replace(bm.ethnicity, 'ish$|ic$', '', 'g'))) != 0), -- "community"
				p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			from university_mofadala_baccalaureate_marks bm
			where bm.import_irregularity is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria Student Users inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_university_students(
				user_id, import_source,
				-- Legacy & from university_mofadala_baccalaureate_marks
				legacy_import_id, legacy_import_result, legacy_import_avg, legacy_import_total_mark,
				-- Legacy & from new university_mofadala_baccalaureate_marks columns
				legacy_import_final_avg, legacy_import_passed_primaries, legacy_import_passed_secondaries, legacy_import_attendance,
				-- TODO: for later
				legacy_import_school, legacy_import_qeyd, legacy_import_student_type, legacy_import_birth_place
			)
			select u.id, u.import_source,
				-- Legacy & from university_mofadala_baccalaureate_marks
				bm.id, bm.result, bm.avg, bm.total_mark,
				-- Legacy & from new university_mofadala_baccalaureate_marks columns
				bm.final_avg, bm.passed_primaries = 'P', bm.passed_secondaries = 'P', bm.attendance,
				school, qeyd, student_type, place_and_date_of_birth
			from acorn_user_users u,
				university_mofadala_baccalaureate_marks bm
				where u.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria Students inserted', array_upper(p_uuids, 1); end if;

	-- Language, matched by name
	-- seeded
	-- '9eaa5c4d-9080-4799-afa7-3741349b5beb', 'English',  'en'
	-- '9eaa5c43-db07-4597-ac8c-156253e84376', 'Kurdish',  'ku'
	-- '40aafb9e-41e2-11f0-8065-f75fd6b290d7', 'Arabic',   'ar'
	-- '488cb15e-50f6-11f0-8a5f-3b0d113e458b', 'French',   'fr'
	-- '306e04b6-50f5-11f0-a082-e3e55c5baecd', 'Syriac',   'su'
	-- '306e0826-50f5-11f0-a083-6b25e90008a2', 'Assyrian', 'as'
	WITH inserted as (
		insert into acorn_user_user_languages(user_id, language_id)
			SELECT s.user_id, l.id 
				FROM university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_languages l on position(lower(l.name) in lower(bm.certificate_language)) != 0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Languages inserted', array_upper(p_uuids, 1); end if;

	-- Other Language
	WITH inserted as (
		insert into acorn_user_user_languages(user_id, language_id, "current")
			SELECT s.user_id, l.id, false
				FROM university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_languages l on position(lower(l.name) in lower(bm.other_language)) != 0
				-- Let's not insert the same language twice
				where position(lower(bm.other_language) in lower(bm.certificate_language)) = 0
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Other Languages inserted', array_upper(p_uuids, 1); end if;

	-- National ID
	WITH inserted as (
		insert into acorn_university_student_identities(student_id, "number", identity_type_id, "current", created_by_user_id)
			select s.id, bm.national_id, p_syrian_nation_identity_type_id, true, p_created_by_user_id
			from university_mofadala_baccalaureate_marks bm
			inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			where not bm.national_id is null and not bm.national_id = ''
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% National IDs inserted', array_upper(p_uuids, 1); end if;

	-- Notes
	WITH inserted as (
		insert into acorn_university_student_notes(name, description, 
			student_id, entity_id, created_by_user_id
		)
			select 'Import', p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id, 
					s.id, p_top_node_entity_id, p_created_by_user_id
				FROM university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Notes inserted', array_upper(p_uuids, 1); end if;
		
	-- Inject old bakeloria code, owned by the Top level Education Committee
	WITH inserted as (
		insert into acorn_university_student_codes(student_id, entity_id, code, "current", created_by_user_id)
			select s.id, p_top_node_entity_id, bm.code, true, p_created_by_user_id
			FROM university_mofadala_baccalaureate_marks bm
			inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
			where not bm.code is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria Codes inserted', array_upper(p_uuids, 1); end if;

	-- ######################################### Special status
	-- families_of_martyrs:           021c0f46-3b96-11f0-add5-1fdf3952358b
	-- families_of_martyrs_brother:   9b7bab3e-5102-11f0-9cd9-7fb657bb3130
	-- families_of_martyrs_sister:    9b7baeb8-5102-11f0-9cda-bffc4b023c0d
	-- families_of_martyrs_son:       9b7bb020-5102-11f0-9cdb-93d38f211b1c
	-- families_of_martyrs_daughter:  9b7bb0fc-5102-11f0-9cdc-9b34ab0a8820
	-- families_of_martyrs_father:    9b7bb1ba-5102-11f0-9cdd-e70ab0372790
	-- families_of_martyrs_mother:    9b7bb278-5102-11f0-9cde-6796eef88af5
	-- families_of_martyrs_uncle:     9b7bb35e-5102-11f0-9cdf-0344f140c200
	-- families_of_martyrs_aunt:      9b7bb426-5102-11f0-9ce0-cbc33fff389d
	-- from_the_occupied_territories: 021c1022-3b96-11f0-add6-9b77f9e97678
	-- he_served_in_the_army:         021c104a-3b96-11f0-add7-bf3af6dabafb
	-- need_housing:                  021c1068-3b96-11f0-add8-a7fe27552a6d
	-- Bakeloria:
	--   kinship: n/a|brother|sister|father|mother|uncle|aunt|son|daughter
	WITH inserted as (
		insert into acorn_university_student_status(student_id, student_status_id)
			select s.id, st.id
				FROM university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_university_student_statuses st 
					on position(replace(st.name, 'Families Of Martyrs ', '') in bm.family_of_martyrs) != 0
				where position('Families Of Martyrs ' in st.name) != 0
			returning student_id
		)
		select array_agg(inserted.student_id) into p_uuids from inserted;
	if p_messages then raise notice '% Students families_of_martyrs statuses inserted', array_upper(p_uuids, 1); end if;
	
	-- ######################################### Students => Bakeloria courses 
	-- in their counties, for their specialization
	-- year: p_bakeloria_academic_year_id
	WITH inserted as (
		insert into acorn_user_user_group_version(user_group_version_id, user_id)
			select hi.user_group_version_id, u.id
				-- Courses
				from acorn_university_hierarchies hi
				inner join acorn_university_entities en_cs on en_cs.id = hi.entity_id
				inner join acorn_user_user_groups ugs_cs   on ugs_cs.id = en_cs.user_group_id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Schools
				inner join acorn_university_hierarchies hiP on hi.parent_id = hiP.id
				inner join acorn_university_entities en_sc on en_sc.id = hiP.entity_id
				inner join acorn_user_user_groups ugs_sc   on ugs_sc.id = en_sc.user_group_id
				inner join acorn_university_schools sc on sc.entity_id = en_sc.id,
				-- Imported Students with bm.certificate (=>ct.id)
				university_mofadala_baccalaureate_marks bm
				inner join acorn_user_users u on u.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				
				where hi.academic_year_id = p_bakeloria_academic_year_id
				-- School (county)
				and ugs_sc.code = public.fn_acorn_user_code(fn_acorn_university_legacy_import_county(bm.county))
				-- Courses Year 10,11,9 and specialization (Science, Literature, etc.)
				-- Year 10,11,9 have no import_source
				and (
					fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					or (
						   (en_cs.id = p_year_11_entity_id and not bm.year_11 is null)
						or (en_cs.id = p_year_10_entity_id and not bm.year_10 is null)
						or (en_cs.id = p_year_9_entity_id  and not bm.year_9  is null)
					)
				)
				and cs.course_type_id in(p_course_type_high_school, p_course_type_high_school_year, p_course_type_middle_school)
			returning user_id
		)
		select array_agg(inserted.user_id) into p_uuids from inserted;
	if array_upper(p_uuids, 1) is null then raise exception 'No students placed on courses!' using ERRCODE = 'CIM18'; end if;
	if p_messages then raise notice '% Students-placements on to Year 12 distributed and 11,10,9 static Bakeloria courses in schools', array_upper(p_uuids, 1); end if;

	-- ######################################### Materials & Course materials
	-- -- These materials should be seeded, but we add just in case
	-- -- we assume the material type
	-- -- Literature (adabi) & Science (el) Bakeloria, etc.
	-- WITH inserted as (
	-- 	insert into acorn_university_materials(id, name, description, material_type_id, created_by_user_id)
	-- 		-- Science
	-- 		select 'cdc800ae-28be-11f0-a8a6-334555029afd'::uuid, 'Math',       NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'd675a530-28be-11f0-a2c9-9bb10fa15bd3'::uuid, 'Biology',    NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'dd494c0e-28be-11f0-94e1-a7b2083dd749'::uuid, 'Physics',    NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'ecf3dae8-28be-11f0-91f7-f31527b6ca23'::uuid, 'Chemistry',  NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		-- Literature
	-- 		select 'e427a282-28be-11f0-8856-a7abd8a449c5'::uuid, 'Geography',  NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'd43af2a2-2bd9-11f0-b08b-5fd59b502470'::uuid, 'History',    NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'd8168f4e-2bd9-11f0-97a5-1b42cf640b5b'::uuid, 'Philosophy', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'd84f8434-2bd9-11f0-bfa1-7b92380571bd'::uuid, 'Sociology',  NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select p_jineologi_material, 'Jineologi',  NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		-- Year 10,11 Bakeloria
	-- 		select '7f5c3dc8-2e53-11f0-8600-6ff513625846'::uuid, 'Year 10',    NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '7f5c4156-2e53-11f0-8601-43470f236a9e'::uuid, 'Year 11',    NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		-- Year 9 Middle school
	-- 		select 'ee22cafe-502e-11f0-90c2-3702c192c6ec'::uuid, 'Year 9',     NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		-- Language
	-- 		select 'b025cfe2-50f3-11f0-96d9-13090f80441e'::uuid, 'Community Language',  NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'f3c853a8-28be-11f0-8938-73b157eb85a1'::uuid, 'Kurdish',    NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select 'fa61ead0-28be-11f0-9fb3-2bbf7e1c7c7c'::uuid, 'English',    NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '005bba60-28bf-11f0-bf7f-cff663f8102b'::uuid, 'Arabic',     NULL, p_material_type_normal_id, p_created_by_user_id union all
			
	-- 		-- Medicine
	-- 		select '9f7d3005-1327-40a4-9d99-ad83d2358741'::uuid, 'Physics and Chemistry', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3043-29c9-4a93-9417-374158b3fb10'::uuid, 'Anatomy', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3073-300e-44a0-aa45-b738e474e871'::uuid, 'Nursing', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d30cd-6ceb-4841-bfd3-5b7de5f8085f'::uuid, 'Rays', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d310c-48de-40c8-a5a8-b9c406a779de'::uuid, 'Anesthetization', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3139-9d3f-4965-970c-972c8824c6b4'::uuid, 'Physical therapy', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3165-47e2-4239-9373-6f5bb82464a1'::uuid, 'Pharmacy', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d319d-bf6f-4662-a864-de0c7c1f35a0'::uuid, 'Lab', NULL, p_material_type_normal_id, p_created_by_user_id union all
			
	-- 		-- Mechanics
	-- 		select '9f7d3210-28c4-4b3d-a914-568d1b2b7987'::uuid, 'Internal Combustion Engines', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d32e0-2739-4ad6-9d1b-253a034c1ac2'::uuid, 'Mechanical Engineering Drawing 3', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3312-291e-41a9-a5fe-e297d597e2dc'::uuid, 'Vehicle control systems', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3342-ed04-4edd-a956-da51c02f58f4'::uuid, 'Diesel fuel injection systems', NULL, p_material_type_normal_id, p_created_by_user_id union all

	-- 		-- Electricity
	-- 		select '9f7d35eb-1782-4478-9e13-cc08eac51af5'::uuid, 'Electrical appliances 2', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3615-0c25-4950-b326-01e832505ccc'::uuid, 'Automated command and control', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d363a-d062-4f98-8b96-6a8fdaa7e6eb'::uuid, 'Electrical Engineering Drawing 3', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d5a21-3c5c-4242-a091-5a3bf4fd829a'::uuid, 'Electronics 3', NULL, p_material_type_normal_id, p_created_by_user_id union all

	-- 		-- Computer
	-- 		select '9f83484d-e6cb-49c3-994b-fdb976ceba92'::uuid, 'Web Design', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3661-f29f-4b5c-bf18-b49df3d424c7'::uuid, 'Hardware and software maintenance 2', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d368c-0ca7-4f3a-abc5-7991ce322b9f'::uuid, 'Programming 3', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d36b3-24d8-4537-a12b-a666197847c1'::uuid, 'Network management', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d36da-d87f-4fe2-83fe-fb6269b26c7b'::uuid, 'Computer applications', NULL, p_material_type_normal_id, p_created_by_user_id union all
			
	-- 		-- Commerce
	-- 		select '9f7d3700-135b-4322-9c21-aa8ad1e49c1e'::uuid, 'Marketing', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3735-b592-45f9-bb09-f3cb237c1f76'::uuid, 'Bank accounting', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d375d-0c8d-4587-81d2-208632503d48'::uuid, 'Financial Institutions Accounting', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3835-0cdf-487b-8daf-846854567178'::uuid, 'Private accounting', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3861-f5b4-4e32-8de6-613fa2935b32'::uuid, 'Computer', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3886-ce95-4120-bf5e-c26355e1cc6d'::uuid, 'Financial Mathematics', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d38a9-a00b-45a7-88dc-e1ca69b0f92d'::uuid, 'Statistics', NULL, p_material_type_normal_id, p_created_by_user_id union all

	-- 		-- Agriculture
	-- 		select '9f7d38d4-7ee0-432a-a613-13f1e8fc470d'::uuid, 'Food industries', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d38fb-2d86-4697-aaaa-2c7c744d2eed'::uuid, 'Dairy', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d391f-7aff-4a7c-a689-c3c58f72b430'::uuid, 'Gardening', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3948-80cc-4fd1-bca2-774b7eea6b1a'::uuid, 'Farm animal', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3976-aa21-471b-8a43-c4c5072e7a85'::uuid, 'Agricultural pests', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f83489a-47d5-47ad-8a11-d877272a51ee'::uuid, 'Micro Organisms', NULL, p_material_type_normal_id, p_created_by_user_id union all

	-- 		-- Electronics
	-- 		select '9f8d429b-fd97-437b-9a8f-dfaac8432db2'::uuid, 'Protection and Alarm Systems', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f8d42ca-567a-4106-b583-28281ba8ec35'::uuid, 'Antennas', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f8d42fb-0e1e-4459-8351-cac9a6828060'::uuid, 'Electronic Device Maintenance', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f8d4247-f04c-4bc5-9328-62a186e45574'::uuid, 'Televison', NULL, p_material_type_normal_id, p_created_by_user_id union all

	-- 		-- Torno (Lathe)
	-- 		-- We have given up
	
	-- 		select '9f7d3a1a-b218-44a0-b285-c58ed0749a5a'::uuid, 'Sport', NULL, p_material_type_normal_id, p_created_by_user_id union all
	-- 		select '9f7d3a4c-ef31-444d-b9ce-e0277d883c69'::uuid, 'Art', NULL, p_material_type_normal_id, p_created_by_user_id
	-- 		on conflict(id) do nothing
	-- 		returning id
	-- 	)
	-- 	select array_agg(inserted.id) into p_uuids from inserted;
	-- if p_messages then raise notice 'Bakeloria materials checked, % inserted', array_upper(p_uuids, 1); end if;

	-- Year 12 materials only
	p_bakeloria_materials = ARRAY[
	    -- Old
	    'cdc800ae-28be-11f0-a8a6-334555029afd'::uuid,
		'd675a530-28be-11f0-a2c9-9bb10fa15bd3'::uuid,
		'dd494c0e-28be-11f0-94e1-a7b2083dd749'::uuid,
		'e427a282-28be-11f0-8856-a7abd8a449c5'::uuid,
		'ecf3dae8-28be-11f0-91f7-f31527b6ca23'::uuid,
		'f3c853a8-28be-11f0-8938-73b157eb85a1'::uuid,
		'fa61ead0-28be-11f0-9fb3-2bbf7e1c7c7c'::uuid,
		'005bba60-28bf-11f0-bf7f-cff663f8102b'::uuid,
		'd43af2a2-2bd9-11f0-b08b-5fd59b502470'::uuid,
		'd8168f4e-2bd9-11f0-97a5-1b42cf640b5b'::uuid,
		'd84f8434-2bd9-11f0-bfa1-7b92380571bd'::uuid,
		p_jineologi_material,
		-- New
		'b025cfe2-50f3-11f0-96d9-13090f80441e'::uuid,
		'9f7d3005-1327-40a4-9d99-ad83d2358741'::uuid,
		'9f7d3043-29c9-4a93-9417-374158b3fb10'::uuid,
		'9f7d3073-300e-44a0-aa45-b738e474e871'::uuid,
		'9f7d30cd-6ceb-4841-bfd3-5b7de5f8085f'::uuid,
		'9f7d310c-48de-40c8-a5a8-b9c406a779de'::uuid,
		'9f7d3139-9d3f-4965-970c-972c8824c6b4'::uuid,
		'9f7d3165-47e2-4239-9373-6f5bb82464a1'::uuid,
		'9f7d319d-bf6f-4662-a864-de0c7c1f35a0'::uuid,
		'9f7d3210-28c4-4b3d-a914-568d1b2b7987'::uuid,
		'9f7d32e0-2739-4ad6-9d1b-253a034c1ac2'::uuid,
		'9f7d3312-291e-41a9-a5fe-e297d597e2dc'::uuid,
		'9f7d3342-ed04-4edd-a956-da51c02f58f4'::uuid,
		'9f7d35eb-1782-4478-9e13-cc08eac51af5'::uuid,
		'9f7d3615-0c25-4950-b326-01e832505ccc'::uuid,
		'9f7d363a-d062-4f98-8b96-6a8fdaa7e6eb'::uuid,
		'9f7d3661-f29f-4b5c-bf18-b49df3d424c7'::uuid,
		'9f7d368c-0ca7-4f3a-abc5-7991ce322b9f'::uuid,
		'9f7d36b3-24d8-4537-a12b-a666197847c1'::uuid,
		'9f7d36da-d87f-4fe2-83fe-fb6269b26c7b'::uuid,
		'9f7d3700-135b-4322-9c21-aa8ad1e49c1e'::uuid,
		'9f7d3735-b592-45f9-bb09-f3cb237c1f76'::uuid,
		'9f7d375d-0c8d-4587-81d2-208632503d48'::uuid,
		'9f7d3835-0cdf-487b-8daf-846854567178'::uuid,
		'9f7d3861-f5b4-4e32-8de6-613fa2935b32'::uuid,
		'9f7d3886-ce95-4120-bf5e-c26355e1cc6d'::uuid,
		'9f7d38a9-a00b-45a7-88dc-e1ca69b0f92d'::uuid,

		'9f83484d-e6cb-49c3-994b-fdb976ceba92'::uuid,
		
		'9f7d5a21-3c5c-4242-a091-5a3bf4fd829a'::uuid,

		-- Agriculture
		'9f7d38d4-7ee0-432a-a613-13f1e8fc470d'::uuid,
		'9f7d38fb-2d86-4697-aaaa-2c7c744d2eed'::uuid,
		'9f7d391f-7aff-4a7c-a689-c3c58f72b430'::uuid,
		'9f7d3948-80cc-4fd1-bca2-774b7eea6b1a'::uuid,
		'9f7d3976-aa21-471b-8a43-c4c5072e7a85'::uuid,
		'9f83489a-47d5-47ad-8a11-d877272a51ee'::uuid,

		-- Electronics
		'9f8d429b-fd97-437b-9a8f-dfaac8432db2'::uuid,
		'9f8d42ca-567a-4106-b583-28281ba8ec35'::uuid,
		'9f8d42fb-0e1e-4459-8351-cac9a6828060'::uuid,
		'9f8d4247-f04c-4bc5-9328-62a186e45574'::uuid,

		-- Torno
		'9fc5c7b4-ce62-48dc-ab40-3b867f68aeb9'::uuid,
		'9fc5c768-a4b5-4a84-9af0-3a068ea51aaf'::uuid,
		'9fc5c724-21a2-400c-9971-4009a27b3d5c'::uuid,
		'9fc5c6fa-c451-4549-8196-cd4239e9c959'::uuid,

		-- Sport & Art
		'9f7d3a1a-b218-44a0-b285-c58ed0749a5a'::uuid,
		'9f7d3a4c-ef31-444d-b9ce-e0277d883c69'::uuid
	];

	-- Initially we add all materials to all courses
	-- they can be edited afterwards
	WITH inserted as (
		insert into acorn_university_course_materials(
			course_id, material_id, 
			required, minimum, maximum, weight, 
			academic_year_semester_id, course_year_id, created_by_user_id
		)
			-- Year 12: Science, Literature, etc., lots of materials
			select cs.id, m.id, 
				(m.id = p_jineologi_material), -- Jineologi required
				p_pass_min, 100, 50, 
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				inner join acorn_university_entities en_cs on en_cs.id = cs.entity_id
				where not array_position(p_bakeloria_materials, m.id) is null
				and cs.course_type_id = p_course_type_high_school
				and not en_cs.id in(p_year_11_entity_id, p_year_10_entity_id, p_year_9_entity_id)
			union all
			-- Year 11. 1 material
			select cs.id, m.id, 
				false, p_pass_min, 100, 50,
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				where m.id = '7f5c4156-2e53-11f0-8601-43470f236a9e'::uuid
				and cs.entity_id = p_year_11_entity_id
			union all
			-- Year 10. 1 material
			select cs.id, m.id, 
				false, p_pass_min, 100, 50,
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				where m.id = '7f5c3dc8-2e53-11f0-8600-6ff513625846'::uuid
				and cs.entity_id = p_year_10_entity_id
			union all
			-- Year 9. 1 material
			select cs.id, m.id, 
				false, p_pass_min, 100, 50,
				p_bakeloria_semester1, p_course_year_id, p_created_by_user_id
				from acorn_university_materials m,
				acorn_university_courses cs
				where m.id = 'ee22cafe-502e-11f0-90c2-3702c192c6ec'::uuid
				and cs.entity_id = p_year_9_entity_id
			on conflict do nothing
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria course materials inserted (all => all). Edit if needed', array_upper(p_uuids, 1); end if;

	-- ######################################### Exams
	-- => course_materials
	WITH inserted as (
		insert into acorn_exam_exam_materials(exam_id, course_material_id, created_by_user_id)
			select p_exam_theory_id, unnest, p_created_by_user_id
			from unnest(p_uuids)
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Bakeloria exam materials inserted', array_upper(p_uuids, 1); end if;

	-- ######################################### Scores
	-- 0 score means 0 score
	-- NULL score means that the student did not NEED to take the exam
	-- ###################### Year 9,10,11
	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.year_11, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id,
				-- Course materials + exam
				acorn_university_courses cs
				inner join acorn_university_course_materials cm on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				where cs.entity_id = p_year_11_entity_id and m.name = 'Year 11'
					and not bm.year_11 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Year 11 Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.year_10, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id,
				-- Course materials + exam
				acorn_university_courses cs
				inner join acorn_university_course_materials cm on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				where cs.entity_id = p_year_10_entity_id and m.name = 'Year 10'
					and not bm.year_10 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Year 10 Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.year_9, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id,
				-- Course materials + exam
				acorn_university_courses cs
				inner join acorn_university_course_materials cm on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				where cs.entity_id = p_year_9_entity_id and m.name = 'Year 9'
					and not bm.year_9 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Year 9 Marks inserted', array_upper(p_uuids, 1); end if;

	-- ###################### Year 12: Science, Literature, etc.
	-- Multiple materials
	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.math, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Maths'              -- Material name (Math, etc.)
					and not bm.math is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Math Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.biology, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Biology'              -- Material name (Math, etc.)
					and not bm.biology is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Biology Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.physics, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Physics'              -- Material name (Mathc, etc.)
					and not bm.physics is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Physics Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.geography, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Geography'              -- Material name (Mathc, etc.)
					and not bm.geography is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Geography Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.chemistry, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Chemistry'              -- Material name (Mathc, etc.)
					and not bm.chemistry is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Chemistry Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.kurdish_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Kurdish'              -- Material name (Mathc, etc.)
					and not bm.kurdish_language is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Kurdish Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.english_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'English'              -- Material name (Mathc, etc.)
					and not bm.english_language is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate English Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.arabic_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Arabic'              -- Material name (Mathc, etc.)
					and not bm.arabic_language is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Arabic Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.history, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'History'              -- Material name (Mathc, etc.)
					and not bm.history is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate History Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.philosophy, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Philosophy'              -- Material name (Mathc, etc.)
					and not bm.philosophy is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Philosophy Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.sociology, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Sociology'              -- Material name (Mathc, etc.)
					and not bm.sociology is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Sociology Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.science_of_woman, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Jineologi'              -- Material name (Mathc, etc.)
					and not bm.science_of_woman is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Jineologi Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.community_language, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi 
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP 
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm 
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id
				
				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code
					
					and m.name = 'Community Language'              -- Material name (Mathc, etc.)
					and not bm.community_language is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Community Language Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.physics_and_chemistry, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Physics and Chemistry'              -- Material name (Mathc, etc.)
					and not bm.physics_and_chemistry is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.anatomy, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Anatomy'              -- Material name (Mathc, etc.)
					and not bm.anatomy is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.nursing, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Nursing'              -- Material name (Mathc, etc.)
					and not bm.nursing is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.rays, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Rays'              -- Material name (Mathc, etc.)
					and not bm.rays is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.anesthetization, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Anesthetization'              -- Material name (Mathc, etc.)
					and not bm.anesthetization is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.physical_therapy, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Physical therapy'              -- Material name (Mathc, etc.)
					and not bm.physical_therapy is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.pharmacy, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Pharmacy'              -- Material name (Mathc, etc.)
					and not bm.pharmacy is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.lab, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Lab'              -- Material name (Mathc, etc.)
					and not bm.lab is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.internal_combustion_engines, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Internal Combustion Engines'              -- Material name (Mathc, etc.)
					and not bm.internal_combustion_engines is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.mechanical_engineering_drawing_3, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Mechanical Engineering Drawing 3'              -- Material name (Mathc, etc.)
					and not bm.mechanical_engineering_drawing_3 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.vehicle_control_systems, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Vehicle control systems'              -- Material name (Mathc, etc.)
					and not bm.vehicle_control_systems is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.diesel_fuel_injection_systems, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Diesel fuel injection systems'              -- Material name (Mathc, etc.)
					and not bm.diesel_fuel_injection_systems is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.electrical_appliances_2, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Electrical appliances 2'              -- Material name (Mathc, etc.)
					and not bm.electrical_appliances_2 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.automated_command_and_control, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Automated command and control'              -- Material name (Mathc, etc.)
					and not bm.automated_command_and_control is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.electrical_engineering_drawing_3, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Electrical Engineering Drawing 3'              -- Material name (Mathc, etc.)
					and not bm.electrical_engineering_drawing_3 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.electronics_3, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Electronics 3'              -- Material name (Mathc, etc.)
					and not bm.electronics_3 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.hardware_and_software_maintenance_2, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Hardware and software maintenance 2'              -- Material name (Mathc, etc.)
					and not bm.hardware_and_software_maintenance_2 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.programming_3, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Programming 3'              -- Material name (Mathc, etc.)
					and not bm.programming_3 is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.network_management, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Network management'              -- Material name (Mathc, etc.)
					and not bm.network_management is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.computer_applications, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Computer applications'              -- Material name (Mathc, etc.)
					and not bm.computer_applications is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.marketing, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Marketing'              -- Material name (Mathc, etc.)
					and not bm.marketing is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.bank_accounting, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Bank accounting'              -- Material name (Mathc, etc.)
					and not bm.bank_accounting is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.financial_institutions_accounting, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Financial Institutions Accounting'              -- Material name (Mathc, etc.)
					and not bm.financial_institutions_accounting is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.private_accounting, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Private accounting'              -- Material name (Mathc, etc.)
					and not bm.private_accounting is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.computer, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Computer'              -- Material name (Mathc, etc.)
					and not bm.computer is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.financial_mathematics, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Financial Mathematics'              -- Material name (Mathc, etc.)
					and not bm.financial_mathematics is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.statistics, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Statistics'              -- Material name (Mathc, etc.)
					and not bm.statistics is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.food_industries, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Food industries'              -- Material name (Mathc, etc.)
					and not bm.food_industries is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.dairy, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Dairy'              -- Material name (Mathc, etc.)
					and not bm.dairy is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.gardening, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Gardening'              -- Material name (Mathc, etc.)
					and not bm.gardening is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.farm_animal, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Farm animal'              -- Material name (Mathc, etc.)
					and not bm.farm_animal is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.agricultural_pests, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Agricultural pests'              -- Material name (Mathc, etc.)
					and not bm.agricultural_pests is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.sport, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Sport'              -- Material name (Mathc, etc.)
					and not bm.sport is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.art, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Art'              -- Material name (Mathc, etc.)
					and not bm.art is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.web_design, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Web Design'              -- Material name (Mathc, etc.)
					and not bm.web_design is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.micro_organisms, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Micro Organisms'              -- Material name (Mathc, etc.)
					and not bm.micro_organisms is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.televison, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Televison'              -- Material name (Mathc, etc.)
					and not bm.televison is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.electronic_device_maintenance, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Electronic Device Maintenance'              -- Material name (Mathc, etc.)
					and not bm.electronic_device_maintenance is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.antennas, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Antennas'              -- Material name (Mathc, etc.)
					and not bm.antennas is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.protection_and_alarm_systems, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Protection and Alarm Systems'              -- Material name (Mathc, etc.)
					and not bm.protection_and_alarm_systems is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	-- New Torno
	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.turning, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Turning'              -- Material name (Mathc, etc.)
					and not bm.turning is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.industrial_drawing, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Industrial Drawing'              -- Material name (Mathc, etc.)
					and not bm.industrial_drawing is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.cnc, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Cnc'              -- Material name (Mathc, etc.)
					and not bm.cnc is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_exam_scores(student_id, exam_material_id, score, created_by_user_id)
			select st.id, em.id, bm.separator, p_created_by_user_id
				from university_mofadala_baccalaureate_marks bm
				inner join acorn_university_students st on st.import_source = p_imported || ' university_mofadala_baccalaureate_marks:' || bm.id
				inner join acorn_user_users u on st.user_id = u.id
				inner join acorn_user_user_group_version ugv on ugv.user_id = u.id
				-- Hierarchy Course
				inner join acorn_university_hierarchies hi
					on hi.user_group_version_id = ugv.user_group_version_id and hi.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_cs on hi.entity_id = en_cs.id
				inner join acorn_user_user_groups ugs_cs on en_cs.user_group_id = ugs_cs.id
				inner join acorn_university_courses cs on cs.entity_id = en_cs.id
				-- Parent hierarchy School
				inner join acorn_university_hierarchies hiP
					on hiP.id = hi.parent_id and hiP.academic_year_id = p_bakeloria_academic_year_id
				inner join acorn_university_entities en_sch on hiP.entity_id = en_sch.id
				inner join acorn_user_user_groups ugs_sch on en_sch.user_group_id = ugs_sch.id
				inner join acorn_university_schools sch on sch.entity_id = en_sch.id
				-- Course materials + exam
				inner join acorn_university_course_materials cm
					on cs.id = cm.course_id and cm.academic_year_semester_id = p_bakeloria_semester1
				inner join acorn_exam_exam_materials em on em.course_material_id = cm.id
				inner join acorn_university_materials m on cm.material_id = m.id

				where fn_acorn_university_legacy_import_certificate_code(fn_acorn_university_legacy_import_county(bm.county), bm.certificate) = ugs_cs.code

					and m.name = 'Separator'              -- Material name (Mathc, etc.)
					and not bm.separator is null
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Baccalaureate Marks inserted', array_upper(p_uuids, 1); end if;

	-- ##################################### Set course_materials minimums
	-- Prune Science and Literature Specializations
	-- p_standard text[] := ARRAY['Maths', 'Physics', 'Chemistry', 'Biology', 'History', 'Geography', 'Philosophy', 'Sociology', 'Jineologi', 'Sport', 'Art'];
	-- p_language text[] := ARRAY['Community Language', 'Kurdish', 'English', 'Arabic'];
	-- p_normal_certificates text[] := ARRAY['Science', 'Literature'];
	/*
	delete from public.acorn_university_course_materials cm
		where course_id in(select c.id 
			from public.acorn_university_courses c
			inner join public.acorn_university_entities en on c.entity_id = en.id
			inner join public.acorn_user_user_groups ugs on en.user_group_id = ugs.id
			where ugs.name in('Science', 'Literature')
		)
		and material_id in(select m.id
			from acorn_university_materials m
			where array_position(ARRAY['Community Language', 'Kurdish', 'English', 'Arabic'], m.name) is null
			and   array_position(p_standard, m.name) is null
		);
	*/
	
	-- All Specializations => 50%
	update public.acorn_university_course_materials cm
		set minimum = 50
		where material_id in(select m.id
			from acorn_university_materials m
			where array_position(p_language, m.name) is null
			and   array_position(p_standard, m.name) is null
		);
	-- Specializations => 60%
	update public.acorn_university_course_materials cm
		set minimum = 60
		where course_id in(select c.id 
			from public.acorn_university_courses c
			inner join public.acorn_university_entities en on c.entity_id = en.id
			inner join public.acorn_user_user_groups ugs on en.user_group_id = ugs.id
			where ugs.name in('Agriculture')
		)
		and material_id in(select m.id
			from acorn_university_materials m
			where array_position(p_language, m.name) is null
			and   array_position(p_standard, m.name) is null
		);
	-- Kurdish & Arabic => 50%
	update public.acorn_university_course_materials cm
		set minimum = 50
		where course_id in(select c.id 
			from public.acorn_university_courses c
			inner join public.acorn_university_entities en on c.entity_id = en.id
			inner join public.acorn_user_user_groups ugs on en.user_group_id = ugs.id
			where ugs.name in('Medicine', 'Commerce', 'Agriculture')
		)
		and material_id in(select m.id
			from acorn_university_materials m
			where not array_position(ARRAY['Kurdish', 'Arabic'], m.name) is null
		);
	-- All Other Certificates, all materials required 
	-- except Network Management
	update public.acorn_university_course_materials cm
		set required = true
		where course_id in(select c.id 
			from public.acorn_university_courses c
			inner join public.acorn_university_entities en on c.entity_id = en.id
			inner join public.acorn_user_user_groups ugs on en.user_group_id = ugs.id
			-- Other Certificates
			where array_position(p_normal_certificates, ugs.name) is null
		)
		and not material_id in(select m.id
			from acorn_university_materials m
			where m.name in('Network management')
		);
end;
$_$;


ALTER FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous boolean, p_messages boolean) OWNER TO university;

--
-- Name: fn_acorn_university_legacy_import_branche_to_course(character varying, character varying); Type: FUNCTION; Schema: public; Owner: sz
--

CREATE FUNCTION public.fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying) RETURNS character varying
    LANGUAGE sql
    AS $$
	select initcap(case 
					when p_course_name = '' or p_course_name is null then 
						regexp_replace(p_branche_name, '^Faculty *Of *|^(The )High *Institute *of *|^Institute *of *|^Organisation *of *', '', 'i')
					else p_course_name
				end);
$$;


ALTER FUNCTION public.fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying) OWNER TO sz;

--
-- Name: fn_acorn_university_legacy_import_certificate_code(character varying, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_legacy_import_certificate_code(p_county_name character varying, p_certificate_name character varying) RETURNS character varying
    LANGUAGE sql
    AS $$
	select 'B' 
		|| fn_acorn_user_code(p_county_name)
		|| fn_acorn_user_code(replace(replace(replace(replace(p_certificate_name, 
			'Electrical', 'L'), 
			'Electricity', 'L'),
			'Apprentice - ', 'AP'),
			'Commerce', 'ECN') -- Stop conflict with Computer
		);
$$;


ALTER FUNCTION public.fn_acorn_university_legacy_import_certificate_code(p_county_name character varying, p_certificate_name character varying) OWNER TO university;

--
-- Name: fn_acorn_university_legacy_import_county(character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_legacy_import_county(p_county character varying) RETURNS character varying
    LANGUAGE sql
    AS $$
	select case
		-- Prefer the 2023-24 Wikipedia value, not new Spreadsheet value
		when p_county = 'Cizire' then 'Cizîrê' 
		-- Wikipedia local spelling
		-- https://mesopotamia.coop/cities/tabqa/
		when p_county = 'Tepqa'  then 'Tebqa'
		when p_county = 'Firat'  then 'Fûrat'
		-- Kurdish name
		-- https://en.wikipedia.org/wiki/Raqqa
		when p_county = 'Raqqa'  then 'Reqa'
		when p_county = 'Raqa'   then 'Reqa'
		when p_county = 'şehba' then 'Şehba'
		when p_county = 'Efrîn û şehba' then 'Efrîn û Şehba'
		else p_county
	end;
$$;


ALTER FUNCTION public.fn_acorn_university_legacy_import_county(p_county character varying) OWNER TO university;

--
-- Name: fn_acorn_university_legacy_import_enrollment(boolean, boolean, boolean, boolean); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_legacy_import_enrollment(p_import_mofadala_students boolean DEFAULT true, p_enroll_students_into_courses boolean DEFAULT true, p_delete_previous boolean DEFAULT true, p_messages boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
declare
	-- Import Bakeloria & Mofadala students from a legacy university-acceptance database
	-- for a given source-target year
	--   university_mofadala_baccalaureate_marks => bakeloria students only (no university_mofadala_students entry)
	--   university_mofadala_students            => bakeloria + mofadala students

	-- Inserting
	p_uuid uuid;
	p_uuids uuid[];
	p_hi_uuids uuid[];
	p_created_by_user_id uuid;
	p_imported character varying(1024);
	p_imported_like character varying(1024);
	
	-- Years
	p_mofadala_source_year_simple_name character varying(1024);
	p_mofadala_source_year_name character varying(1024);
	p_mofadala_academic_year_id  uuid;
	p_mofadala_academic_year_name character varying(1024);

	-- Education Authorities (university_category) hierarchy entries (checked below)
	p_top_node_entity_id   uuid := '5a722502-2cfc-11f0-8fc6-4f662cb2699a'::uuid;
	-- Lazy created for year
	p_mofadala_hi_top_level_node uuid;  -- Mofadala year TLN

	-- Addresses (required, checked below)
	p_area_type_city    uuid := '1ecf9d88-e963-4563-9dea-d9ef246977eb'::uuid;
	p_area_type_village uuid := '4c09bda0-32fe-41da-933e-d7fc441e15ce'::uuid;
	p_area_type_town    uuid := '4eb637b9-7a39-4c90-9308-8c01929b019c'::uuid;
	p_area_type_canton  uuid := '558b28b3-46b3-4e4e-84ce-021376882018'::uuid;
	p_area_type_country uuid := '8dfda3c6-3f2c-4a3a-a72a-f4e9391dd282'::uuid;
	p_area_type_commune uuid := 'b3de00b7-c169-40d5-9546-4d5f5715b014'::uuid;

	-- Course Type (seeded, checked below)
	p_course_type_middle_school uuid := '65ddc034-4e96-11f0-91c1-3f7ba40fcde3'::uuid;
	p_course_type_high_school   uuid := 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid;
	p_course_type_university    uuid := 'd0691d2e-3f99-11f0-99fb-37aeb35eedd1'::uuid;
	
	-- Misc
	p_syrian_nation_identity_type_id uuid := 'd9f5affa-4873-11f0-8711-cb311b854057'::uuid;
begin
	-- TODO: Updates to existing entity import_source will cause those objects to be deleted on re-import
	-- TODO: Unique Student conflicts, how to identify? name?
	p_created_by_user_id := fn_acorn_user_get_seed_user();

	-- Check course types are seeded
	if not exists(select * from public.acorn_university_course_types where id = p_course_type_university) then
		raise exception 'Course type University does not exist';
	end if;

	-- Mofadala target processing years from university-acceptance database
	--   **2024 (Mofadala) => Bakeloria results end of 2023-2024, Mofadala beginning 2024-2025
	--     2025 (Mofadala) => Bakeloria results end of 2024-2025, Mofadala beginning 2025-2026
	select my.name, my.name || '-' || (my.name::int + 1) -- 2024 => 2024-2025
		into p_mofadala_source_year_simple_name, p_mofadala_source_year_name
		from university_mofadala_mofadala_years my
		where my.is_active;
	if p_mofadala_source_year_name is null then raise exception 'Active Source Mofadala year not found'; end if;
	if p_messages then raise notice 'Source Mofadala year: % => %', p_mofadala_source_year_simple_name, p_mofadala_source_year_name; end if;
	select id, name into p_mofadala_academic_year_id, p_mofadala_academic_year_name
		from acorn_university_academic_years ay
		where ay.name = p_mofadala_source_year_name;
	if p_mofadala_academic_year_id is null then raise exception 'Mofadala target year % not found', p_mofadala_source_year_name; end if;
	if p_messages then raise notice 'Mofadala year: %', p_mofadala_academic_year_name; end if;

	p_imported      := 'Import-v1 from Mofadala year ' || p_mofadala_academic_year_name;
	p_imported_like := p_imported || '%';

	if p_delete_previous then
		-- This will cascade to entities, leafs and hierarchies
		delete from acorn_user_user_groups       where import_source like(p_imported_like);
		delete from acorn_user_users             where import_source like(p_imported_like);
		delete from acorn_location_addresses     where import_source like(p_imported_like);
		update      acorn_location_areas set parent_area_id = NULL where import_source like(p_imported_like);
		delete from acorn_location_areas         where import_source like(p_imported_like);
		-- delete from acorn_location_areas cascade where import_source like(p_imported_like);
		if p_messages then raise notice 'Deleted previously imported data for %', p_imported_like; end if;
		-- delete from acorn_university_hierarchies where description like('Imported from%') or import_source like('Imported from%');
		-- delete from acorn_user_user_groups       where description like('Imported from%') or import_source like('Imported from%');
		-- delete from acorn_user_users             where import_source like('Imported from%');
	end if;

	-- ######################################### Top Level Node EA for Rojava
	-- no parent
	if not exists(select * from acorn_university_entities where id = p_top_node_entity_id) then 
		-- user group
		insert into acorn_user_user_groups(name, code) values('Rojava Education Authority', 'EATLN')
			returning id into p_uuid;
		-- entity
		insert into acorn_university_entities(id, user_group_id, created_by_user_id)
			values(p_top_node_entity_id, p_uuid, p_created_by_user_id);
		-- TLN Education Authority
		insert into acorn_university_education_authorities(entity_id) values(p_top_node_entity_id);
		if p_messages then raise notice 'TLN Education Committee inserted'; end if;
	end if;
	-- Hierarchy for this year (lazy create)
	select id into p_mofadala_hi_top_level_node 
		from acorn_university_hierarchies 
		where entity_id = p_top_node_entity_id 
		and academic_year_id = p_mofadala_academic_year_id
		and parent_id is null;
	if p_mofadala_hi_top_level_node is null then
		insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id, created_by_user_id, import_source)
			values(p_top_node_entity_id, p_mofadala_academic_year_id, NULL, p_created_by_user_id, p_imported || ' ea:' || p_mofadala_academic_year_name)
			returning id into p_mofadala_hi_top_level_node;
		if p_messages then raise notice '% Top Level Node Education Authority hierarchy inserted', p_mofadala_academic_year_name; end if;
	else
		if p_messages then raise notice '% Top Level Node Education Authority hierarchy found', p_mofadala_academic_year_name; end if;
	end if;

	-- ######################################### Education Authorities
	-- university_mofadala_university_categories => Education Authorities
	--   Hemahengiya Zanîngehên => HZ
	--   Desteya Perwerdehiyê   => DP
	--   Desteya Tenduristî     => DT
	-- UNIQUE: code
	-- UNIQUE: import_source
	WITH inserted as (
		insert into acorn_user_user_groups(name, code, import_source) 
			select initcap(name), 'EA' || fn_acorn_user_code_acronym(name), p_imported || ' university_mofadala_university_categories:' || uc.id
			from university_mofadala_university_categories uc
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Education Committees User Groups inserted', array_upper(p_uuids, 1); end if;
		
	WITH inserted as (
		insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
			select ugs.id, p_created_by_user_id, ugs.import_source
			from acorn_user_user_groups ugs
			inner join unnest(p_uuids) on ugs.id = unnest
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Education Committees Entities inserted', array_upper(p_uuids, 1); end if;

	-- Education Authorities
	WITH inserted as (
		insert into acorn_university_education_authorities(entity_id)
			select unnest from unnest(p_uuids)
			returning id
		)
		select array_agg(inserted.id) into p_hi_uuids from inserted;
	if p_messages then raise notice '% Education Committees inserted', array_upper(p_hi_uuids, 1); end if;

	-- Place those entities under the general Education Authority top level node
	insert into acorn_university_hierarchies(entity_id, academic_year_id, parent_id, import_source, created_by_user_id)
		select unnest, p_mofadala_academic_year_id, p_mofadala_hi_top_level_node, en.import_source, p_created_by_user_id 
		from acorn_university_entities en
		inner join unnest(p_uuids) on en.id = unnest;
	if p_messages then raise notice 'Education Committees added to %', p_mofadala_academic_year_name; end if;

	-- ######################################### Universities (Mofadala)
	-- "Rojava", "Kobani", "Sherq", 
	-- "Desteya Health", "Desteya Education for the Jezira region", 
	-- "Desteya Education for the Efrin and Shehbay regions", "Desteya cand u huner"
	WITH inserted as (
		insert into acorn_user_user_groups(name, code, import_source) 
			select initcap(name), code, p_imported || ' university_mofadala_universities:' || s.id
			from university_mofadala_universities s
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% University User Groups inserted', array_upper(p_uuids, 1); end if;
		
	WITH inserted as (
		insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
			select ugs.id, p_created_by_user_id, ugs.import_source
			from acorn_user_user_groups ugs
			inner join unnest(p_uuids) on ugs.id = unnest
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% University Entities inserted', array_upper(p_uuids, 1); end if;

	-- Universities
	WITH inserted as (
		insert into acorn_university_universities(entity_id)
			select unnest from unnest(p_uuids)
			returning id
		)
		select array_agg(inserted.id) into p_hi_uuids from inserted;
	if p_messages then raise notice '% Universities inserted', array_upper(p_hi_uuids, 1); end if;

	-- Place them under their associated university_category_id
	insert into acorn_university_hierarchies(academic_year_id, import_source, created_by_user_id, entity_id, parent_id)
		select p_mofadala_academic_year_id, p_imported || ' university_mofadala_universities:' || un.id, p_created_by_user_id,
			(select id from acorn_university_entities where import_source = p_imported || ' university_mofadala_universities:' || un.id), 
			(select id from acorn_university_hierarchies hi where import_source = p_imported || ' university_mofadala_university_categories:' || uc.id and hi.academic_year_id = p_mofadala_academic_year_id)
			from university_mofadala_universities un
			inner join university_mofadala_university_categories uc on uc.id = un.university_category_id
		on conflict do nothing;

    -- ######################################### Faculties (Mofadala)
	WITH inserted as (
		insert into acorn_user_user_groups(name, code, import_source) 
			select  initcap(name), fn_acorn_user_code_acronym(name) || id, p_imported || ' university_mofadala_branches:' || s.id
			from university_mofadala_branches s
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Faculty User Groups inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
			select ugs.id, p_created_by_user_id, ugs.import_source
			from acorn_user_user_groups ugs
			inner join unnest(p_uuids) on ugs.id = unnest
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% Faculty Entities inserted', array_upper(p_uuids, 1); end if;

	-- Faculties
	WITH inserted as (
		insert into acorn_university_faculties(entity_id)
			select unnest from unnest(p_uuids)
			returning id
		)
		select array_agg(inserted.id) into p_hi_uuids from inserted;
	if p_messages then raise notice '% Faculties inserted', array_upper(p_hi_uuids, 1); end if;

	-- Place them under their associated university_id
	insert into acorn_university_hierarchies(academic_year_id, import_source, created_by_user_id, entity_id, parent_id)
		select p_mofadala_academic_year_id, p_imported || ' university_mofadala_branches:' || br.id, p_created_by_user_id,
			(select id from acorn_university_entities where import_source = p_imported || ' university_mofadala_branches:' || br.id), 
			(select id from acorn_university_hierarchies hi where import_source = p_imported || ' university_mofadala_universities:' || un.id and hi.academic_year_id = p_mofadala_academic_year_id)
			from university_mofadala_branches br
			inner join university_mofadala_universities un on un.id = br.university_id
		on conflict do nothing;

	-- ######################################### Courses (Mofadala in Universities)
	-- These repeat in different universities
	-- p_course_type_course      := '0d6f1d8c-3ecc-11f0-a5ad-2b8a887dec31'::uuid;
	-- p_course_type_middle_school uuid := '65ddc034-4e96-11f0-91c1-3f7ba40fcde3'::uuid;
	-- p_course_type_high_school := 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid;
	-- p_course_type_university  := 'd0691d2e-3f99-11f0-99fb-37aeb35eedd1'::uuid;
	WITH inserted as (
		insert into acorn_user_user_groups(name, code, import_source)
			select fn_acorn_university_legacy_import_branche_to_course(s.name, br.name),
				fn_acorn_user_code_acronym(fn_acorn_university_legacy_import_branche_to_course(s.name, br.name)) || s.id, 
				p_imported || ' university_mofadala_departments:' || s.id
			from university_mofadala_departments s
			inner join university_mofadala_branches br on s.branche_id = br.id
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% University Course User Groups inserted', array_upper(p_uuids, 1); end if;

	WITH inserted as (
		insert into acorn_university_entities(user_group_id, created_by_user_id, import_source)
			select ugs.id, p_created_by_user_id, ugs.import_source
			from acorn_user_user_groups ugs
			inner join unnest(p_uuids) on ugs.id = unnest
			returning id
		)
		select array_agg(inserted.id) into p_uuids from inserted;
	if p_messages then raise notice '% University Course Entities inserted', array_upper(p_uuids, 1); end if;

	-- Courses
	WITH inserted as (
		insert into acorn_university_courses(entity_id, course_type_id)
			select unnest, p_course_type_university -- University
			from unnest(p_uuids)
			returning id
		)
		select array_agg(inserted.id) into p_hi_uuids from inserted;
	if p_messages then raise notice '% University Courses inserted', array_upper(p_hi_uuids, 1); end if;
	
	-- Place them under their associated faculty_id
	insert into acorn_university_hierarchies(academic_year_id, import_source, created_by_user_id, entity_id, parent_id)
		select p_mofadala_academic_year_id, p_imported || ' university_mofadala_departments:' || dp.id, p_created_by_user_id,
			(select id from acorn_university_entities where import_source = p_imported || ' university_mofadala_departments:' || dp.id), 
			(select id from acorn_university_hierarchies hi where import_source = p_imported || ' university_mofadala_branches:' || br.id and hi.academic_year_id = p_mofadala_academic_year_id)
			from university_mofadala_departments dp
			inner join university_mofadala_branches br on br.id = dp.branche_id
		on conflict do nothing;
	if p_messages then raise notice 'University Course Entities placed under their Departments (branches)'; end if;

	if p_import_mofadala_students then
		-- ######################################### Students (=Mofadala)
		-- university_mofadala_students with optional university_mofadala_baccalaureate_marks info
		-- university_mofadala_baccalaureate_marks: bakeloria code, father_name & mother_name, full_name, place_and_date_of_birth
		-- was copied in to university_mofadala_students during registration already
		WITH inserted as (
			-- acorn_university_students:
			-- id, username, email, password, 
			-- name, surname, birth_date,
			-- 
			-- activated_at, activation_code, created_ip_address, last_ip_address, persist_code, reset_password_code, 
			-- last_login, last_seen,
			-- created_at, updated_at, deleted_at, 
			-- permissions, is_guest, is_superuser, is_activated, is_system_user, 
			--
			-- acorn_imap_username, acorn_imap_password, acorn_imap_server, acorn_imap_port, acorn_imap_protocol, acorn_imap_encryption, acorn_imap_authentication, acorn_imap_validate_cert, 
			-- acorn_smtp_server, acorn_smtp_port, acorn_smtp_encryption, acorn_smtp_authentication, acorn_smtp_username, acorn_smtp_password, 
			-- acorn_messaging_sounds, acorn_messaging_email_notifications, acorn_messaging_autocreated, acorn_imap_last_fetch, 
			-- acorn_default_calendar, acorn_start_of_week, acorn_default_event_time_from, acorn_default_event_time_to
			insert into acorn_user_users(
				username, email, password,
				name, surname, birth_date, 
				fathers_name, mothers_name, 
				gender, marital_status, 
				-- Special, temporary during import:
				import_source
			)
				-- ## university_mofadala_students:
				-- TODO:
				-- self_image, image, 
				-- place_of_birth, 
				-- cell_phone, tell_phone, emergency_number, 
				--
				-- center_id, mofadala_year_id, 
				-- hs_certificate_image, certificate_date, certificate_language_id, certificate_source, 
				-- attending_the_nomination_examination, there_is_a_candidacy_exam, candidate_exam_id, exam_center_id, candidacy_examination_score, 
				-- created_at, updated_at, 
				-- the_total, current_desire, enrollment_conflict, secondary_reallocation, enrollment_process_notes
				--
				-- NOT_REQUIRED|USED:
				-- user_id, constraint, id, information, 
				-- notes has 33 arabic values (IGNORED)
				select
					-- From university_mofadala_students
					lower(st.code), -- username: roj99
					case 
						when st.email = 'a@b.com' then NULL -- Will not trigger distinct NULLs
						when trim(st.email) = ''  then NULL
						when position('@' in st.email) = 0 then NULL
						when position('.' in st.email) = 0 then NULL
						else st.email
					end, 
					case  -- password => national ID or random UUID end
						when st.national_id is null then regexp_replace(gen_random_uuid()::text, '.*-', '')
						when st.national_id = '0'   then regexp_replace(gen_random_uuid()::text, '.*-', '')
						when st.national_id = ''    then regexp_replace(gen_random_uuid()::text, '.*-', '')
						else st.national_id
					end,
					st.first_name, st.last_name, st.birth_date,
					st.father_name, st.mother_name, 
					case
						when st.gender = 'male'   then 'M'
						when st.gender = 'female' then 'F'
						when st.gender = 'other'  then 'O'
						else NULL
					end, 
					case
						when st.marital_status = 'married' then 'M'
						when st.marital_status = 'single'  then 'S'
						when st.marital_status = 'other'   then 'O'
						else NULL
					end, 
					
					p_imported || ' university_mofadala_students:' || st.id
				from university_mofadala_students st
				left join university_mofadala_baccalaureate_marks bm on st.baccalaureate_mark_id = bm.id
				limit 10
				returning id
			)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Mofadala Student Users inserted', array_upper(p_uuids, 1); end if;

		WITH inserted as (
			insert into acorn_university_students(
					user_id, import_source,
					-- Legacy & from university_mofadala_baccalaureate_marks
					legacy_import_the_total, legacy_import_result, legacy_import_avg, legacy_import_total_mark
				)
				select u.id, p_imported || ' university_mofadala_students:' || st.id,
					-- Legacy & from university_mofadala_baccalaureate_marks
					st.the_total, bm.result, bm.avg, bm.total_mark
				from acorn_user_users u,
					university_mofadala_students st
					left join university_mofadala_baccalaureate_marks bm on st.baccalaureate_mark_id = bm.id
					where u.import_source = p_imported || ' university_mofadala_students:' || st.id
				returning id
			)
			select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Mofadala Students inserted', array_upper(p_uuids, 1); end if;

		-- Addresses
		-- address      => House number place
		-- family_place => Village
		-- cumin        => Commune, always named after a Matyr
		-- city_id      => City
		-- Checks of location seeding
		if not exists(select * from acorn_location_area_types where id = p_area_type_city)    then raise exception 'Location city type not seeded'; end if;
		if not exists(select * from acorn_location_area_types where id = p_area_type_commune) then raise exception 'Location commune type not seeded'; end if;
		if not exists(select * from acorn_location_area_types where id = p_area_type_village) then raise exception 'Location village type not seeded'; end if;
		-- Cities
		insert into acorn_location_areas(name, area_type_id, parent_area_id, import_source)
			select initcap(c.name), p_area_type_city, NULL, p_imported  
			from university_mofadala_students st
			inner join university_mofadala_cities c on st.city_id = c.id
			where not c.name is null and not c.name = ''
			on conflict do nothing; -- area_area_type unique constraint
		-- Communes
		insert into acorn_location_areas(name, area_type_id, parent_area_id, import_source)
			select initcap(cumin), p_area_type_commune, a_city.id, p_imported 
			from university_mofadala_students st
			inner join university_mofadala_cities c on st.city_id = c.id
			inner join acorn_location_areas a_city on area_type_id = p_area_type_city and initcap(c.name) = a_city.name
			where not cumin is null and not cumin = ''
			on conflict do nothing; -- area_area_type unique constraint
		-- Villages
		-- If not the same as Commune
		insert into acorn_location_areas(name, area_type_id, parent_area_id, import_source)
			select initcap(family_place), p_area_type_village, a_commune.id, p_imported 
			from university_mofadala_students st
			inner join acorn_location_areas a_commune on area_type_id = p_area_type_commune and initcap(st.cumin) = a_commune.name
			where not family_place is null and not family_place = ''
			and not lower(family_place) = lower(cumin)
			on conflict do nothing; -- area_area_type unique constraint
		-- Addresses
		insert into acorn_location_addresses(name, number, area_id, import_source)
			select 
				initcap(trim(regexp_replace(address, '[0-9]+', '', 'g'))),
				case 
					when trim(regexp_replace(address, '[^0-9]+', '', 'g')) = '' then NULL
					else trim(regexp_replace(address, '[^0-9]+', '', 'g'))::int
				end,
				coalesce(a_vil.id, a_com.id),
				p_imported || ' university_mofadala_students:' || st.id
			from university_mofadala_students st
			left join acorn_location_areas a_vil on a_vil.area_type_id = p_area_type_village and initcap(family_place) = a_vil.name 
			left join acorn_location_areas a_com on a_com.area_type_id = p_area_type_commune and initcap(cumin) = a_com.name
			where not coalesce(a_vil.id, a_com.id) is null
			on conflict do nothing; -- area_area_type unique constraint
		-- Finally, add the address to the student
		insert into acorn_location_user_addresses(user_id, address_id)
			select u.id, a.id
			from university_mofadala_students st
			inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_students:' || st.id
			inner join acorn_location_addresses a on a.import_source = s.import_source
			inner join acorn_user_users u on s.user_id = u.id;

		-- Language, matched by name
		-- Source ids
		-- 1 - Kurdish
		-- 2 - Arabic
		-- Target languages
		-- '9eaa5c4d-9080-4799-afa7-3741349b5beb', 'English', 'en'
		-- '9eaa5c43-db07-4597-ac8c-156253e84376', 'Kurdish', 'ku'
		-- '40aafb9e-41e2-11f0-8065-f75fd6b290d7', 'Arabic',  'ar'
		insert into acorn_user_user_languages(user_id, language_id)
			SELECT s.user_id, l.id 
				FROM university_mofadala_students st
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_students:' || st.id
				inner join university_mofadala_certificate_languages stl on st.certificate_language_id = stl.id
				inner join acorn_user_languages l on lower(l.name) = lower(stl.name);

		-- Notes
		insert into acorn_university_student_notes(name, description, student_id, entity_id, created_by_user_id)
			select 'Import', p_imported || ' university_mofadala_students:' || st.id, 
					s.id, p_top_node_entity_id, p_created_by_user_id
				FROM university_mofadala_students st
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_students:' || st.id;
			
		-- national_id, national_id_type
		insert into acorn_university_student_identities(student_id, "number", identity_type_id, "current", created_by_user_id)
			select s.id, st.national_id::text, p_syrian_nation_identity_type_id, true, p_created_by_user_id
			from acorn_university_students s
			inner join unnest(p_uuids) on s.id = unnest
			inner join university_mofadala_students st on s.import_source = p_imported || ' university_mofadala_students:' || st.id
			inner join university_mofadala_baccalaureate_marks bm on st.baccalaureate_mark_id = bm.id
			where not st.national_id is null;

		-- Inject mofadala code, owned by the Faculty
		insert into acorn_university_student_codes(student_id, entity_id, code, "current", created_by_user_id)
			select s.id, en.id, st.code, true, p_created_by_user_id
			from acorn_university_students s
			inner join unnest(p_uuids) on s.id = unnest
			inner join university_mofadala_students st on s.import_source = p_imported || ' university_mofadala_students:' || st.id
			inner join university_mofadala_baccalaureate_marks bm on st.baccalaureate_mark_id = bm.id
			inner join university_mofadala_departments d on st.department_id = d.id
			inner join university_mofadala_branches br on d.branche_id = br.id
			-- Students' faculty
			inner join acorn_user_user_groups ugs on initcap(br.name) = ugs.name
			inner join acorn_university_entities en on en.user_group_id = ugs.id
			inner join acorn_university_faculties f on f.entity_id = en.id;
		
		-- Inject old bakeloria code, owned by the Top level Education Committee
		insert into acorn_university_student_codes(student_id, entity_id, code, "current", created_by_user_id)
			select s.id, p_top_node_entity_id, bm.code, false, p_created_by_user_id
			from acorn_university_students s
			inner join unnest(p_uuids) on s.id = unnest
			inner join university_mofadala_students st on s.import_source = p_imported || ' university_mofadala_students:' || st.id
			inner join university_mofadala_baccalaureate_marks bm on st.baccalaureate_mark_id = bm.id;

		-- ######################################### Special status
		-- families_of_martyrs:           021c0f46-3b96-11f0-add5-1fdf3952358b
		-- from_the_occupied_territories: 021c1022-3b96-11f0-add6-9b77f9e97678
		-- he_served_in_the_army:         021c104a-3b96-11f0-add7-bf3af6dabafb
		-- need_housing:                  021c1068-3b96-11f0-add8-a7fe27552a6d
		WITH inserted as (
			insert into acorn_university_student_status(student_id, student_status_id)
				select s.id, '021c0f46-3b96-11f0-add5-1fdf3952358b'::uuid 
					from acorn_user_users u
					inner join acorn_university_students s on s.user_id = u.id,
					university_mofadala_students st
					where u.import_source = p_imported || ' university_mofadala_students:' || st.id
					and st.families_of_martyrs
				returning student_id
			)
			select array_agg(inserted.student_id) into p_uuids from inserted;
		if p_messages then raise notice '% Students families_of_martyrs statuses inserted', array_upper(p_uuids, 1); end if;
	
		WITH inserted as (
			insert into acorn_university_student_status(student_id, student_status_id)
				select s.id, '021c1022-3b96-11f0-add6-9b77f9e97678'::uuid 
					from acorn_user_users u
					inner join acorn_university_students s on s.user_id = u.id,
					university_mofadala_students st
					where u.import_source = p_imported || ' university_mofadala_students:' || st.id
					and st.from_the_occupied_territories
				returning student_id
			)
			select array_agg(inserted.student_id) into p_uuids from inserted;
		if p_messages then raise notice '% Students from_the_occupied_territories statuses inserted', array_upper(p_uuids, 1); end if;

		WITH inserted as (
			insert into acorn_university_student_status(student_id, student_status_id)
				select s.id, '021c104a-3b96-11f0-add7-bf3af6dabafb'::uuid 
					from acorn_user_users u
					inner join acorn_university_students s on s.user_id = u.id,
					university_mofadala_students st
					where u.import_source = p_imported || ' university_mofadala_students:' || st.id
					and st.he_served_in_the_army
				returning student_id
			)
			select array_agg(inserted.student_id) into p_uuids from inserted;
		if p_messages then raise notice '% Students he_served_in_the_army statuses inserted', array_upper(p_uuids, 1); end if;

		WITH inserted as (
			insert into acorn_university_student_status(student_id, student_status_id)
				select s.id, '021c1068-3b96-11f0-add8-a7fe27552a6d'::uuid 
					from acorn_user_users u
					inner join acorn_university_students s on s.user_id = u.id,
					university_mofadala_students st
					where u.import_source = p_imported || ' university_mofadala_students:' || st.id
					and st.need_housing
				returning student_id
			)
			select array_agg(inserted.student_id) into p_uuids from inserted;
		if p_messages then raise notice '% Students need_housing statuses inserted', array_upper(p_uuids, 1); end if;

		-- ######################################### Mofadala Enrolled Departments 
		-- Enroll 2023-2024 Students on to 2024-2025 courses
		if p_enroll_students_into_courses then
			WITH inserted as (
				insert into acorn_user_user_group_version(user_group_version_id, user_id)
					select hi.user_group_version_id, u.id
						from acorn_university_hierarchies hi,
						university_mofadala_students mst
						inner join acorn_user_users u on u.import_source = p_imported || ' university_mofadala_students:' || mst.id
						where hi.import_source = p_imported || ' university_mofadala_departments:' || mst.department_id
						and hi.academic_year_id = p_mofadala_academic_year_id
						and not mst.department_id is null
					on conflict do nothing
					returning user_id
				)
				select array_agg(inserted.user_id) into p_uuids from inserted;
			if p_messages then raise notice '% Students enrolled on to courses', array_upper(p_uuids, 1); end if;
		end if;

		-- ######################################### Desires
		-- university_mofadala_type_certificates        => acorn_university_courses (Science, Literature, etc.)
		-- university_mofadala_department_details       => acorn_enrollment_course_entry_requirements (minimum, etc.)
		-- university_mofadala_student_desire_details   => acorn_enrollment_desires
		-- TODO: candidate exams
		-- university_mofadala_candidate_exams          => 
		-- university_mofadala_candidate_exam_materials =>
		-- university_mofadala_candidate_exam_material_marks
		-- university_mofadala_exam_centers             => acorn_exam_centres
		if p_delete_previous then 
			delete from acorn_enrollment_course_entry_requirements 
			where import_source like(p_imported_like); 
		end if;

		with inserted as (
			insert into acorn_enrollment_course_entry_requirements(
				academic_year_id, course_id, high_school_course_id, 
				minimum_students, maximum_students, required_interview_id, required_enrollment_exam_id, minimum,
				"current", import_source, created_by_user_id
			)
				select p_mofadala_academic_year_id, 
					(select c.id from acorn_university_courses c
						inner join acorn_university_entities en on c.entity_id = en.id
						inner join acorn_user_user_groups ugs on en.user_group_id = ugs.id
						where ugs.name = fn_acorn_university_legacy_import_branche_to_course(d.name, br.name) and c.course_type_id = p_course_type_university
						limit 1 -- TODO: Need to decide on duplicate courses
					) as course_id,
					(select c.id from acorn_university_courses c
						inner join acorn_university_entities en on c.entity_id = en.id
						inner join acorn_user_user_groups ugs on en.user_group_id = ugs.id
						where ugs.name = initcap(tc.name) and c.course_type_id = p_course_type_high_school
						limit 1 -- TODO: Need to decide on duplicate courses
					) as high_school_course_id,
	
					d.n_minimum as minimum_students,
					dd.n_maximum  as maximum_students,   -- TODO: Complexity of DD maximums
					NULL as required_interview_id,       -- TODO: interview 
					NULL as required_enrollment_exam_id, -- TODO: enrollment (candidate) exam
					minimum,
					
					this_is_the_primary_hs_specialization as "current", 
					p_imported || ' university_mofadala_department_details:' || dd.id,
					p_created_by_user_id
				from university_mofadala_department_details dd
				inner join university_mofadala_departments d on dd.department_id = d.id
				inner join university_mofadala_branches br on d.branche_id = br.id
				inner join university_mofadala_type_certificates tc on dd.type_certificate_id = tc.id
				returning id
			) select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Course entry requirements inserted', array_upper(p_uuids, 1); end if;

		-- ######################################### Desires
		-- TODO: interview_status
		if p_delete_previous then 
			delete from acorn_enrollment_desires 
			where import_source like(p_imported_like); 
		end if;
		with inserted as (
			insert into acorn_enrollment_desires(academic_year_id, student_id, course_entry_requirements_id, 
				sort_order, import_source, created_by_user_id
			)
				select p_mofadala_academic_year_id, 
					s.id        as student_id, 
					cer.id      as course_entry_requirements_id, 
					number_list as ordinal, 
					p_imported || ' university_mofadala_student_desire_details:' || dd.id,
					p_created_by_user_id
				from university_mofadala_student_desire_details dd
				inner join acorn_university_students s on s.import_source = p_imported || ' university_mofadala_students:' || dd.student_id
				inner join acorn_enrollment_course_entry_requirements cer on cer.import_source = p_imported || ' university_mofadala_department_details:' || dd.department_detail_id
				returning id
			) select array_agg(inserted.id) into p_uuids from inserted;
		if p_messages then raise notice '% Desires inserted', array_upper(p_uuids, 1); end if;
	end if;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_legacy_import_enrollment(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_messages boolean) OWNER TO university;

--
-- Name: fn_acorn_university_provision_year_semesters(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_provision_year_semesters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_enrollment_academic_year_ordinal int;
	p_id uuid;
	p_hi_self_and_nest_ascendants uuid[];
	p_default_semester_group_id uuid;
	p_yearsemesters_record record;
	p_academic_year_name character varying(1024);
begin
	-- Runs AFTER INSERT|UPDATE on acorn_university_course_year_settings
	-- Provision every course year from this enrollment academic year until new.length
	-- every semester for each academic year
	-- For a 4 year course, 3 semesters, this will be 12 rows
	-- 2024-2025 - Semester 1
	-- 2024-2025 - Semester 2
	-- 2024-2025 - Semester 3
	-- 2025-2026 - Semester 1
	-- 2025-2026 - Semester 2
	-- 2025-2026 - Semester 3
	-- ...

	-- Enrollment year
	select ordinal into p_enrollment_academic_year_ordinal
		from acorn_university_academic_years
		where id = new.enrollment_academic_year_id;

	-- Hierarchy entry(s)
	-- TODO: Support multiple hierarchy entries
	select array_prepend(hi.id, hi.nest_ascendants) into p_hi_self_and_nest_ascendants
		from acorn_university_courses c
		inner join acorn_university_entities en on c.entity_id = en.id
		inner join acorn_university_hierarchies hi on hi.entity_id = en.id
		where c.id = new.course_id
		and hi.academic_year_id = new.enrollment_academic_year_id
		limit 1;
			
	-- Semester group
	if not p_hi_self_and_nest_ascendants is null then
		select hi.default_semester_group_id into p_default_semester_group_id
			-- Start with the array for correct ordering
			-- closest ascendant first
			from unnest(p_hi_self_and_nest_ascendants)
			inner join acorn_university_hierarchies hi on hi.id = unnest
			where not default_semester_group_id is null
			limit 1;
	end if;

	-- TODO: What if semesters have not been provisioned for this academic year?
	-- if not exists(select * 
	-- 	from acorn_university_academic_year_semesters
	-- 	where academic_year_id = p_years_record.academic_year_id
	-- ) then
	-- 	select name into p_academic_year_name from public.acorn_university_academic_years
	-- 		where id = p_years_record.academic_year_id;
	-- 	raise exception 'It looks like semesters have not been provisioned for this year %', p_academic_year_name;
	-- end if;
		
	-- Provision any missing items
	for p_yearsemesters_record in select 
			c.id || '::' || cy.id || '::' || ays.id || '::' || new.id as id,
			ugs.name || '::Year-' || cy.name || '::' || ay.name || '::' || sem.name as name,
			c.id as course_id, cy.id as course_year_id, ays.id as academic_year_semester_id
		-- Year Semesters
		from acorn_university_academic_years ay
		inner join acorn_university_course_years cy on ay.ordinal - p_enrollment_academic_year_ordinal + 1 = cy.ordinal
		inner join acorn_university_academic_year_semesters ays on ays.academic_year_id = ay.id
		inner join acorn_university_semesters sem on ays.semester_id = sem.id,

		-- Course details
		acorn_university_courses c
		inner join acorn_university_entities en on c.entity_id = en.id
		inner join acorn_user_user_groups ugs on ugs.id = en.user_group_id
		
		where ((p_default_semester_group_id is null and sem.semester_group_id is null) or sem.semester_group_id = p_default_semester_group_id)
		and c.id = new.course_id
		-- Add un-provisioned items only
		and not exists(
			select * from acorn_university_course_year_semesters cys
			where course_id = new.course_id
			and course_year_id = cy.id
			and academic_year_semester_id = ays.id
		)
		-- Restrict academic years to beginning => length of course
		-- The inner join on ordinal above does the work here
		and cy.ordinal <= new.length
		order by ay.ordinal ASC, cy.ordinal ASC
	loop
		-- User group, Entity, CYS
		-- CYS name is constructed, not 1-1 user_group
		insert into acorn_user_user_groups(name, code)
			select p_yearsemesters_record.name, 'CYS-' || p_yearsemesters_record.id
			returning id into p_id;
		insert into acorn_university_entities(user_group_id)
			values(p_id)
			returning id into p_id;
		-- This will cascade another trigger
		-- to sync all CYS under all Course nodes in the hierachies table
		-- for the stated year
		insert into acorn_university_course_year_semesters(course_plan_id, course_id, course_year_id, academic_year_semester_id, entity_id)
			values(new.id, p_yearsemesters_record.course_id, p_yearsemesters_record.course_year_id, p_yearsemesters_record.academic_year_semester_id, p_id);
	end loop;
		
	-- TODO: Remove excess course years in case of reductory length updates
	-- This will also cause a sync trigger to delete the entities 
	-- & cascade to hierarchies
	-- delete from acorn_university_course_year_semesters where id in(
	-- 	select ays.id 
	-- 	-- Year Semesters
	-- 	from acorn_university_academic_years ay
	-- 	inner join acorn_university_course_years cy on ay.ordinal - p_enrollment_academic_year_ordinal + 1 = cy.ordinal
	-- 	inner join acorn_university_academic_year_semesters ays on ays.academic_year_id = ay.id
	-- 	inner join acorn_university_course_year_semesters cys 
	-- 		on cys.academic_year_semester_id = ays.id
	-- 		and cys.course_year_id = cy.id
	-- 	where cys.course_id = new.course_id
	-- 	-- Restrict academic years to after length of course
	-- 	-- The inner join on ordinal above does the work here
	-- 	and cy.ordinal > new.length
	-- );
    return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_provision_year_semesters() OWNER TO university;

--
-- Name: fn_acorn_university_scope_entities(uuid, character varying); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_scope_entities(p_descendant_entity_id uuid, p_ancestor_entity_id character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
declare
	p_uuids uuid[];
begin
	-- If the p_descendant_entity_id is, or is under, the p_ancestor_entity_id
	-- using the CACHED nest_descendants field
	return exists(
		select * from acorn_university_hierarchies hi
		-- Get the main ancestor details
		where hi.entity_id = p_ancestor_entity_id::uuid -- Multiple
		and (
			-- Is the same entity
			p_descendant_entity_id = hi.entity_id 
			-- Is a descendant
			or exists(
				-- nest_descendants are hierarchy IDs
				-- We are matching on entity_id
				select * from acorn_university_hierarchies hiD
				where not array_position(hi.nest_descendants, hiD.id) is null
				and hiD.entity_id = p_descendant_entity_id
			)
		)
	);
end;
$$;


ALTER FUNCTION public.fn_acorn_university_scope_entities(p_descendant_entity_id uuid, p_ancestor_entity_id character varying) OWNER TO university;

--
-- Name: fn_acorn_university_semester_ordinal_delete(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_semester_ordinal_delete() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- AFTER DELETE on acorn_university_course_year_semesters
	-- This will be an UPDATE only, so it will not affect this trigger
	-- UPDATEs to course_plan_id, course_id, course_year_id are not allowed
	-- by enrollment_year trigger
		
	-- Update all ordinals _after_ this one
	-- Work off the existing CYSs, not the count(sem) theoretical allocation
	update acorn_university_course_year_semesters cys_update
		set academic_year_semester_ordinal = coalesce((
			-- Suppress Specialization duplicates
			select count(distinct ays_before.id) from 
			-- Updating details
			acorn_university_academic_year_semesters ays_update
			inner join acorn_university_academic_years ay_update on ays_update.academic_year_id = ay_update.id
			inner join acorn_university_semesters sem_update on ays_update.semester_id = sem_update.id,

			-- CYS before list
			acorn_university_course_year_semesters cys_before
			inner join acorn_university_academic_year_semesters ays_before on cys_before.academic_year_semester_id = ays_before.id
			inner join acorn_university_academic_years ay_before on ays_before.academic_year_id = ay_before.id
			inner join acorn_university_semesters sem_before on ays_before.semester_id = sem_before.id

			-- Same course plan
			where cys_before.course_plan_id = cys_update.course_plan_id
			-- Updating details 
			and ays_update.id = cys_update.academic_year_semester_id
			-- Rows Before
			and (
				-- All full years before
				ay_before.ordinal < ay_update.ordinal 
				-- Only the semesters before for the same year
				or  (ay_before.id = ay_update.id and sem_before.ordinal < sem_update.ordinal)
			)
		), 0) + 1
	where cys_update.course_plan_id = old.course_plan_id
	-- DELETEd one is already gone anyway
	and cys_update.academic_year_semester_ordinal > old.academic_year_semester_ordinal;

	return old;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_semester_ordinal_delete() OWNER TO university;

--
-- Name: fn_acorn_university_semester_ordinal_insert(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_semester_ordinal_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_ordinal int;
	p_is_new_ays int;
begin
	-- BEFORE (academic_year_semester_ordinal NOT NULL) 
	-- INSERT on acorn_university_course_year_semesters
	-- This will be an UPDATE only, so it will not affect this trigger
	-- UPDATEs to course_plan_id, course_id, course_year_id are not allowed
	-- by enrollment_year trigger

	-- How many semesters appear before this new insert for this course plan?
	-- ignoring specializations
	p_ordinal := coalesce((select count(distinct ays_before.id) from 
		-- Updating (new) details
		acorn_university_academic_year_semesters ays_update
		inner join acorn_university_academic_years ay_update on ays_update.academic_year_id = ay_update.id
		inner join acorn_university_semesters sem_update on ays_update.semester_id = sem_update.id,

		-- CYS before list
		acorn_university_course_year_semesters cys_before
		inner join acorn_university_academic_year_semesters ays_before on cys_before.academic_year_semester_id = ays_before.id
		inner join acorn_university_academic_years ay_before on ays_before.academic_year_id = ay_before.id
		inner join acorn_university_semesters sem_before on ays_before.semester_id = sem_before.id
		-- Same course plan
		where cys_before.course_plan_id = new.course_plan_id
		-- Updating details 
		and ays_update.id = new.academic_year_semester_id
		-- Rows Before
		and (
			-- All full years before
			ay_before.ordinal < ay_update.ordinal 
			-- Only the semesters before for the same year
			or  (ay_before.id = ay_update.id and sem_before.ordinal < sem_update.ordinal)
		)
	), 0) + 1;
	new.academic_year_semester_ordinal := p_ordinal;

	-- See if this _is going to be_ a new ordinal row, or an existing ordinal (+specialization)
	-- 1 if true, so can be added
	p_is_new_ays := coalesce((
		select 0
		from acorn_university_course_year_semesters cys
		where cys.course_plan_id = new.course_plan_id
		and   cys.academic_year_semester_id = new.academic_year_semester_id
		limit 1
	), 1);
		
	-- Update all ordinals _after_ this one
	-- +1+1 because BEFORE INSERT
	-- Work off the existing CYSs, not the count(sem) theoretical allocation
	-- In the case of Course Planner INSERTs, this will have nothing to update
	-- because the are insterted in order anyway, with nothing after each one
	update acorn_university_course_year_semesters cys_update
		set academic_year_semester_ordinal = coalesce((
			-- Suppress Specialization duplicates
			select count(distinct ays_before.id) from 
			-- Updating details
			acorn_university_academic_year_semesters ays_update
			inner join acorn_university_academic_years ay_update on ays_update.academic_year_id = ay_update.id
			inner join acorn_university_semesters sem_update on ays_update.semester_id = sem_update.id,

			-- CYS before list
			acorn_university_course_year_semesters cys_before
			inner join acorn_university_academic_year_semesters ays_before on cys_before.academic_year_semester_id = ays_before.id
			inner join acorn_university_academic_years ay_before on ays_before.academic_year_id = ay_before.id
			inner join acorn_university_semesters sem_before on ays_before.semester_id = sem_before.id

			-- Same course plan
			where cys_before.course_plan_id = cys_update.course_plan_id
			-- Updating details 
			and ays_update.id = cys_update.academic_year_semester_id
			-- Rows Before
			and (
				-- All full years before
				ay_before.ordinal < ay_update.ordinal 
				-- Only the semesters before for the same year
				or  (ay_before.id = ay_update.id and sem_before.ordinal < sem_update.ordinal)
			)
		), 0) + 1 -- 1 indexed
				  -- Take in to account the not-yet-inserted row
		          -- Do not need to +1 if a row with this ordinal _already_ exists
				  -- for example, in the case of specialization
		      + p_is_new_ays 
	where cys_update.course_plan_id = new.course_plan_id
	and cys_update.academic_year_semester_ordinal >= p_ordinal;

	return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_semester_ordinal_insert() OWNER TO university;

--
-- Name: fn_acorn_university_student_codes_current(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_student_codes_current() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- Enforce only one current
	-- False may be explicitly specified, for example, importing old codes
	-- Column default should be true on inserts
	if new.current then
		-- Unset the old current(s)
		update acorn_university_student_codes
			set "current" = false
			where student_id = new.student_id 
			and "current"
			and id != new.id;
	end if;
	
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_student_codes_current() OWNER TO university;

--
-- Name: fn_acorn_university_student_documents(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_student_documents() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	p_new_document_details json; -- JSON Array of objects
begin
	-- Runs after UPDATE on acorn_university_students
	if json_array_length(new.printed) <> json_array_length(old.printed) and json_array_length(new.printed) > 0 then
		p_new_document_details := new.printed ->> -1;
		
		insert into acorn_university_student_documents(name, student_id, pdf, "template", created_by_user_id, document_type_id)
			values(p_new_document_details ->> 'name', new.id, 
				p_new_document_details ->> 'pdfPath', 
				p_new_document_details ->> 'pdfTemplatePath',
				(p_new_document_details ->> 'createdBy')::uuid,
				(
					select dt.id from acorn_university_document_types dt 
					where p_new_document_details ->> 'pdfTemplatePath' like('%' || dt.template_match || '%')
					limit 1
				)
			);
	end if;
    return new;
end;
            
$$;


ALTER FUNCTION public.fn_acorn_university_student_documents() OWNER TO university;

--
-- Name: fn_acorn_university_student_identities_current(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_student_identities_current() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- Enforce only one current
	-- False may be explicitly specified, for example, importing old codes
	-- Column default should be true on inserts
	if new.current then
		-- Unset the old current(s)
		update acorn_university_student_identities
			set "current" = false
			where student_id = new.student_id
			and "current"
			and id != new.id; 
	end if;
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_student_identities_current() OWNER TO university;

--
-- Name: fn_acorn_university_students_ales_refresh(uuid); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_university_students_ales_refresh(p_model_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
	perform fn_acorn_university_action_students_refresh(p_model_id, NULL::uuid);
	insert into system_event_logs(level, message, details, created_at)
		select 'info', 'Student refreshed',
			to_json(ARRAY[u.name || '(' || u.id || ')']),
			now()
		from acorn_user_users u
		inner join acorn_university_students s on s.user_id = u.id
		where s.id = p_model_id;
end;
$$;


ALTER FUNCTION public.fn_acorn_university_students_ales_refresh(p_model_id uuid) OWNER TO university;

--
-- Name: fn_acorn_university_table_counts(character varying); Type: FUNCTION; Schema: public; Owner: sz
--

CREATE FUNCTION public.fn_acorn_university_table_counts(_schema character varying) RETURNS TABLE("table" text, count bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
	-- SELECT * FROM information_schema.tables;
  	return query execute (select concat(
		'select "table", "count" from (', 
		(
			SELECT string_agg(
				concat('select ''', table_name, ''' as "table", count(*) as "count" from ', table_name),
				' union all '
			) 
			FROM information_schema.tables 
			where table_catalog = current_database()
			and table_schema = _schema
			and table_type = 'BASE TABLE'
		), 
		') data order by "count" desc, "table" asc'
	));
END
$$;


ALTER FUNCTION public.fn_acorn_university_table_counts(_schema character varying) OWNER TO sz;

--
-- Name: fn_acorn_updated_by_user_id(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_updated_by_user_id() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
declare
begin
	-- On update of tables with updated_by_user_id
	-- DBAuth required
	-- Will return NULL if not regexp_like(CURRENT_USER, '^token_[0-9]+$')
	select u.id into new.updated_by_user_id from acorn_dbauth_user u;
    return new;
end;
            
$_$;


ALTER FUNCTION public.fn_acorn_updated_by_user_id() OWNER TO university;

--
-- Name: fn_acorn_user_code(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_user_code(name character varying, word integer DEFAULT 0, length integer DEFAULT 3) RETURNS character varying
    LANGUAGE sql
    AS $$
	select substr(upper(
		case word
			when 0 then
				regexp_replace(name, '[^a-zA-Z0-9]', '')
			when 1 then
				regexp_replace(regexp_replace(name, '^[^ ]* ', ''), '[^a-zA-Z0-9]', '')
			else
				regexp_replace(regexp_replace(name, '^[^ ]* [^ ]* ', ''), '[^a-zA-Z0-9]', '')
		end), 1, length);
$$;


ALTER FUNCTION public.fn_acorn_user_code(name character varying, word integer, length integer) OWNER TO university;

--
-- Name: fn_acorn_user_code_acronym(character varying, integer, integer); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_user_code_acronym(name character varying, word integer DEFAULT 0, length integer DEFAULT 3) RETURNS character varying
    LANGUAGE sql
    AS $$
	select 
		substr(upper(
			regexp_replace(regexp_replace(regexp_replace(name, 
			'[^a-zA-Z0-9 ]', '', 'g'),
			'([^ ])[^ ]+', '\1', 'g'),
			' +', '', 'g')
		), word+1, length);
$$;


ALTER FUNCTION public.fn_acorn_user_code_acronym(name character varying, word integer, length integer) OWNER TO university;

--
-- Name: fn_acorn_user_get_seed_user(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_user_get_seed_user() RETURNS uuid
    LANGUAGE plpgsql
    AS $$
            declare
user_id uuid;
            begin
            -- Lazy create the seeder user
            select into user_id uu.id 
                from public.acorn_user_users uu
                where name = 'seeder' and is_system_user limit 1;
            if user_id is null then
                insert into public.acorn_user_users(name, is_system_user)
                    values('seeder', true) 
                    returning id into user_id;
            end if;
            
            
            return user_id;
end;
            $$;


ALTER FUNCTION public.fn_acorn_user_get_seed_user() OWNER TO university;

--
-- Name: fn_acorn_user_user_group_first_version(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_user_user_group_first_version() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- On INSERT on acorn_user_user_groups
	-- The CASCADE FK delete should remove them
	insert into acorn_user_user_group_versions(user_group_id)
		values(new.id);
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_user_user_group_first_version() OWNER TO university;

--
-- Name: fn_acorn_user_user_group_version_current(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_user_user_group_version_current() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- BEFORE INSERT OR UPDATE on acorn_user_user_group_versions
	-- version column is NOT NULL, DEFAULT 1
	if TG_OP = 'INSERT' then
		-- Enforce the version number
		select coalesce(max(ugv.version), 0) + 1 into new.version
			from acorn_user_user_group_versions ugv
			where ugv.user_group_id = new.user_group_id;
	end if;
	
	if exists(select * from acorn_user_user_group_versions ugv
		where ugv.user_group_id = new.user_group_id
		and ugv.version = new.version
		and not ugv.id = new.id
	) then
		raise exception 'Duplicate version number % not allowed in acorn_user_user_group_versions id %', new.version, new.id;
	end if;
		
	-- Enforce only one current
	-- False may be explicitly specified, for example, importing old codes
	-- Column default should be true on inserts
	if new.current then
		-- Unset the old current(s)
		update acorn_user_user_group_versions 
			set "current" = false
			where user_group_id = new.user_group_id 
			and not id = new.id
			and "current";
	end if;
	
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_user_user_group_version_current() OWNER TO university;

--
-- Name: fn_acorn_user_user_languages_current(); Type: FUNCTION; Schema: public; Owner: university
--

CREATE FUNCTION public.fn_acorn_user_user_languages_current() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
	-- Enforce only one current
	-- False may be explicitly specified, for example, importing old codes
	-- Column default should be true on inserts
	if new.current then
		-- Unset the old current(s)
		update acorn_user_user_languages
			set "current" = false
			where user_id = new.user_id
			and "current"
			and id != new.id; 
	end if;
	return new;
end;
$$;


ALTER FUNCTION public.fn_acorn_user_user_languages_current() OWNER TO university;

--
-- Name: agg_acorn_first(anyelement); Type: AGGREGATE; Schema: public; Owner: university
--

CREATE AGGREGATE public.agg_acorn_first(anyelement) (
    SFUNC = public.fn_acorn_first,
    STYPE = anyelement,
    PARALLEL = safe
);


ALTER AGGREGATE public.agg_acorn_first(anyelement) OWNER TO university;

--
-- Name: agg_acorn_last(anyelement); Type: AGGREGATE; Schema: public; Owner: university
--

CREATE AGGREGATE public.agg_acorn_last(anyelement) (
    SFUNC = public.fn_acorn_last,
    STYPE = anyelement,
    PARALLEL = safe
);


ALTER AGGREGATE public.agg_acorn_last(anyelement) OWNER TO university;

--
-- Name: live_university; Type: SERVER; Schema: -; Owner: sz
--

CREATE SERVER live_university FOREIGN DATA WRAPPER postgres_fdw OPTIONS (
    dbname 'university',
    host 'store.acorn.org',
    port '5433'
);


ALTER SERVER live_university OWNER TO sz;

--
-- Name: USER MAPPING sz SERVER live_university; Type: USER MAPPING; Schema: -; Owner: sz
--

CREATE USER MAPPING FOR sz SERVER live_university OPTIONS (
    password 'SantaTickle2',
    "user" 'sz'
);


--
-- Name: localserver_universityacceptance; Type: SERVER; Schema: -; Owner: university
--

CREATE SERVER localserver_universityacceptance FOREIGN DATA WRAPPER postgres_fdw OPTIONS (
    dbname 'universityacceptance',
    host 'localhost',
    port '5432'
);


ALTER SERVER localserver_universityacceptance OWNER TO university;

--
-- Name: USER MAPPING sz SERVER localserver_universityacceptance; Type: USER MAPPING; Schema: -; Owner: university
--

CREATE USER MAPPING FOR sz SERVER localserver_universityacceptance OPTIONS (
    password 'SantaTickle2',
    "user" 'sz'
);


--
-- Name: USER MAPPING token_1 SERVER localserver_universityacceptance; Type: USER MAPPING; Schema: -; Owner: university
--

CREATE USER MAPPING FOR token_1 SERVER localserver_universityacceptance OPTIONS (
    password 'SantaTickle2',
    "user" 'sz'
);


--
-- Name: USER MAPPING university SERVER localserver_universityacceptance; Type: USER MAPPING; Schema: -; Owner: university
--

CREATE USER MAPPING FOR university SERVER localserver_universityacceptance OPTIONS (
    password 'SantaTickle2',
    "user" 'sz'
);


--
-- Name: acorn_exam_scores; Type: FOREIGN TABLE; Schema: live_public; Owner: sz
--

CREATE FOREIGN TABLE live_public.acorn_exam_scores (
    id uuid NOT NULL,
    exam_material_id uuid NOT NULL,
    score double precision NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    student_id uuid NOT NULL,
    created_at timestamp(0) without time zone NOT NULL,
    updated_at timestamp(0) without time zone
)
SERVER live_university
OPTIONS (
    schema_name 'public',
    table_name 'acorn_exam_scores'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN exam_material_id OPTIONS (
    column_name 'exam_material_id'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN score OPTIONS (
    column_name 'score'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN created_by_user_id OPTIONS (
    column_name 'created_by_user_id'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN updated_by_user_id OPTIONS (
    column_name 'updated_by_user_id'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN server_id OPTIONS (
    column_name 'server_id'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN student_id OPTIONS (
    column_name 'student_id'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE live_public.acorn_exam_scores ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE live_public.acorn_exam_scores OWNER TO sz;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: acorn_calendar_calendars; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_calendars (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    system boolean DEFAULT false NOT NULL,
    sync_file character varying(4096),
    sync_format integer DEFAULT 0 NOT NULL,
    created_at timestamp(0) without time zone DEFAULT '2025-04-03 08:43:14.674386'::timestamp without time zone NOT NULL,
    updated_at timestamp(0) without time zone,
    owner_user_id uuid,
    owner_user_group_id uuid,
    permissions integer DEFAULT 1 NOT NULL,
    show_on_front_end boolean DEFAULT true NOT NULL
);


ALTER TABLE public.acorn_calendar_calendars OWNER TO university;

--
-- Name: TABLE acorn_calendar_calendars; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_calendar_calendars IS 'package-type: plugin
table-type: content';


--
-- Name: acorn_calendar_event_part_user; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_event_part_user (
    event_part_id uuid NOT NULL,
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT '2025-04-03 08:43:15.233983'::timestamp without time zone NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_calendar_event_part_user OWNER TO university;

--
-- Name: TABLE acorn_calendar_event_part_user; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_calendar_event_part_user IS 'table-type: content';


--
-- Name: acorn_calendar_event_part_user_group; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_event_part_user_group (
    event_part_id uuid NOT NULL,
    user_group_id uuid NOT NULL
);


ALTER TABLE public.acorn_calendar_event_part_user_group OWNER TO university;

--
-- Name: acorn_calendar_event_parts; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_event_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    event_id uuid NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    start timestamp(0) without time zone NOT NULL,
    "end" timestamp(0) without time zone NOT NULL,
    until timestamp(0) without time zone,
    mask integer DEFAULT 0 NOT NULL,
    mask_type character varying(256),
    type_id uuid NOT NULL,
    status_id uuid NOT NULL,
    repeat_frequency integer DEFAULT 1 NOT NULL,
    parent_event_part_id uuid,
    location_id uuid,
    locked_by_user_id integer,
    created_at timestamp(0) without time zone DEFAULT '2025-04-03 08:43:15.006774'::timestamp without time zone NOT NULL,
    updated_at timestamp(0) without time zone,
    repeat interval,
    alarm interval,
    instances_deleted integer[],
    user_group_version_id uuid,
    user_group_version_locked_external boolean DEFAULT false NOT NULL
);


ALTER TABLE public.acorn_calendar_event_parts OWNER TO university;

--
-- Name: TABLE acorn_calendar_event_parts; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_calendar_event_parts IS 'table-type: content';


--
-- Name: acorn_calendar_event_statuses; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_event_statuses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    style character varying(255),
    system boolean DEFAULT false NOT NULL,
    calendar_id uuid,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_calendar_event_statuses OWNER TO university;

--
-- Name: TABLE acorn_calendar_event_statuses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_calendar_event_statuses IS 'table-type: content';


--
-- Name: acorn_calendar_event_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_event_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(2048) NOT NULL,
    description text,
    whole_day boolean DEFAULT false NOT NULL,
    colour character varying(16) DEFAULT '#333'::character varying,
    style character varying(2048),
    system boolean DEFAULT false NOT NULL,
    activity_log_related_oid integer,
    calendar_id uuid,
    created_at timestamp(0) without time zone DEFAULT '2025-04-03 08:43:14.760966'::timestamp without time zone NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_calendar_event_types OWNER TO university;

--
-- Name: TABLE acorn_calendar_event_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_calendar_event_types IS 'table-type: content';


--
-- Name: acorn_calendar_events; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    calendar_id uuid NOT NULL,
    external_url character varying(2048),
    created_at timestamp(0) without time zone DEFAULT '2025-04-03 08:43:14.902277'::timestamp without time zone NOT NULL,
    updated_at timestamp(0) without time zone,
    owner_user_id uuid NOT NULL,
    owner_user_group_id uuid,
    permissions integer DEFAULT 79 NOT NULL
);


ALTER TABLE public.acorn_calendar_events OWNER TO university;

--
-- Name: TABLE acorn_calendar_events; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_calendar_events IS 'table-type: content';


--
-- Name: acorn_calendar_instances; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_calendar_instances (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    date date NOT NULL,
    event_part_id uuid NOT NULL,
    instance_num integer NOT NULL,
    instance_start timestamp(0) without time zone NOT NULL,
    instance_end timestamp(0) without time zone NOT NULL
);


ALTER TABLE public.acorn_calendar_instances OWNER TO university;

--
-- Name: TABLE acorn_calendar_instances; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_calendar_instances IS 'table-type: content';


--
-- Name: acorn_university_hierarchies; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_hierarchies (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    academic_year_id uuid NOT NULL,
    parent_id uuid,
    server_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    nest_left integer DEFAULT 0 NOT NULL,
    nest_right integer DEFAULT 0 NOT NULL,
    nest_depth integer DEFAULT 0 NOT NULL,
    description text,
    user_group_version_id uuid NOT NULL,
    descendant_users_count integer,
    import_source character varying(1024),
    nest_ascendants uuid[],
    nest_descendants uuid[],
    leaf_table character varying(1024),
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    default_semester_group_id uuid,
    default_calendar_id uuid,
    descendants_count integer GENERATED ALWAYS AS (array_upper(nest_descendants, 1)) STORED
);


ALTER TABLE public.acorn_university_hierarchies OWNER TO university;

--
-- Name: TABLE acorn_university_hierarchies; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_hierarchies IS 'order: 9
labels:
  en: Relationship
  ku: Teklî
  ar: العلاقات
labels-plural:
  en: Relationships
  ku: Teklîyên
  ar: العلاقات
';


--
-- Name: COLUMN acorn_university_hierarchies.entity_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.entity_id IS 'order: 20
can-filter: false
css-classes: 
  - col-md-3
name-from: name_plus';


--
-- Name: COLUMN acorn_university_hierarchies.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.academic_year_id IS 'order: 10
column-type: partial
column-partial: current
can-filter: false
# Supress create-system
sql-select: ""
value-from: ""
css-classes-column:
  - tablet
css-classes: 
  - col-md-3';


--
-- Name: COLUMN acorn_university_hierarchies.parent_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.parent_id IS 'invisible: true
labels:
  en: Parent
  ku: Dewûbav
  ar: الوالد
labels-plural:
  en: Parents
  ku: Dewûbavên
  ar: آباء
can-filter: false
css-classes: 
  - new-row
  - col-md-3
  - col-md-no-new-row';


--
-- Name: COLUMN acorn_university_hierarchies.created_by_user_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.created_by_user_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_university_hierarchies.updated_by_user_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.updated_by_user_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_university_hierarchies.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.description IS 'tab: acorn::lang.models.general.description
invisible: true
labels:
  en: Note
  ku: Têbînî 
  ar: ملحوظات
labels-plural:
  en: Notes
  ku: Têbînî 
  ar: ملحوظات
';


--
-- Name: COLUMN acorn_university_hierarchies.user_group_version_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.user_group_version_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_university_hierarchies.descendant_users_count; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.descendant_users_count IS 'order: 100
readOnly: true
columnPartial: count
columnType: partial
hidden: true
labels:
  en: Descendant members
  ku: Hejmara endamên nifş
  ar: عدد الأعضاء المنحدرين
labels-plural:
  en: Descendant members
  ku: Hejmara endamên nifş
  ar: عدد الأعضاء المنحدرين
suffix: acorn.user::lang.models.user.label_plural
';


--
-- Name: COLUMN acorn_university_hierarchies.import_source; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.import_source IS 'advanced: true
read-only: true
invisible: true';


--
-- Name: COLUMN acorn_university_hierarchies.nest_ascendants; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.nest_ascendants IS 'column-exclude: true
field-exclude: true';


--
-- Name: COLUMN acorn_university_hierarchies.nest_descendants; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.nest_descendants IS 'column-exclude: true
field-exclude: true';


--
-- Name: COLUMN acorn_university_hierarchies.leaf_table; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.leaf_table IS 'order: 30
labels:
  en: Type
  ku: Cura
  ar: يكتب
labels-plural:
  en: Types
  ku: Curên
  ar: أنواع
hidden: true

';


--
-- Name: COLUMN acorn_university_hierarchies.default_semester_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.default_semester_group_id IS 'order: 1000
tab-location: 3
labels:
  en: Default Semester Group
  ku: Koma Qunaxê ya Xwerû
  ar: المجموعة الفصلية الافتراضية
labels-plural:
  en: Default Semester Groups
  ku: Koman Qunaxê ya Xwerû
  ar: مجموعات الفصل الدراسي الافتراضية
';


--
-- Name: COLUMN acorn_university_hierarchies.default_calendar_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.default_calendar_id IS 'order: 1010
tab-location: 3
labels:
  en: Default Calendar
  ku: Salnamê Xwerû
  ar: التقويم الافتراضي
labels-plural:
  en: Default Calendars
  ku: Salnamên Xwerû
  ar: التقويمات الافتراضية
';


--
-- Name: COLUMN acorn_university_hierarchies.descendants_count; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_hierarchies.descendants_count IS 'order: 70
readOnly: true
columnPartial: count
columnType: partial
hidden: true
labels:
  en: Descendant Organisations
  ku: Rêxistinên Neslan
  ar: المنظمات المنحدرة
labels-plural:
  en: Descendant Organisations
  ku: Rêxistinên Neslan
  ar: المنظمات المنحدرة
suffix: acorn.user::lang.models.usergroup.label_plural';


--
-- Name: acorn_calendar_linked_calendars; Type: VIEW; Schema: public; Owner: createsystem
--

CREATE VIEW public.acorn_calendar_linked_calendars AS
 SELECT acorn_university_hierarchies.default_calendar_id AS calendar_id,
    'public'::character varying(2048) AS schema,
    'acorn_university_hierarchies'::character varying(2048) AS "table",
    'default_calendar_id'::character varying(2048) AS "column",
    'Acorn\University\Models\Hierarchy'::text AS model_type,
    acorn_university_hierarchies.id AS model_id
   FROM public.acorn_university_hierarchies
UNION ALL
 SELECT acorn_calendar_event_statuses.calendar_id,
    'public'::character varying(2048) AS schema,
    'acorn_calendar_event_statuses'::character varying(2048) AS "table",
    'calendar_id'::character varying(2048) AS "column",
    'Acorn\Calendar\Models\EventStatus'::text AS model_type,
    acorn_calendar_event_statuses.id AS model_id
   FROM public.acorn_calendar_event_statuses
UNION ALL
 SELECT acorn_calendar_event_types.calendar_id,
    'public'::character varying(2048) AS schema,
    'acorn_calendar_event_types'::character varying(2048) AS "table",
    'calendar_id'::character varying(2048) AS "column",
    'Acorn\Calendar\Models\EventType'::text AS model_type,
    acorn_calendar_event_types.id AS model_id
   FROM public.acorn_calendar_event_types
UNION ALL
 SELECT acorn_calendar_events.calendar_id,
    'public'::character varying(2048) AS schema,
    'acorn_calendar_events'::character varying(2048) AS "table",
    'calendar_id'::character varying(2048) AS "column",
    'Acorn\Calendar\Models\Event'::text AS model_type,
    acorn_calendar_events.id AS model_id
   FROM public.acorn_calendar_events;


ALTER VIEW public.acorn_calendar_linked_calendars OWNER TO createsystem;

--
-- Name: acorn_exam_interview_students; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_interview_students (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    interview_id uuid NOT NULL,
    student_id uuid NOT NULL,
    teacher_id uuid,
    event_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    score double precision,
    course_material_id uuid,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_interview_students OWNER TO university;

--
-- Name: TABLE acorn_exam_interview_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_interview_students IS 'menu: false
attribute-functions:
  name: return $this->interview->name;
labels:
  en: Interview
  ku: Bihevditin
  ar: المقابلات
labels-plural:
  en: Interviews
  ku: Bihevditinên
  ar: المقابلات';


--
-- Name: COLUMN acorn_exam_interview_students.interview_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_interview_students.interview_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_exam_interview_students.teacher_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_interview_students.teacher_id IS 'no-relation-manager: true';


--
-- Name: COLUMN acorn_exam_interview_students.event_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_interview_students.event_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_exam_interview_students.score; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_interview_students.score IS 'list-editable: true
labels:
  en: Score
  ku: Pila
  ar: علامة المادة
labels:
  en: Scores
  ku: Pilayên
  ar: علامة المادة';


--
-- Name: COLUMN acorn_exam_interview_students.course_material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_interview_students.course_material_id IS 'no-relation-manager: true';


--
-- Name: acorn_university_academic_year_semesters; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_academic_year_semesters (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    academic_year_id uuid NOT NULL,
    semester_id uuid NOT NULL,
    event_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_academic_year_semesters OWNER TO university;

--
-- Name: TABLE acorn_university_academic_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_academic_year_semesters IS 'order: 1015
menu: false
seeding:
  # Year 2022-2023 (Bakeloria only)
  - [''17f6360c-4e8d-11f0-9162-77dce63310ae'', ''8fe62240-3546-11f0-bc4d-3f9721dbc106'', ''61c051fa-2b47-11f0-bc0f-ab4c8b696730'', EVENT(Default;Year 2022-2023 Semester 1)] 
  # Year 2023-2024
  - [''9ea2909e-2bd1-11f0-9b80-f797a81e82a4'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''61c051fa-2b47-11f0-bc0f-ab4c8b696730'', EVENT(Default;Year 2023-2024 Semester 1)]
  - [''9ee7d67c-2bd1-11f0-aba9-97727bc0b413'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''61eb583c-2b47-11f0-adc3-ef976031065b'', EVENT(Default;Year 2023-2024 Semester 2)]
  - [''9f227dea-2bd1-11f0-bd27-c7d903e9ad4d'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''6212587e-2b47-11f0-b854-631a30042bb5'', EVENT(Default;Year 2023-2024 Semester 3)]
  # Year 2024-2025
  - [''9c6e1d20-2bd1-11f0-8119-93a057070d34'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''61c051fa-2b47-11f0-bc0f-ab4c8b696730'', EVENT(Default;Year 2024-2025 Semester 1)]
  - [''9dd3c21e-2bd1-11f0-8ec0-530fd1227857'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''61eb583c-2b47-11f0-adc3-ef976031065b'', EVENT(Default;Year 2024-2025 Semester 2)]
  - [''9e5bbd72-2bd1-11f0-9dcc-83b88755cb62'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''6212587e-2b47-11f0-b854-631a30042bb5'', EVENT(Default;Year 2024-2025 Semester 3)]
labels:
  en: Year semester
  ku: Werzê Sal
  ar: الفصل الدراسي
labels-plural:
  en: Year semesters
  ku: Werzên Sal
  ar: الفصل الدراسي
';


--
-- Name: acorn_university_year_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.acorn_university_year_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.acorn_university_year_seq OWNER TO university;

--
-- Name: acorn_university_academic_years; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_academic_years (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    current boolean DEFAULT true NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    name character varying(1024) DEFAULT ''::character varying NOT NULL,
    ordinal integer DEFAULT nextval('public.acorn_university_year_seq'::regclass),
    enabled boolean DEFAULT true NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    event_id uuid NOT NULL
);


ALTER TABLE public.acorn_university_academic_years OWNER TO university;

--
-- Name: TABLE acorn_university_academic_years; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_academic_years IS 'global-scope: true
menu-splitter: true
order: 1000
seeding:
  # Historic required for Year 10, enrollment year calculation
  - [''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'', 01/09/2025, 30/05/2026, false, '''', ''2025-2026'', 107]
  - [''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', 01/09/2024, 30/05/2025, true, '''', ''2024-2025'', 106]
  - [''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', 01/09/2023, 30/05/2024, false, '''', ''2023-2024'', 105]
  - [''8fe62240-3546-11f0-bc4d-3f9721dbc106'', 01/09/2022, 30/05/2023, false, '''', ''2022-2023'', 104]
  - [''8fe62420-3546-11f0-bc4e-67afd1391b00'', 01/09/2021, 30/05/2022, false, '''', ''2021-2022'', 103]
  - [''8fe6248e-3546-11f0-bc4f-cf68964a0a8a'', 01/09/2020, 30/05/2021, false, '''', ''2020-2021'', 102]
  - [''8fe624fc-3546-11f0-bc50-57d4a0995e07'', 01/09/2019, 30/05/2020, false, '''', ''2019-2020'', 101]
  - [''8fe62560-3546-11f0-bc51-f7ceae4026bf'', 01/09/2018, 30/05/2019, false, '''', ''2018-2019'', 100]
labels:
  en: Academic Year
  ku: Sale Akademik
  ar: السنة الدراسية
labels-plural:
  en: Academic Years
  ku: Salên Akademik
  ar: السنة الدراسية
';


--
-- Name: COLUMN acorn_university_academic_years.current; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_academic_years.current IS 'order: 2
css-classes:
  - col-xs-3';


--
-- Name: COLUMN acorn_university_academic_years.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_academic_years.description IS 'tab: acorn::lang.models.general.description';


--
-- Name: COLUMN acorn_university_academic_years.name; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_academic_years.name IS 'order: 1
column-type: partial
column-partial: current
css-classes-column:
  - tablet';


--
-- Name: COLUMN acorn_university_academic_years.ordinal; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_academic_years.ordinal IS 'invisible: true
hidden: true';


--
-- Name: COLUMN acorn_university_academic_years.enabled; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_academic_years.enabled IS 'order: 3
css-classes:
  - col-xs-3';


--
-- Name: acorn_university_hierarchy_event; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_hierarchy_event (
    hierarchy_id uuid NOT NULL,
    event_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_hierarchy_event OWNER TO university;

--
-- Name: TABLE acorn_university_hierarchy_event; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_hierarchy_event IS 'menu: false';


--
-- Name: acorn_university_lectures; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_lectures (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    course_material_id uuid NOT NULL,
    event_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_lectures OWNER TO university;

--
-- Name: TABLE acorn_university_lectures; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_lectures IS 'menu: false
labels:
  en: Lecture
  ku: Seminar
  ar: ندوة
labels-plural:
  en: Lectures
  ku: Seminarên
  ar: الندوات
';


--
-- Name: COLUMN acorn_university_lectures.course_material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_lectures.course_material_id IS 'span: right';


--
-- Name: acorn_calendar_linked_events; Type: VIEW; Schema: public; Owner: createsystem
--

CREATE VIEW public.acorn_calendar_linked_events AS
 SELECT acorn_university_academic_years.event_id,
    'public'::character varying(2048) AS schema,
    'acorn_university_academic_years'::character varying(2048) AS "table",
    'event_id'::character varying(2048) AS "column",
    'Acorn\University\Models\AcademicYear'::text AS model_type,
    acorn_university_academic_years.id AS model_id
   FROM public.acorn_university_academic_years
UNION ALL
 SELECT acorn_university_academic_year_semesters.event_id,
    'public'::character varying(2048) AS schema,
    'acorn_university_academic_year_semesters'::character varying(2048) AS "table",
    'event_id'::character varying(2048) AS "column",
    'Acorn\University\Models\AcademicYearSemester'::text AS model_type,
    acorn_university_academic_year_semesters.id AS model_id
   FROM public.acorn_university_academic_year_semesters
UNION ALL
 SELECT acorn_university_hierarchy_event.event_id,
    'public'::character varying(2048) AS schema,
    'acorn_university_hierarchy_event'::character varying(2048) AS "table",
    'event_id'::character varying(2048) AS "column",
    'Acorn\University\Models\HierarchyEvent'::text AS model_type,
    NULL::uuid AS model_id
   FROM public.acorn_university_hierarchy_event
UNION ALL
 SELECT acorn_exam_interview_students.event_id,
    'public'::character varying(2048) AS schema,
    'acorn_exam_interview_students'::character varying(2048) AS "table",
    'event_id'::character varying(2048) AS "column",
    'Acorn\Exam\Models\InterviewStudent'::text AS model_type,
    acorn_exam_interview_students.id AS model_id
   FROM public.acorn_exam_interview_students
UNION ALL
 SELECT acorn_calendar_event_parts.event_id,
    'public'::character varying(2048) AS schema,
    'acorn_calendar_event_parts'::character varying(2048) AS "table",
    'event_id'::character varying(2048) AS "column",
    'Acorn\Calendar\Models\EventPart'::text AS model_type,
    acorn_calendar_event_parts.id AS model_id
   FROM public.acorn_calendar_event_parts
UNION ALL
 SELECT acorn_university_lectures.event_id,
    'public'::character varying(2048) AS schema,
    'acorn_university_lectures'::character varying(2048) AS "table",
    'event_id'::character varying(2048) AS "column",
    'Acorn\University\Models\Lecture'::text AS model_type,
    acorn_university_lectures.id AS model_id
   FROM public.acorn_university_lectures;


ALTER VIEW public.acorn_calendar_linked_events OWNER TO createsystem;

--
-- Name: acorn_enrollment_course_entry_requirements; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_enrollment_course_entry_requirements (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    enrollment_course_id uuid NOT NULL,
    description text,
    minimum_students integer DEFAULT 1 NOT NULL,
    maximum_students integer,
    required_interview_id uuid,
    related_course_id uuid NOT NULL,
    required_exam_id uuid,
    current boolean DEFAULT true NOT NULL,
    minimum_score double precision,
    failed_course boolean DEFAULT false NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    import_source character varying(1024),
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_enrollment_course_entry_requirements OWNER TO university;

--
-- Name: TABLE acorn_enrollment_course_entry_requirements; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_enrollment_course_entry_requirements IS 'order: 500
labels:
  en: Course Entry Requirement
  ku: Mercê Têketina Kursê
  ar: متطلبات الفرع
labels-plural:
  en: Course Entry Requirements
  ku: Mercê Têketinan Kursê
  ar: متطلبات الفرع
';


--
-- Name: COLUMN acorn_enrollment_course_entry_requirements.minimum_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_course_entry_requirements.minimum_students IS 'field-comment: 
  en: The course will automatically marked as Failed if this minimum quota is not achieved during the enrollment process.
  ku: Ger di dema pêvajoya qeydkirinê de ev kotaya herî kêm neyê bidestxistin, qurs dê bixweber wekî Têkçûyî were nîşankirin.
  ar: سيتم تلقائيًا تصنيف الدورة على أنها فاشلة إذا لم يتم تحقيق هذا الحد الأدنى من الحصة أثناء عملية التسجيل.
 ';


--
-- Name: COLUMN acorn_enrollment_course_entry_requirements.maximum_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_course_entry_requirements.maximum_students IS 'field-comment:
  en: When the course is full, no more students can be allocated
  ku: Dema ku ders tijî bibe, êdî xwendekar nayên veqetandin
  ar: عندما تكون الدورة ممتلئة، لا يمكن تخصيص المزيد من الطلاب';


--
-- Name: COLUMN acorn_enrollment_course_entry_requirements.related_course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_course_entry_requirements.related_course_id IS 'field-comment: These entry requirement criteria are only applicable to students with this specific High-School certificate. Create new Entry requirements for other Certificates.
';


--
-- Name: COLUMN acorn_enrollment_course_entry_requirements.minimum_score; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_course_entry_requirements.minimum_score IS 'field-comment: 
  en: Minimum Score
  ku: Kêmtirîn Pila
  ar: الحد الأدنى من الدرجات';


--
-- Name: COLUMN acorn_enrollment_course_entry_requirements.failed_course; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_course_entry_requirements.failed_course IS 'commentHtml: true
field-comment: 
  en: This course will not be considered in the enrollment recursive student allocation process. This happens automatically when not enough students are allocated on a course and the enrollment process re-runs to re-allocate everyone again <i>without</i> this course.
  ku: Ev ders dê di pêvajoya dabeşkirina xwendekaran a dubarekirî ya qeydkirinê de neyê hesibandin. Ev bixweber diqewime dema ku têra xwe xwendekar li ser dersek neyên dabeşkirin û pêvajoya qeydkirinê ji nû ve tê meşandin da ku her kes dîsa <i>bêyî</i> vê dersê ji nû ve were dabeşkirin.
  ar: لن تُؤخذ هذه الدورة في الاعتبار في عملية تخصيص الطلاب المتكررة للتسجيل. يحدث هذا تلقائيًا عند عدم تخصيص عدد كافٍ من الطلاب في دورة، وتُعاد عملية التسجيل لإعادة تخصيص جميع الطلاب الذين لم يُسجلوا في هذه الدورة.';


--
-- Name: COLUMN acorn_enrollment_course_entry_requirements.import_source; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_course_entry_requirements.import_source IS 'invisible: true
hidden: true';


--
-- Name: acorn_enrollment_desires; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_enrollment_desires (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    enrollment_student_id uuid NOT NULL,
    course_entry_requirement_id uuid NOT NULL,
    sort_order integer DEFAULT 1 NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    import_source text,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_enrollment_desires OWNER TO university;

--
-- Name: TABLE acorn_enrollment_desires; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_enrollment_desires IS 'order: 700
labels:
  en: Enrollment desire
  ku: Xwastîn mofadala
  ar: تسجيل الرغبات
labels-plural:
  en: Enrollment desires
  ku: Xwastînên mofadala
  ar: تسجيل الرغبات
';


--
-- Name: COLUMN acorn_enrollment_desires.course_entry_requirement_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_desires.course_entry_requirement_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_enrollment_desires.sort_order; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_desires.sort_order IS 'list-editable: true
labels:
  en: Priority
  ku: Pêşeyî
  ar: الأولوية
labels-plural:
  en: Priorities
  ku: Pêşeyîyên
  ar: الأولوية
field-comment: Students will be allocated during the enrollment process according to these priorities.';


--
-- Name: COLUMN acorn_enrollment_desires.import_source; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_desires.import_source IS 'invisible: true
hidden: true';


--
-- Name: acorn_enrollment_enrollments; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_enrollment_enrollments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) DEFAULT 'Enrollment'::character varying NOT NULL,
    description text,
    calculation_id uuid NOT NULL,
    strategy_function character varying(1024) DEFAULT 'ScoreFirst'::character varying NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    owner_entity_id uuid,
    include_special_status_points boolean DEFAULT false NOT NULL,
    applied_at timestamp(0) without time zone,
    deleted_at timestamp(0) without time zone,
    calculation_academic_year_id uuid,
    calculation_course_id uuid,
    calculation_exam_id uuid,
    calculation_course_type_id uuid,
    state_indicator character varying(2048)[],
    type character(2) DEFAULT 'EN'::bpchar NOT NULL,
    desire_weight double precision DEFAULT 5.0 NOT NULL,
    show_on_front_end boolean DEFAULT false NOT NULL
);


ALTER TABLE public.acorn_enrollment_enrollments OWNER TO university;

--
-- Name: TABLE acorn_enrollment_enrollments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_enrollment_enrollments IS 'order: 10
plugin-names:
  en: Enrollment
  ku: Mofadala
  ar: التسجيل
qr-code-scan: true
labels:
  en: Enrollment
  ku: Mofadala
  ar: التسجيل
labels-plural:
  en: Enrollments
  ku: Mofadalan
  ar: التسجيل
';


--
-- Name: COLUMN acorn_enrollment_enrollments.name; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.name IS 'order: 1
depends-on:
  applied_at:
    condition: "not :applied_at::timestamp without time zone is null"
    field:
      read-only: true
';


--
-- Name: COLUMN acorn_enrollment_enrollments.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.description IS 'tab: acorn::lang.models.general.description
order: 1000';


--
-- Name: COLUMN acorn_enrollment_enrollments.calculation_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.calculation_id IS 'order: 5
new-row: true
tab: acorn.exam::lang.models.calculation.label
field-comment: 
  en: Entry scores will come from this calculation
  ku: Xalên têketinê dê ji vê hesabkirinê derkevin
  ar: ستأتي درجات الدخول من هذا الحساب
depends-on:
  applied_at:
    condition: "not :applied_at::timestamp without time zone is null"
    field:
      read-only: true
';


--
-- Name: COLUMN acorn_enrollment_enrollments.strategy_function; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.strategy_function IS 'order: 1
field-type: dropdown
tab: acorn.exam::lang.models.calculation.label
column-type: text
field-options:
  weighted: acorn.enrollment::lang.models.enrollment.weighted
  score_first: acorn.enrollment::lang.models.enrollment.score_first
  desire_first: acorn.enrollment::lang.models.enrollment.desire_first
  all_first: acorn.enrollment::lang.models.enrollment.all_first
  random: acorn.enrollment::lang.models.enrollment.random
depends-on:
  applied_at:
    condition: "not :applied_at::timestamp without time zone is null"
    field:
      read-only: true
extra-translations:
  weighted: 
    en: Score and Desire priority balanced
  score_first: 
    en: Score First
  desire_first: 
    en: Desire First
  all_first: 
    en: All First desires
  random: 
    en: Random
field-comment:  
  en: A desire weight is required for the weighted option. Option "All First Desires" will move all students to the 1st target semester, year, course or their 1st desire without any calculation.
  ku: Ji bo vebijarka girankirî giraniya xwestekê pêwîst e. Vebijêrka "Hemû Xwestekên Pêşîn" dê hemû xwendekaran bêyî hesabkirinê biguhezîne semestera hedef a 1-emîn, sal, qurs an jî xwesteka wan a 1-emîn.
  ar: يُشترط وزن الرغبة للخيار المرجح. خيار "جميع الرغبات الأولى" ينقل جميع الطلاب إلى الفصل الدراسي أو السنة أو المقرر الدراسي الأول المستهدف، أو رغبتهم الأولى دون أي حساب.';


--
-- Name: COLUMN acorn_enrollment_enrollments.owner_entity_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.owner_entity_id IS 'order: 2
depends-on:
  applied_at:
    condition: "not :applied_at::timestamp without time zone is null"
    field:
      read-only: true
';


--
-- Name: COLUMN acorn_enrollment_enrollments.include_special_status_points; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.include_special_status_points IS 'order: 2
tab: acorn.exam::lang.models.calculation.label
depends-on:
  applied_at:
    condition: "not :applied_at::timestamp without time zone is null"
    field:
      read-only: true
comment-html: true
field-comment: 
  en: The maximum extra + points from Student <a href="/backend/acorn/university/studentstatuses">Special Statues</a> will be added to the students'' score during calculations.
  ku: Xalên herî zêde yên + ji Statuyên Taybet ên Xwendekaran <a href="/backend/acorn/university/studentstatuses"> dê di dema hesabkirinê de li puana xwendekaran werin zêdekirin.
  ar: سيتم إضافة الحد الأقصى من النقاط الإضافية من <a href="/backend/acorn/university/studentstatuses">الحالات الخاصة</a> للطالب إلى درجة الطالب أثناء الحسابات.
';


--
-- Name: COLUMN acorn_enrollment_enrollments.applied_at; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.applied_at IS 'read-only: true
css-classes:
  - highlight-value
tab-location: 3';


--
-- Name: COLUMN acorn_enrollment_enrollments.deleted_at; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.deleted_at IS 'hidden: true';


--
-- Name: COLUMN acorn_enrollment_enrollments.calculation_academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.calculation_academic_year_id IS 'order: 10
depends-on:
  calculation: 
    condition: "not position(''<year>'' in (select expression from acorn_exam_calculations where id = :calculation_id)) = 0"
    field:
      hidden: false
  applied_at:
    condition: "not :applied_at::timestamp without time zone is null"
    field:
      read-only: true
tab: acorn.exam::lang.models.calculation.label
hidden: true';


--
-- Name: COLUMN acorn_enrollment_enrollments.calculation_course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.calculation_course_id IS 'order: 11
depends-on:
  calculation: 
    condition: "not position(''<course>'' in (select expression from acorn_exam_calculations where id = :calculation_id)) = 0"
    field:
      hidden: false
tab: acorn.exam::lang.models.calculation.label
hidden: true';


--
-- Name: COLUMN acorn_enrollment_enrollments.calculation_exam_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.calculation_exam_id IS 'order: 12
depends-on:
  calculation: 
    condition: "not position(''<exam>'' in (select expression from acorn_exam_calculations where id = :calculation_id)) = 0"
    field:
      hidden: false
tab: acorn.exam::lang.models.calculation.label
hidden: true';


--
-- Name: COLUMN acorn_enrollment_enrollments.calculation_course_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.calculation_course_type_id IS 'order: 14
depends-on:
  calculation: 
    condition: "not position(''<course-type>'' in (select expression from acorn_exam_calculations where id = :calculation_id)) = 0"
    field:
      hidden: false
tab: acorn.exam::lang.models.calculation.label
hidden: true';


--
-- Name: COLUMN acorn_enrollment_enrollments.state_indicator; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.state_indicator IS 'sqlSelect: (select fn_acorn_enrollment_enrollments_state_indicator(acorn_enrollment_enrollments))
extra-translations:
  new:
    en: New
  applied:
    en: Applied
  ran_not_applied:
    en: Ran, not applied
  content_not_run:
    en: Content, not run';


--
-- Name: COLUMN acorn_enrollment_enrollments.type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.type IS 'order: 4
field-type: dropdown
column-type: text
field-options:
  EN: acorn.enrollment::lang.models.enrollment.enrollment_type_en
  SA: acorn.enrollment::lang.models.enrollment.enrollment_type_sa
  YA: acorn.enrollment::lang.models.enrollment.enrollment_type_ya
  RM: acorn.enrollment::lang.models.enrollment.enrollment_type_rm
tab: acorn.exam::lang.models.calculation.label
extra-translations:
  enrollment_type_en:
    en: Enrollment in to other institutions
    ku: Qeydkirina li saziyên din
    ar: التسجيل في مؤسسات أخرى
  enrollment_type_sa:
    en: Semester advancement
    ku: Pêşveçûna semesterê
    ar: التقدم في الفصل الدراسي
  enrollment_type_ya:
    en: Year advancement
    ku: Pêşveçûna salê
    ar: التقدم السنوي
  enrollment_type_rm:
    en: Removal from existing course
    ku: Rakirina ji qursa heyî
    ar: الإزالة من الدورة الحالية
comment-html: true
field-comment:
  en: >
    <ul class="help-block">
    <li><b>Enrollment in to other institutions</b>: Successful students are moved to other courses, usually in other institutions, based on their registered desires. Useful for <b>enrollment in to Universities</b> from High School.</li>
    <li><b>Semester advancement</b>: Successful students are added to the next consecutive semester on the same course.</li>
    <li><b>Year advancement</b>: Successful students are added to the next consecutive year on the same course.</li>
    <li><b>Removal from existing course</b>: Failed students are removed from their <i>existing</i> groups.</li>
    </ul>
    <p class="help-block">All Student movements are based on the results of a custom registered <a target="_blank" href="/backend/acorn/exam/calculations">Calculation</a> and an <a target="_blank" href="/backend/acorn/exam/exams">Exam</a>.<br/>
    Various processing algorithms are available depending on the type of movement.<br/>
    The proposed changes for each process always can be analyzed in an <a target="_blank" href="/university/xavier/index.html?password=fryace4">Enrollments OLAP cube</a> before applying the proposals. After Application, changes cannot be reversed.
    </p>
  ku: >
    <ul class="help-block">
    <li><b>Qeydkirina li saziyên din</b>: Xwendekarên serkeftî li gorî daxwazên xwe yên qeydkirî, bi gelemperî li saziyên din, ji bo qursên din têne veguhastin. Ji bo <b>qeydkirina Zanîngehan</b> ji Lîseyê bikêr e.</li>
    <li><b>Pêşveçûna semesterê</b>: Xwendekarên serkeftî li ser heman qursê li semestera din a li pey hev têne zêdekirin.</li>
    <li><b>Pêşveçûna salê</b>: Xwendekarên serkeftî li ser heman qursê li sala din a li pey hev têne zêdekirin.</li>
    <li><b>Rakirina ji qursa heyî</b>: Xwendekarên têkçûyî ji komên xwe yên <i>heyî</i> têne rakirin.</li>
    </ul>
    <p class="help-block">Hemû tevgerên Xwendekaran li ser bingeha encamên <a target="_blank" href="/backend/acorn/exam/calculations">Hesabkirin</a>ek qeydkirî û <a target="_blank" href="/backend/acorn/exam/exams">Ezmûnek</a> ne.<br/>
    Li gorî celebê tevgerê algorîtmayên pêvajoyê yên cûrbecûr hene.<br/>
    Guhertinên pêşniyarkirî ji bo her pêvajoyê her gav dikarin di <a target="_blank" href="/university/xavier/index.html?password=fryace4">Berî sepandina pêşniyaran, qeydkirina kuba OLAP</a> bikin. Piştî Serlêdanê, guhertin nayên vegerandin.
    </p>
';


--
-- Name: COLUMN acorn_enrollment_enrollments.desire_weight; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.desire_weight IS 'order: 3
comment-html: true
field-comment: 
  en: With weighted processing, this value indicates the importance of desires. Student desires are ordered by <span class="expression">final_score - (desire_priority * desire_weight)</span> where the 1st desire priority is zero.
  ku: Bi pêvajoya girankirî, ev nirx girîngiya daxwazan nîşan dide. Daxwazên xwendekaran li gorî <span class="expression">final_score - (desire_priority * desire_weight)</span> têne rêzkirin ku tê de pêşîniya xwesteka 1-emîn sifir e.
  ar: في المعالجة الموزونة، تشير هذه القيمة إلى أهمية الرغبات. تُرتَّب رغبات الطلاب حسب <span class="expression">final_score - (desire_priority * desire_weight)</span>، حيث تكون أولوية الرغبة الأولى صفرًا.
tab: acorn.exam::lang.models.calculation.label';


--
-- Name: COLUMN acorn_enrollment_enrollments.show_on_front_end; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_enrollments.show_on_front_end IS 'tab-location: 3
explicit-label-key: acorn.user::lang.settings.show_on_front_end';


--
-- Name: acorn_enrollment_runs; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_enrollment_runs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    enrollment_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    completed_at timestamp(0) without time zone,
    name character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL,
    description text
);


ALTER TABLE public.acorn_enrollment_runs OWNER TO university;

--
-- Name: TABLE acorn_enrollment_runs; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_enrollment_runs IS 'menu: false
labels:
  en: Runs
labels-plural:
  en: Runs';


--
-- Name: COLUMN acorn_enrollment_runs.name; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_runs.name IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_enrollment_student_notes; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_enrollment_student_notes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    enrollment_student_id uuid NOT NULL,
    type character varying(256),
    name character varying(2048) NOT NULL,
    description text,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL
);


ALTER TABLE public.acorn_enrollment_student_notes OWNER TO university;

--
-- Name: TABLE acorn_enrollment_student_notes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_enrollment_student_notes IS 'menu: false';


--
-- Name: acorn_exam_answers; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_answers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    question_id uuid NOT NULL,
    description text,
    sort_order integer DEFAULT 1 NOT NULL,
    current boolean DEFAULT false NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    name character varying(1024) NOT NULL
);


ALTER TABLE public.acorn_exam_answers OWNER TO university;

--
-- Name: TABLE acorn_exam_answers; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_answers IS 'menu: false';


--
-- Name: COLUMN acorn_exam_answers.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_answers.description IS 'order: 1000
tab: acorn::lang.models.general.description';


--
-- Name: COLUMN acorn_exam_answers.sort_order; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_answers.sort_order IS 'list-editable: true';


--
-- Name: COLUMN acorn_exam_answers.current; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_answers.current IS 'list-editable: true
labels:
  en: Correct
labels-plural:
  en: Correct';


--
-- Name: COLUMN acorn_exam_answers.name; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_answers.name IS 'order: 1
labels:
  en: Answer
labels-plural:
  en: Answers';


--
-- Name: acorn_exam_calculation_course_materials; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_calculation_course_materials (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    course_material_id uuid NOT NULL,
    calculation_id uuid NOT NULL,
    academic_year_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_calculation_course_materials OWNER TO university;

--
-- Name: TABLE acorn_exam_calculation_course_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_calculation_course_materials IS 'order: 140
menu: false
labels:
  en: Course Material Calculation
labels-plural:
  en: Course Material Calculations';


--
-- Name: acorn_exam_calculation_course_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_calculation_course_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    course_type_id uuid NOT NULL,
    calculation_id uuid NOT NULL,
    academic_year_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_calculation_course_types OWNER TO university;

--
-- Name: TABLE acorn_exam_calculation_course_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_calculation_course_types IS 'order: 140
menu: false
labels:
  en: Course Type Calculation
labels-plural:
  en: Course Type Calculations
seeding:
  # acorn_exam_calculation_course_types
  # id, course_type_id, calculation_id, academic_year_id, created_by_user_id
  - [''9ee73c3e-665d-4044-b6f2-f7c8211e4ac0'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''958b8af0-2e7f-11f0-b4b4-9f4a22fbe4eb'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e436a8-3edb-11f0-970f-0321a187dddf'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9ee46f13-b23e-4ab7-998a-b2585f1a41ad'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e43702-3edb-11f0-9710-6f6c1ee08369'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9ee52bda-2631-48db-ac33-44630c76e83c'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e43766-3edb-11f0-9711-17612a9bbf3c'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''958b8af0-2e7f-11f0-b4b4-9f4a22fbe4eb'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e437c0-3edb-11f0-9712-67755e07b7c2'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9ee46f13-b23e-4ab7-998a-b2585f1a41ad'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e43806-3edb-11f0-9713-9bdb8430f1f1'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9ee52bda-2631-48db-ac33-44630c76e83c'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e43860-3edb-11f0-9714-afe20ccedc67'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''958b8af0-2e7f-11f0-b4b4-9f4a22fbe4eb'', ''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e438b0-3edb-11f0-9715-d7aa1522f5e3'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9ee46f13-b23e-4ab7-998a-b2585f1a41ad'', ''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''a3e43914-3edb-11f0-9716-3f3e64d72c5d'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9ee52bda-2631-48db-ac33-44630c76e83c'', ''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''9f30f390-1c37-4f4b-bbcf-b410f4664a67'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9f30f314-4c4c-4a4c-bfe8-9cc4f25b1593'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f30f3a1-8ba7-4ca9-9bbc-69ccc529343e'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9f30f314-4c4c-4a4c-bfe8-9cc4f25b1593'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f30f3ae-bc19-4d90-ad88-52dae6505fc3'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''9f30f314-4c4c-4a4c-bfe8-9cc4f25b1593'', ''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f47bb99-fa17-46db-a17d-36d9ec4f48b6'', ''801fb8af-5ed3-4436-b89e-9151e9558c24'', ''958b8af0-2e7f-11f0-b4b4-9f4a22fbe4eb'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f47bbad-1051-4715-8bde-73b9bb3ced5d'', ''801fb8af-5ed3-4436-b89e-9151e9558c24'', ''958b8af0-2e7f-11f0-b4b4-9f4a22fbe4eb'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c075-2ca2-4ad1-9bb1-cce9ae1ee430'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''4adde423-f7d0-4965-9425-151e6b3e2697'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c088-6ece-4ddd-bbe4-8fab116b8843'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''4adde423-f7d0-4965-9425-151e6b3e2697'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c09d-9d9d-44ea-890e-731c94d36a60'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''4adde423-f7d0-4965-9425-151e6b3e2697'', ''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c0f9-5464-47cb-b293-bf793e072d1d'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''803b5d0b-5fc8-4451-8808-dba9da22ad42'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c107-195e-47d6-9252-bbd1bcc4798e'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''803b5d0b-5fc8-4451-8808-dba9da22ad42'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c117-210c-4340-b7e4-743cd14115f3'', ''a5d8016a-78ad-4296-aac7-fc5332045764'', ''803b5d0b-5fc8-4451-8808-dba9da22ad42'', ''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
';


--
-- Name: COLUMN acorn_exam_calculation_course_types.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_calculation_course_types.academic_year_id IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_exam_calculation_courses; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_calculation_courses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    course_id uuid NOT NULL,
    calculation_id uuid NOT NULL,
    academic_year_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_calculation_courses OWNER TO university;

--
-- Name: TABLE acorn_exam_calculation_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_calculation_courses IS 'order: 140
menu: false
labels:
  en: Course Calculation
labels-plural:
  en: Course Calculations';


--
-- Name: acorn_exam_calculation_material_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_calculation_material_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    material_type_id uuid NOT NULL,
    calculation_id uuid NOT NULL,
    academic_year_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_calculation_material_types OWNER TO university;

--
-- Name: TABLE acorn_exam_calculation_material_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_calculation_material_types IS 'order: 140
menu: false
labels:
  en: Material Type Calculation
labels-plural:
  en: Material Type Calculations
seeding:
  # Avg of material exams for 2023-2024, 2024-2025, 2025-2026
  - [''9ee73c3e-665d-4044-b6f2-f7c8211e4ac0'', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''15f02b5c-2bff-11f0-8074-4bf737ba6a74'', ''543d0928-1b6c-11f0-abc1-8bd8fff1240d'']
  - [''9efea117-120a-441b-9a3f-242eb863e52d'', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''15f02b5c-2bff-11f0-8074-4bf737ba6a74'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'']
  - [''9efea117-120a-441b-9a3f-242eb863e52d'', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''15f02b5c-2bff-11f0-8074-4bf737ba6a74'', ''dee7d1e6-33ba-11f0-9757-0b77f37bff0c'']

';


--
-- Name: acorn_exam_calculation_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_calculation_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_calculation_types OWNER TO university;

--
-- Name: TABLE acorn_exam_calculation_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_calculation_types IS 'order: 2010
seeding:
  - [''56013d6e-3247-11f0-8e96-2f232943abf8'', ''score'']
  - [''56013e90-3247-11f0-8e97-9b91890119b6'', ''count'']
  - [''56013ed6-3247-11f0-8e98-478677b2ee2a'', ''boolean'']
labels:
  en: Calculation Type
  ku: Cura Algoritum
  ar: نوع الحساب
labels-plural:
  en: Calculation Types
  ku: Curên Algoritum
  ar: أنواع الحسابات

';


--
-- Name: acorn_exam_calculations; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_calculations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) DEFAULT 'calculation'::character varying NOT NULL,
    description text,
    expression character varying(2048) NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    minimum double precision,
    maximum double precision,
    required boolean,
    calculation_type_id uuid,
    parent_id uuid,
    owner_entity_id uuid,
    nest_left integer DEFAULT 0 NOT NULL,
    nest_right integer DEFAULT 0 NOT NULL,
    nest_depth integer DEFAULT 0 NOT NULL,
    academic_year_id uuid NOT NULL,
    code character varying(1024),
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_calculations OWNER TO university;

--
-- Name: TABLE acorn_exam_calculations; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_calculations IS 'order: 2005
seeding:
  # acorn_exam_calculations
  # id, name, description, expression, created_by_user_id, minimum, maximum, required, calculation_type_id, parent_id, owner_entity_id, academic_year_id, code
  - [''9f30f314-4c4c-4a4c-bfe8-9cc4f25b1593'', ''Mother language passed'', '''', ''case when :student/<student>/<year>/locale/ku=0: = 1 then :?material/<student>/<year>/.*/High School/Kurdish/language/.*/score/result=0: when :student/<student>/<year>/locale/ar=0: = 1 then :?material/<student>/<year>/.*/High School/Arabic/language/.*/score/result=0: else 0 end'', ''9e95e479-9690-4091-a730-aecdf51f9258'', ''1'', ''1'', true, ''56013ed6-3247-11f0-8e98-478677b2ee2a'', ''9ee52f50-d22a-471e-bdeb-b13d81b1afb2'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', NULL]
  - [''9ee52f50-d22a-471e-bdeb-b13d81b1afb2'', ''Bakeloria pass'', '''', ''sum( :?course/<student>/<year>/.*/High School/Check any Required materials failed/count/required/result=1:, :?course/<student>/<year>/.*/High School/Maximum of Material and Language materials failed/count/required/result=1:, :?course/<student>/<year>/.*/High School/Maximum of Specialization materials failed/count/required/result=1:, :?course/<student>/<year>/.*/High School/Maximum of all materials failed/count/required/result=1:, :?calculation/<student>/<year>/Bakeloria final mark/score=0:, :?calculation/<student>/<year>/Mother language passed/boolean/required/result=0: )'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', ''6'', ''6'', true, ''56013ed6-3247-11f0-8e98-478677b2ee2a'', NULL, ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''BKPS'']
  - [''9ee52bda-2631-48db-ac33-44630c76e83c'', ''Maximum of all materials failed'', ''<p>For course &lt;course&gt;</p>'', ''count(:material/<student>/<year>/<course>/<course-type>/.*/.*/.*/score/result:) - sum(:?material/<student>/<year>/<course>/<course-type>/.*/.*/.*/score/result:)'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', ''0'', ''2'', true, ''56013e90-3247-11f0-8e97-9b91890119b6'', ''9ee52f50-d22a-471e-bdeb-b13d81b1afb2'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', '''']
  - [''15f02b5c-2bff-11f0-8074-4bf737ba6a74'', ''Avg of material exams'', ''<p>For material &lt;course&gt; / &lt;material&gt;</p>'', ''avg(:score/<student>/<year>/<course>/<material>/.*/.*/.*:)'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', NULL, NULL, false, ''56013d6e-3247-11f0-8e96-2f232943abf8'', ''958b952c-2e7f-11f0-b4b6-0f8c2c07f33e'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''MEX'']
  - [''4adde423-f7d0-4965-9425-151e6b3e2697'', ''Maximum of Specialization materials failed'', ''<p>For course &lt;course&gt;</p>'', ''count(:material/<student>/<year>/<course>/<course-type>/.*/specialization/.*/score/result:) - sum(:?material/<student>/<year>/<course>/<course-type>/.*/specialization/.*/score/result:)'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', ''0'', ''1'', true, ''56013e90-3247-11f0-8e97-9b91890119b6'', ''9ee52f50-d22a-471e-bdeb-b13d81b1afb2'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''MSZF'']
  - [''803b5d0b-5fc8-4451-8808-dba9da22ad42'', ''Maximum of Material and Language materials failed'', ''<p>For course &lt;course&gt;</p>'', ''count(:material/<student>/<year>/<course>/<course-type>/.*/(material|language)/.*/score/result:) - sum(:?material/<student>/<year>/<course>/<course-type>/.*/(material|language)/.*/score/result:)'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', ''0'', ''2'', true, ''56013e90-3247-11f0-8e97-9b91890119b6'', ''9ee52f50-d22a-471e-bdeb-b13d81b1afb2'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''MMLF'']
  - [''958b8af0-2e7f-11f0-b4b4-9f4a22fbe4eb'', ''Avg of materials'', ''<p>For course &lt;course&gt;</p>'', ''avg(:material/<student>/<year>/<course>/<course-type>/.*/.*/.*/score/result:)'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', ''40'', ''100'', true, ''56013d6e-3247-11f0-8e96-2f232943abf8'', ''958b952c-2e7f-11f0-b4b6-0f8c2c07f33e'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''BKCRS'']
  - [''958b952c-2e7f-11f0-b4b6-0f8c2c07f33e'', ''Bakeloria final mark'', '''', ''avg(:course/<student>/<year>/.*/High School/.*/score/required/result:)'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', ''40'', ''100'', true, ''56013d6e-3247-11f0-8e96-2f232943abf8'', ''9ee52f50-d22a-471e-bdeb-b13d81b1afb2'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''BKFM'']
  - [''9ee46f13-b23e-4ab7-998a-b2585f1a41ad'', ''Check any Required materials failed'', ''<p>For course &lt;course&gt;</p>'', ''count(:material/<student>/<year>/<course>/<course-type>/.*/.*/.*/score/required/result:) - sum(:?material/<student>/<year>/<course>/<course-type>/.*/.*/.*/score/required/result:)'', ''a11d6172-6565-4195-a62e-038358aa9fa9'', ''0'', ''0'', true, ''56013e90-3247-11f0-8e97-9b91890119b6'', ''9ee52f50-d22a-471e-bdeb-b13d81b1afb2'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''CRMF'']
  - [''9fda22f6-8fd2-4165-b04a-25f827cf2d42'', ''test'', '''', ''<exam>'', ''9e95e479-9690-4091-a730-aecdf51f9258'', NULL, NULL, false, NULL, NULL, NULL, ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''TEST'']
  - [''9fda2416-5d52-4458-a720-be17e5268158'', ''test3'', '''', ''ddd'', ''9e95e479-9690-4091-a730-aecdf51f9258'', NULL, NULL, false, NULL, NULL, NULL, ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''tr'']
  - [''9fda2447-8ef0-4165-bee0-45336d65dbf2'', ''erter'', '''', ''ertert'', ''9e95e479-9690-4091-a730-aecdf51f9258'', NULL, NULL, false, NULL, NULL, NULL, ''529bd45a-1b6c-11f0-99b6-b7f647885dbc'', ''ertert'']
labels:
  en: Calculation
  ku: Algoritum
  ar: حساب
labels-plural:
  en: Calculations
  ku: Algoritumên
  ar: الحسابات';


--
-- Name: COLUMN acorn_exam_calculations.expression; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_calculations.expression IS 'field-type: textarea
column-type: partial
column-partial: expression
field-comment: >
  Use Microsoft Excel spreadsheet functions, like avg() and sum() and token names for data.
  Tokens include: <ul class="help-block">
  <li>:score/student-code/year/course/material/material-type/exam/exam-type:</li>
  <li>:project/student-code/year/project[/required]/result:</li>
  <li>:interview/student-code/year/interview[/required]/result:</li>
  <li>:material/student-code/year/course/material/material-type[/required]/result:</li>
  <li>:course/student-code/year/course/course-type[/required]/result:</li>
  <li>:calculation/student-code/year/calculation/calculation-type[/required]:</li>
  <li>:student/student-code/year/age:</li>
  <li>:student/student-code/year/locale:</li>
  <li>:student/student-code/year/language:</li>
  </ul>
  <p class="help-block">All names are same, e.g. My Project, case-insensitive searching. Always the English name.
  UUIDs can also be used.
  .* means all values.
  Some examples:</p> 
  <ul class="help-block">
  <li>avg(:score/ROJ99/2023-2024/Literature/English/material/.*/.*:)</li>
  </ul>
comment-html: true';


--
-- Name: COLUMN acorn_exam_calculations.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_calculations.minimum IS 'list-editable: true';


--
-- Name: COLUMN acorn_exam_calculations.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_calculations.maximum IS 'list-editable: true';


--
-- Name: acorn_exam_centres; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_centres (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    location_id uuid NOT NULL,
    capacity integer DEFAULT 0 NOT NULL,
    email character varying(1024),
    phone character varying(1024),
    academic_year_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_centres OWNER TO university;

--
-- Name: TABLE acorn_exam_centres; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_centres IS 'order: 60
labels:
  en: Exam Centre
  ku: Navendê Ezmûnî
  ar: مركز الامتحانات
labels-plural:
  en: Exam Centres
  ku: Navendên Ezmûnî
  ar: مراكز الامتحانات';


--
-- Name: acorn_exam_exam_materials; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_exam_materials (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    exam_id uuid NOT NULL,
    course_material_id uuid NOT NULL,
    required boolean DEFAULT false NOT NULL,
    minimum integer DEFAULT 0 NOT NULL,
    maximum integer DEFAULT 100 NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    weight double precision,
    interview_id uuid,
    project_id uuid,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_exam_materials OWNER TO university;

--
-- Name: TABLE acorn_exam_exam_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_exam_materials IS 'menu: false
attribute-functions:
  name: return $this->course_material->name . ''::'' . $this->exam->name;
labels:
  en: Material Exam
labels-plural:
  en: Material Exams
';


--
-- Name: COLUMN acorn_exam_exam_materials.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_exam_materials.minimum IS 'list-editable: true';


--
-- Name: COLUMN acorn_exam_exam_materials.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_exam_materials.maximum IS 'list-editable: true';


--
-- Name: acorn_exam_exams; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_exams (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) DEFAULT 'exam'::character varying NOT NULL,
    description text,
    type_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_exams OWNER TO university;

--
-- Name: TABLE acorn_exam_exams; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_exams IS 'order: 50
plugin-names:
  en: Exams
  ku: Ezmûnên
  ar: الامتحانات
seeding:
  - [''0816bbee-2bdd-11f0-8400-57e43cb8bcc9'', ''Theory'', '''', ''cb58f452-28e3-11f0-bf77-eb3094eae79e'']
  - [''fb9806d4-2beb-11f0-9893-2ba7af07260a'', ''Laboratory'', '''', ''c2975b06-28e3-11f0-a996-1f7fab9642e9'']
labels:
  en: Exam + Q&amp;A
  ku: Ezmûn + Q&amp;A
  ar: الامتحان
labels-plural:
  en: Exams + Q&amp;As
  ku: Ezmûnên + Q&amp;As
  ar: الامتحان
qr-code-scan: true';


--
-- Name: COLUMN acorn_exam_exams.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_exams.description IS 'order: 1000
tab: acorn::lang.models.general.description';


--
-- Name: acorn_exam_instances; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_instances (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    exam_centre_id uuid NOT NULL,
    datetime timestamp(0) without time zone NOT NULL,
    exam_id uuid NOT NULL,
    name character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    show_on_front_end boolean DEFAULT false NOT NULL
);


ALTER TABLE public.acorn_exam_instances OWNER TO university;

--
-- Name: TABLE acorn_exam_instances; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_instances IS 'order: 70
labels:
  en: Exam event
  ku: Bûyerê ezmûnî
  ar: حدث الامتحان
labels-plural:
  en: Exam events
  ku: Bûyerên ezmûnî
  ar: أحداث الامتحان';


--
-- Name: COLUMN acorn_exam_instances.show_on_front_end; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_instances.show_on_front_end IS 'tab-location: 3
explicit-label-key: acorn.user::lang.settings.show_on_front_end';


--
-- Name: acorn_exam_interviews; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_interviews (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying DEFAULT 'interview'::character varying NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    maximum double precision,
    minimum double precision,
    required boolean,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_interviews OWNER TO university;

--
-- Name: TABLE acorn_exam_interviews; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_interviews IS 'order: 80
labels:
  en: Interview
  ku: Bihevditin
  ar: المقابلات
labels-plural:
  en: Interviews
  ku: Bihevditinên
  ar: المقابلات';


--
-- Name: acorn_exam_questions; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_questions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    section_id uuid NOT NULL,
    description text,
    sort_order integer DEFAULT 1 NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    name character varying(1024) NOT NULL
);


ALTER TABLE public.acorn_exam_questions OWNER TO university;

--
-- Name: TABLE acorn_exam_questions; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_questions IS 'menu: false';


--
-- Name: COLUMN acorn_exam_questions.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_questions.description IS 'order: 1000
tab: acorn::lang.models.general.description';


--
-- Name: COLUMN acorn_exam_questions.sort_order; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_questions.sort_order IS 'list-editable: true';


--
-- Name: COLUMN acorn_exam_questions.name; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_questions.name IS 'order: 1
labels:
  en: Question
labels-plural:
  en: Questions';


--
-- Name: acorn_exam_score_names; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_score_names (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    score double precision NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid DEFAULT public.fn_acorn_user_get_seed_user() NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_score_names OWNER TO university;

--
-- Name: TABLE acorn_exam_score_names; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_score_names IS 'menu: false
seeding:
  - [''dd033dd0-ca27-450a-940a-d1e3980c6d52'', 1, ''yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''6435b322-0039-438e-9428-137409aa8fb5'', 2, ''dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''13ff391d-c86b-4dc1-bf4a-009625635685'', 3, ''sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''5a68af3a-1c7a-4cf0-b999-a7c896c52592'', 4, ''çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''a985c055-b6b6-4ae7-8fd7-12f1c2fa6add'', 5, ''penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''5440d0d8-da7f-410e-bff4-47b503de89f5'', 6, ''şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''0df0895e-4eb9-41f9-a2fa-35d31483771a'', 7, ''heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''67408c1c-4930-4497-b2ba-8ca4c0a5d294'', 8, ''haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''effb3ffb-d0e4-4392-a082-e98a09f29edf'', 9, ''neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''37e41c84-56ec-4a8a-a70e-e9dc8ac49bde'', 10, ''deh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''02235a3d-95c4-4d44-8dab-e1de1c0d3c6d'', 11, ''yazdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''e43ef0dd-1d37-4aa2-87e1-016592734ede'', 12, ''dwazdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''8f9d6e5a-2d50-4d8a-a7f5-523531d44d2b'', 13, ''sezdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''f2856064-dddd-4731-87f6-35f787eea439'', 14, ''çardeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''b1013f87-c0eb-4121-bcfa-1e83cf355e70'', 15, ''pazdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''301bcaa1-16a8-4915-8158-97a5ffbff8d1'', 16, ''şexdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''b6fdb8d5-1d31-4633-8146-299293ea9172'', 17, ''heftdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''af966852-6520-4ee5-b01b-d4a06550a54e'', 18, ''haştdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''25e73d43-4f50-44a0-8be6-a918a5211776'', 19, ''nwazdeh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''07f13d23-4b89-49d9-9de1-92b083fe4b2a'', 20, ''bist'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''5e3eb7ff-8fd8-4e28-842b-d093a4d2f19e'', 21, ''bist û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''8bff7ac5-b8a0-488e-b492-1909c58e6373'', 22, ''bist û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''9db69945-8d6c-4004-8f40-8ef4932528e7'', 23, ''bist û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''257bab7e-3811-4980-a8df-d15633dfff59'', 24, ''bist û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''3c89e893-50e6-499b-bb7c-cc90a8c52940'', 25, ''bist û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''11dd945a-82f8-4027-bc9b-0875f0c66a99'', 26, ''bist û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''3c9867ff-8a4d-4b9f-a351-e3e3a1a5be0e'', 27, ''bist û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''32fef1ac-2779-493a-b25a-a0d6ed604226'', 28, ''bist û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''570d2608-3e86-4e60-96fb-fc4f94e93664'', 29, ''bist û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''143ae535-2e4c-42d2-b226-964c9ffa9a71'', 30, ''sesti'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''71bc8e75-6d12-4183-a587-8b5a780b0181'', 31, ''sesti û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''cb16a090-c4b3-4fa8-a544-6b741edca372'', 32, ''sesti û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''9508260d-509d-4529-9c33-7009047d7d28'', 33, ''sesti û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''ee32de37-a900-42ad-a9fd-e30b62b7956e'', 34, ''sesti û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''9dacf553-5770-4c62-bf5f-2ea181c6ed05'', 35, ''sesti û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''321ea14b-6caa-4301-8f92-893ec093084f'', 36, ''sesti û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''ce8e1911-7b8b-4b33-a116-87253d51b1c1'', 37, ''sesti û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''2e5442ad-6078-4c2d-9c8b-5ba7be0a0932'', 38, ''sesti û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''2c359cf1-5f0a-4674-a61b-4a6d4533f736'', 39, ''sesti û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''df0d30e3-c953-4eec-8166-b94e14de577c'', 40, ''cil'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''f22769aa-32f1-44dc-a17a-f7c21c912f20'', 41, ''cil û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''a28f2e33-67c5-480f-9fa6-966375f4276b'', 42, ''cil û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''24088bf5-6b19-4255-a044-740a66fbbf76'', 43, ''cil û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''9e2b40ce-381a-46ba-9d83-8948bd8fe7ec'', 44, ''cil û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''98d0c532-ae6e-4696-98b5-59504bf087ef'', 45, ''cil û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''afc052e3-4962-4357-b403-3a6d02917c69'', 46, ''cil û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''e04fbadb-398e-4e98-aa63-d9c2b5aac786'', 47, ''cil û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''e65b189a-d5a6-4e52-a71e-8d24a715a96c'', 48, ''cil û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''bab6a18f-56c6-4d27-8b9e-fc3be31ee4cd'', 49, ''cil û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''1ff24aca-89e1-419b-8db6-8587efa757b1'', 50, ''pencî '', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''1d0235f5-1986-4d52-9528-a7851e664081'', 51, ''pencî û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''1983ba68-1458-4a19-9a05-28d18be45527'', 52, ''pencî û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''5bbcb677-9c84-43b4-b43e-a76aa6d31b2d'', 53, ''pencî û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''b0f4b32b-d452-4cae-a9dd-a3bcb66532d1'', 54, ''pencî û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''f644b0fd-2dc9-4c00-8ac7-8309d69afa7c'', 55, ''pencî û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''479280f5-b16d-458d-9a07-c395116d5acc'', 56, ''pencî û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''5e1c0e3f-7dbb-4e30-ac4b-2d17b3cf691b'', 57, ''pencî û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''a28cd099-2d82-4b06-9adb-3da13556e3cf'', 58, ''pencî û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''34204047-56f3-426e-bc2f-85e8df5b432e'', 59, ''pencî û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''b6b777c8-8296-4e7f-bdc4-bec9fc377e1c'', 60, ''şeştî'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''ccaf7c2c-4136-44b4-9470-72d2808603e1'', 61, ''şeştî û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''695eb245-c900-46cd-91b5-c52bcad0c032'', 62, ''şeştî û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''34aa5796-5e5a-43a9-b943-842cec97bd46'', 63, ''şeştî û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''bff1625f-0cd7-4f8b-bd82-fe5719729d5c'', 64, ''şeştî û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''8e2c8d7f-f145-44dc-839a-7e0b0c777ae5'', 65, ''şeştî û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''715425f6-4386-4917-ac2e-bee033a3869f'', 66, ''şeştî û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''2a2adb06-8f23-4dc6-a6a8-ae1e3a2b83af'', 67, ''şeştî û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''db39e264-096c-4bdc-8a8b-2268b0f8ead1'', 68, ''şeştî û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''8c39a406-28be-4c87-89dc-369a15514176'', 69, ''şeştî û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''99c8dc28-abc8-4393-936a-741544c4c5c1'', 70, ''heftî'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''8f9903a3-1388-47d2-a044-659f76237b37'', 71, ''heftî û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''615ece8b-9bfd-415b-8119-e75ecd981340'', 72, ''heftî û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''a9cd5b30-f52f-46ec-9507-d6ab84d87576'', 73, ''heftî û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''971b028f-0f58-47b4-a9a4-d7118a23e803'', 74, ''heftî û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''a66d5087-b916-442b-aee5-3b77f2ff6aaf'', 75, ''heftî û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''00a7af37-144c-42e1-819a-be1b11ac1100'', 76, ''heftî û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''827ca3ca-d3f6-44b8-a036-f99ad087ed8d'', 77, ''heftî û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''5d252612-7e7e-48f1-9190-6d03d47335c3'', 78, ''heftî û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''15e9a4d4-779b-4435-b93b-ec4ef1505690'', 79, ''heftî û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''e988015f-4e0b-4ae6-995b-6277f7e52f55'', 80, ''haştî'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''f09becf9-913d-4e5a-bd2d-f3fb3047246c'', 81, ''haştî û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''dc8c0fa6-e310-4bce-af41-051eeb5b0367'', 82, ''haştî û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''9dd72daf-bc85-4f26-9b25-aa67e0ccaf9f'', 83, ''haştî û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''9f25284c-1fb6-43d1-86f2-62aff0cfc7e2'', 84, ''haştî û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''9984a27b-83f0-4ae9-8c74-271afff63252'', 85, ''haştî û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''7610fbe5-48a9-4177-813c-c400268741a6'', 86, ''haştî û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''2086897a-9721-4772-8146-a598aac33796'', 87, ''haştî û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''e4f4eea0-ae65-4567-bf55-82d523406760'', 88, ''haştî û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''d678d56e-4dca-4fad-aa1e-185c803cc2bb'', 89, ''haştî û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''da939bcf-9f2a-460f-870b-210aabd88ed6'', 90, ''nod'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''78c6c889-31d7-4c7d-bd6a-a03585a873b8'', 91, ''nod û yek'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''cd05aa33-e2c9-4bbf-93fa-227c55741c39'', 92, ''nod û dû'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''0675adb2-5a1b-47aa-bd1f-3116d1d7dea1'', 93, ''nod û sê'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''fae35362-9f77-4a32-b5bf-08fe72aec4f5'', 94, ''nod û çar'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''e8bdf06a-444b-4f77-b733-4408bbe76487'', 95, ''nod û penc'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''54d253e1-18ea-47eb-8b9e-9cd3f5b242a5'', 96, ''nod û şex'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''22cba61a-c599-4c90-b39a-1e5fa81c7f4d'', 97, ''nod û heft'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''54f390f8-33a9-4689-be8d-eceab8eb4be3'', 98, ''nod û haşt'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''488b7a6b-328d-4d4f-ab84-03399b8597c1'', 99, ''nod û neh'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
  - [''a9616eee-1d7c-4541-9f47-a1318aa2e775'', 100, ''sed'', ''9eaa5c43-db07-4597-ac8c-156253e84376'']
seeding-other:
  winter_translate_attributes:
    # winter_translate_attributes
    # locale, model_id, model_type, attribute_data
    - [''ku'', ''dd033dd0-ca27-450a-940a-d1e3980c6d52'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"yek","description":""}'']
    - [''ku'', ''6435b322-0039-438e-9428-137409aa8fb5'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"dû","description":""}'']
    - [''ku'', ''13ff391d-c86b-4dc1-bf4a-009625635685'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sê","description":""}'']
    - [''ku'', ''5a68af3a-1c7a-4cf0-b999-a7c896c52592'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"çar","description":""}'']
    - [''ku'', ''cdc800ae-28be-11f0-a8a6-334555029afd'', ''Acorn\University\Models\Material'', ''{"name":"Birkarî","description":""}'']
    - [''ku'', ''cb58f452-28e3-11f0-bf77-eb3094eae79e'', ''Acorn\Exam\Models\Type'', ''{"name":"teorî","description":""}'']
    - [''ku'', ''c2975b06-28e3-11f0-a996-1f7fab9642e9'', ''Acorn\Exam\Models\Type'', ''{"name":"pratik","description":""}'']
    - [''ku'', ''a985c055-b6b6-4ae7-8fd7-12f1c2fa6add'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"penc","description":""}'']
    - [''ku'', ''5440d0d8-da7f-410e-bff4-47b503de89f5'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şex","description":""}'']
    - [''ku'', ''0df0895e-4eb9-41f9-a2fa-35d31483771a'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heft","description":""}'']
    - [''ku'', ''67408c1c-4930-4497-b2ba-8ca4c0a5d294'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haşt","description":""}'']
    - [''ku'', ''effb3ffb-d0e4-4392-a082-e98a09f29edf'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"neh","description":""}'']
    - [''ku'', ''37e41c84-56ec-4a8a-a70e-e9dc8ac49bde'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"deh","description":""}'']
    - [''ku'', ''02235a3d-95c4-4d44-8dab-e1de1c0d3c6d'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"yazdeh","description":""}'']
    - [''ku'', ''e43ef0dd-1d37-4aa2-87e1-016592734ede'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"dwazdeh","description":""}'']
    - [''ku'', ''8f9d6e5a-2d50-4d8a-a7f5-523531d44d2b'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sezdeh","description":""}'']
    - [''ku'', ''f2856064-dddd-4731-87f6-35f787eea439'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"çardeh","description":""}'']
    - [''ku'', ''b1013f87-c0eb-4121-bcfa-1e83cf355e70'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pazdeh","description":""}'']
    - [''ku'', ''301bcaa1-16a8-4915-8158-97a5ffbff8d1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şexdeh","description":""}'']
    - [''ku'', ''b6fdb8d5-1d31-4633-8146-299293ea9172'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftdeh","description":""}'']
    - [''ku'', ''af966852-6520-4ee5-b01b-d4a06550a54e'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştdeh","description":""}'']
    - [''ku'', ''25e73d43-4f50-44a0-8be6-a918a5211776'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nwazdeh","description":""}'']
    - [''ku'', ''07f13d23-4b89-49d9-9de1-92b083fe4b2a'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist","description":""}'']
    - [''ku'', ''5e3eb7ff-8fd8-4e28-842b-d093a4d2f19e'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û yek","description":""}'']
    - [''ku'', ''8bff7ac5-b8a0-488e-b492-1909c58e6373'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û dû","description":""}'']
    - [''ku'', ''9db69945-8d6c-4004-8f40-8ef4932528e7'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û sê","description":""}'']
    - [''ku'', ''257bab7e-3811-4980-a8df-d15633dfff59'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û çar","description":""}'']
    - [''ku'', ''3c89e893-50e6-499b-bb7c-cc90a8c52940'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û penc","description":""}'']
    - [''ku'', ''11dd945a-82f8-4027-bc9b-0875f0c66a99'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û şex","description":""}'']
    - [''ku'', ''3c9867ff-8a4d-4b9f-a351-e3e3a1a5be0e'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û heft","description":""}'']
    - [''ku'', ''32fef1ac-2779-493a-b25a-a0d6ed604226'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û haşt","description":""}'']
    - [''ku'', ''570d2608-3e86-4e60-96fb-fc4f94e93664'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"bist û neh","description":""}'']
    - [''ku'', ''143ae535-2e4c-42d2-b226-964c9ffa9a71'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti","description":""}'']
    - [''ku'', ''71bc8e75-6d12-4183-a587-8b5a780b0181'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û yek","description":""}'']
    - [''ku'', ''cb16a090-c4b3-4fa8-a544-6b741edca372'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û dû","description":""}'']
    - [''ku'', ''9508260d-509d-4529-9c33-7009047d7d28'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û sê","description":""}'']
    - [''ku'', ''ee32de37-a900-42ad-a9fd-e30b62b7956e'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û çar","description":""}'']
    - [''ku'', ''9dacf553-5770-4c62-bf5f-2ea181c6ed05'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û penc","description":""}'']
    - [''ku'', ''321ea14b-6caa-4301-8f92-893ec093084f'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û şex","description":""}'']
    - [''ku'', ''ce8e1911-7b8b-4b33-a116-87253d51b1c1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û heft","description":""}'']
    - [''ku'', ''2e5442ad-6078-4c2d-9c8b-5ba7be0a0932'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û haşt","description":""}'']
    - [''ku'', ''2c359cf1-5f0a-4674-a61b-4a6d4533f736'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sesti û neh","description":""}'']
    - [''ku'', ''df0d30e3-c953-4eec-8166-b94e14de577c'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil","description":""}'']
    - [''ku'', ''f22769aa-32f1-44dc-a17a-f7c21c912f20'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û yek","description":""}'']
    - [''ku'', ''a28f2e33-67c5-480f-9fa6-966375f4276b'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û dû","description":""}'']
    - [''ku'', ''24088bf5-6b19-4255-a044-740a66fbbf76'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û sê","description":""}'']
    - [''ku'', ''9e2b40ce-381a-46ba-9d83-8948bd8fe7ec'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û çar","description":""}'']
    - [''ku'', ''98d0c532-ae6e-4696-98b5-59504bf087ef'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û penc","description":""}'']
    - [''ku'', ''afc052e3-4962-4357-b403-3a6d02917c69'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û şex","description":""}'']
    - [''ku'', ''e04fbadb-398e-4e98-aa63-d9c2b5aac786'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û heft","description":""}'']
    - [''ku'', ''e65b189a-d5a6-4e52-a71e-8d24a715a96c'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û haşt","description":""}'']
    - [''ku'', ''bab6a18f-56c6-4d27-8b9e-fc3be31ee4cd'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"cil û neh","description":""}'']
    - [''ku'', ''1ff24aca-89e1-419b-8db6-8587efa757b1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî ","description":""}'']
    - [''ku'', ''1d0235f5-1986-4d52-9528-a7851e664081'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û yek","description":""}'']
    - [''ku'', ''1983ba68-1458-4a19-9a05-28d18be45527'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û dû","description":""}'']
    - [''ku'', ''5bbcb677-9c84-43b4-b43e-a76aa6d31b2d'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û sê","description":""}'']
    - [''ku'', ''b0f4b32b-d452-4cae-a9dd-a3bcb66532d1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û çar","description":""}'']
    - [''ku'', ''f644b0fd-2dc9-4c00-8ac7-8309d69afa7c'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û penc","description":""}'']
    - [''ku'', ''479280f5-b16d-458d-9a07-c395116d5acc'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û şex","description":""}'']
    - [''ku'', ''5e1c0e3f-7dbb-4e30-ac4b-2d17b3cf691b'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û heft","description":""}'']
    - [''ku'', ''a28cd099-2d82-4b06-9adb-3da13556e3cf'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û haşt","description":""}'']
    - [''ku'', ''34204047-56f3-426e-bc2f-85e8df5b432e'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"pencî û neh","description":""}'']
    - [''ku'', ''b6b777c8-8296-4e7f-bdc4-bec9fc377e1c'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî","description":""}'']
    - [''ku'', ''ccaf7c2c-4136-44b4-9470-72d2808603e1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û yek","description":""}'']
    - [''ku'', ''695eb245-c900-46cd-91b5-c52bcad0c032'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û dû","description":""}'']
    - [''ku'', ''34aa5796-5e5a-43a9-b943-842cec97bd46'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û sê","description":""}'']
    - [''ku'', ''bff1625f-0cd7-4f8b-bd82-fe5719729d5c'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û çar","description":""}'']
    - [''ku'', ''8e2c8d7f-f145-44dc-839a-7e0b0c777ae5'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û penc","description":""}'']
    - [''ku'', ''715425f6-4386-4917-ac2e-bee033a3869f'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û şex","description":""}'']
    - [''ku'', ''2a2adb06-8f23-4dc6-a6a8-ae1e3a2b83af'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û heft","description":""}'']
    - [''ku'', ''db39e264-096c-4bdc-8a8b-2268b0f8ead1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û haşt","description":""}'']
    - [''ku'', ''8c39a406-28be-4c87-89dc-369a15514176'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"şeştî û neh","description":""}'']
    - [''ku'', ''99c8dc28-abc8-4393-936a-741544c4c5c1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî","description":""}'']
    - [''ku'', ''8f9903a3-1388-47d2-a044-659f76237b37'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û yek","description":""}'']
    - [''ku'', ''615ece8b-9bfd-415b-8119-e75ecd981340'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û dû","description":""}'']
    - [''ku'', ''a9cd5b30-f52f-46ec-9507-d6ab84d87576'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û sê","description":""}'']
    - [''ku'', ''971b028f-0f58-47b4-a9a4-d7118a23e803'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û çar","description":""}'']
    - [''ku'', ''a66d5087-b916-442b-aee5-3b77f2ff6aaf'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û penc","description":""}'']
    - [''ku'', ''00a7af37-144c-42e1-819a-be1b11ac1100'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û şex","description":""}'']
    - [''ku'', ''827ca3ca-d3f6-44b8-a036-f99ad087ed8d'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û heft","description":""}'']
    - [''ku'', ''5d252612-7e7e-48f1-9190-6d03d47335c3'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û haşt","description":""}'']
    - [''ku'', ''15e9a4d4-779b-4435-b93b-ec4ef1505690'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"heftî û neh","description":""}'']
    - [''ku'', ''e988015f-4e0b-4ae6-995b-6277f7e52f55'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî","description":""}'']
    - [''ku'', ''f09becf9-913d-4e5a-bd2d-f3fb3047246c'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û yek","description":""}'']
    - [''ku'', ''dc8c0fa6-e310-4bce-af41-051eeb5b0367'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û dû","description":""}'']
    - [''ku'', ''9dd72daf-bc85-4f26-9b25-aa67e0ccaf9f'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û sê","description":""}'']
    - [''ku'', ''9f25284c-1fb6-43d1-86f2-62aff0cfc7e2'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û çar","description":""}'']
    - [''ku'', ''9984a27b-83f0-4ae9-8c74-271afff63252'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û penc","description":""}'']
    - [''ku'', ''7610fbe5-48a9-4177-813c-c400268741a6'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û şex","description":""}'']
    - [''ku'', ''2086897a-9721-4772-8146-a598aac33796'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û heft","description":""}'']
    - [''ku'', ''e4f4eea0-ae65-4567-bf55-82d523406760'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û haşt","description":""}'']
    - [''ku'', ''d678d56e-4dca-4fad-aa1e-185c803cc2bb'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"haştî û neh","description":""}'']
    - [''ku'', ''da939bcf-9f2a-460f-870b-210aabd88ed6'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod","description":""}'']
    - [''ku'', ''78c6c889-31d7-4c7d-bd6a-a03585a873b8'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û yek","description":""}'']
    - [''ku'', ''cd05aa33-e2c9-4bbf-93fa-227c55741c39'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û dû","description":""}'']
    - [''ku'', ''0675adb2-5a1b-47aa-bd1f-3116d1d7dea1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û sê","description":""}'']
    - [''ku'', ''fae35362-9f77-4a32-b5bf-08fe72aec4f5'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û çar","description":""}'']
    - [''ku'', ''e8bdf06a-444b-4f77-b733-4408bbe76487'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û penc","description":""}'']
    - [''ku'', ''54d253e1-18ea-47eb-8b9e-9cd3f5b242a5'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û şex","description":""}'']
    - [''ku'', ''22cba61a-c599-4c90-b39a-1e5fa81c7f4d'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û heft","description":""}'']
    - [''ku'', ''488b7a6b-328d-4d4f-ab84-03399b8597c1'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û neh","description":""}'']
    - [''ku'', ''a9616eee-1d7c-4541-9f47-a1318aa2e775'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"sed","description":""}'']
    - [''ku'', ''54f390f8-33a9-4689-be8d-eceab8eb4be3'', ''Acorn\Exam\Models\ScoreName'', ''{"name":"nod û haşt","description":""}'']';


--
-- Name: acorn_exam_scores; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_scores (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    exam_material_id uuid NOT NULL,
    score double precision NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    student_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_scores OWNER TO university;

--
-- Name: TABLE acorn_exam_scores; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_scores IS 'order: 35
menu: false
labels:
  en: Score
  ku: Sitand
  ar: علامة المادة
labels-plural:
  en: Scores
  ku: Sitandên
  ar: علامة المادة
';


--
-- Name: COLUMN acorn_exam_scores.score; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_scores.score IS 'list-editable: delete-on-null
format: "%.2f%%"
revisionable: true
labels:
  en: Score
  ku: Pila
  ar: علامة المادة
labels:
  en: Scores
  ku: Pilayên
  ar: علامة المادة
';


--
-- Name: acorn_exam_sections; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_sections (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    exam_id uuid NOT NULL,
    description text,
    sort_order integer DEFAULT 1 NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    name character varying(1024) NOT NULL
);


ALTER TABLE public.acorn_exam_sections OWNER TO university;

--
-- Name: TABLE acorn_exam_sections; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_sections IS 'menu: false';


--
-- Name: COLUMN acorn_exam_sections.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_sections.description IS 'order: 1000
tab: acorn::lang.models.general.description';


--
-- Name: COLUMN acorn_exam_sections.sort_order; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_sections.sort_order IS 'list-editable: true';


--
-- Name: COLUMN acorn_exam_sections.name; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_sections.name IS 'order: 1
labels:
  en: Question
labels-plural:
  en: Questions';


--
-- Name: acorn_exam_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) DEFAULT 'exam'::character varying NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_exam_types OWNER TO university;

--
-- Name: TABLE acorn_exam_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_types IS 'order: 2000
menu-splitter: true
seeding:
  - [''c2975b06-28e3-11f0-a996-1f7fab9642e9'', ''laboratory'']
  - [''cb58f452-28e3-11f0-bf77-eb3094eae79e'', ''theory'']
  - [''dca3d498-a51f-4623-bb87-d61baaa082ed'', ''enrollment'', ''Candidate Exam'']
labels:
  en: Exam Type
  ku: Cura Ezmûn
  ar: نوع الامتحان
labels-plural:
  en: Exam Types
  ku: Curên Ezmûn
  ar: أنواع الامتحانات
';


--
-- Name: acorn_university_course_materials; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_course_materials (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    material_id uuid NOT NULL,
    required boolean DEFAULT false NOT NULL,
    minimum integer DEFAULT 0 NOT NULL,
    maximum integer DEFAULT 100 NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    weight double precision,
    sort_order integer NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    course_year_semester_id uuid NOT NULL,
    material_topic_id uuid
);


ALTER TABLE public.acorn_university_course_materials OWNER TO university;

--
-- Name: TABLE acorn_university_course_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_course_materials IS 'order: 62
menu: false
labels:
  en: Course material
  ku: Kors material
  ar: مادة الفرع
labels-plural:
  en: Course materials
  ku: Kors materialên
  ar: مواد الفرع
no-relation-manager-default: true
attribute-functions:
  name_suffix: |
        $details = array();
        if ($topic = $this->material_topic) array_push($details, "~$topic->name");
        $examCount = $this->exam_exam_materials__course_material()->count();
        if ($examCount) array_push($details, "$examCount&nbsp;exams");
        $lectureCount = $this->university_lectures__course_material()->count();
        if ($lectureCount) array_push($details, "$lectureCount&nbsp;lectures");
        $removalCount  = $this->university_student_course_material_removal__course_materials()->count();
        $additionCount = $this->university_student_course_material_addition__course_materials()->count();
        if ($removalCount)  array_push($details, "-$removalCount");
        if ($additionCount) array_push($details, "+$additionCount");
        if ($this->minimum) array_push($details, "&gt;$this->minimum");
        if ($this->weight) array_push($details, "$this->weight%");
        $detailsString = ($details ? ''('' . implode('','', $details) . '')'' : NULL);
        $requiredHtml  = ($this->required ?''<span class="required"></span>'' : NULL);
        return "$detailsString$requiredHtml";';


--
-- Name: COLUMN acorn_university_course_materials.material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.material_id IS 'order: 2
css-classes:
  - col-xs-4';


--
-- Name: COLUMN acorn_university_course_materials.required; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.required IS 'order: 25
css-classes:
  - col-xs-4
  - no-popup-new-row
comment: primary
list-editable: true
on: acorn.university::lang.models.coursematerial.required
off: acorn.university::lang.models.coursematerial.optional
tab-location: 3
field-comment: Failing a required material usually means failing the whole course
extra-translations:
  optional:
    en: Optional';


--
-- Name: COLUMN acorn_university_course_materials.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.minimum IS 'list-editable: true
tab-location: 3
field-comment: score
css-classes:
  - col-xs-6
  - col-md-3';


--
-- Name: COLUMN acorn_university_course_materials.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.maximum IS 'list-editable: true
tab-location: 3
field-comment: score
css-classes:
  - col-xs-6
  - col-md-3';


--
-- Name: COLUMN acorn_university_course_materials.weight; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.weight IS 'list-editable: true
tab-location: 3
field-comment: (Optional) Can be used in calculations if desired
css-classes:
  - col-xs-6
  - col-md-3
  - new-row';


--
-- Name: COLUMN acorn_university_course_materials.sort_order; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.sort_order IS 'list-editable: true
tab-location: 3
default: 100
field-comment: Order of appearance in materials lists for scores data-entry
css-classes:
  - col-xs-6
  - col-md-3';


--
-- Name: COLUMN acorn_university_course_materials.course_year_semester_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.course_year_semester_id IS 'order: 1
css-classes:
  - col-xs-8';


--
-- Name: COLUMN acorn_university_course_materials.material_topic_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_materials.material_topic_id IS 'order: 10
css-classes:
  - col-xs-4';


--
-- Name: acorn_university_course_plans; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_course_plans (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    course_id uuid NOT NULL,
    enrollment_academic_year_id uuid NOT NULL,
    minimum double precision,
    maximum double precision,
    women_only boolean DEFAULT false,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    required boolean DEFAULT false,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    length integer DEFAULT 4 NOT NULL
);


ALTER TABLE public.acorn_university_course_plans OWNER TO university;

--
-- Name: TABLE acorn_university_course_plans; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_course_plans IS 'menu: false
body-classes:
  - show-breadcrumb-title
labels:
  en: Course Planner
  ku: Plankerê Korsê
  ar: مخطط الدورة
labels-plural:
  en: Course Planners
  ku: Plankerên Korsê
  ar: مخططي الدورة
action-links:
  full-screen:
    type: list
    labels:
      en: Full-screen planner
    url: /backend/acorn/university/courseplans/update/:id?back-to-referrer=Course
    icon: crosshairs
commentHtml: true
form-comment-contexts: create
form-comment: |
      <img class="level" src="/modules/acorn/assets/images/info-64.png"/>
      <b>Course plans</b> create all the course years and semesters for the course starting at the enrollment year.
      Each semester is also a <i>group of students</i>, materials, exams, lectures and more.<br/>
      After creating the initial course plan you can create additional <i>specializations</i> for a given semester
      which will also have their own group of students.
      You can then add|<a target="_blank" href="/backend/acorn/enrollment/enrollments">enroll</a> students to &amp; from these semester groups.<br/>
      The semesters are based on the <i>default semester group</i> for the course or its owning organisation.
      The calendar for the lectures is based on the <i>default calendar</i> for the course or its owning organisation.
      See the <a target="_blank" href="/backend/acorn/university/hierarchies">relationships</a> structure for the enrollment year to find the default settings.
';


--
-- Name: COLUMN acorn_university_course_plans.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_plans.course_id IS 'order: 5
# Necessary to hide field in favour of tab-location 3
contexts:
  create: true
  preview: true
context-update:
  tab-location: 3
  read-only: true
  context: update';


--
-- Name: COLUMN acorn_university_course_plans.enrollment_academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_plans.enrollment_academic_year_id IS 'order: 10
# Necessary to hide field in favour of tab-location 3
contexts:
  create: true
  preview: true
context-update:
  tab-location: 3
  read-only: true
  context: update';


--
-- Name: COLUMN acorn_university_course_plans.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_plans.minimum IS 'list-editable: true
css-classes:
  - col-xs-3
tab-location: 3
';


--
-- Name: COLUMN acorn_university_course_plans.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_plans.maximum IS 'list-editable: true
css-classes:
  - col-xs-3
tab-location: 3';


--
-- Name: COLUMN acorn_university_course_plans.women_only; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_plans.women_only IS 'css-classes:
  - col-xs-3
tab-location: 3';


--
-- Name: COLUMN acorn_university_course_plans.required; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_plans.required IS 'css-classes:
  - col-xs-3
tab-location: 3
';


--
-- Name: COLUMN acorn_university_course_plans.length; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_plans.length IS 'order: 20
# Necessary to hide field in favour of tab-location 3
contexts:
  create: true
  preview: true
context-update:
  tab-location: 3
  read-only: true
  context: update
field-comment: Course length in years
column-type: partial
column-partial: number
suffix: acorn.university::lang.models.courseplan.years
extra-translations:
  years:
    en: Years';


--
-- Name: acorn_university_course_specializations; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_course_specializations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    course_id uuid NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_course_specializations OWNER TO university;

--
-- Name: TABLE acorn_university_course_specializations; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_course_specializations IS 'order: 62
menu: false
labels:
  en: Course specialization
  ku: Pisporiya qursê
  ar: مادة الفرع
labels-plural:
  en: Course specializations
  ku: Pisporiyan qursê
  ar: مواد الفرع
no-relation-manager-default: true';


--
-- Name: COLUMN acorn_university_course_specializations.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_specializations.course_id IS 'order: 2';


--
-- Name: acorn_university_course_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_course_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    code character varying(1024),
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    is_general boolean DEFAULT false NOT NULL
);


ALTER TABLE public.acorn_university_course_types OWNER TO university;

--
-- Name: TABLE acorn_university_course_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_course_types IS 'order: 1150
seeding:
  - [''0d6f1d8c-3ecc-11f0-a5ad-2b8a887dec31'', ''Course'', NULL, ''C'']
  - [''d0691d2e-3f99-11f0-99fb-37aeb35eedd1'', ''University'', NULL, ''UNI'']
  - [''a5d8016a-78ad-4296-aac7-fc5332045764'', ''High School'', NULL, ''HS'']
  - [''65ddc034-4e96-11f0-91c1-3f7ba40fcde3'', ''Middle School'', NULL, ''MS'']
  - [''fa13ea79-c610-4d92-8c28-ab54e950ef68'', ''Middle School Year'', NULL, ''MSY'']
  - [''801fb8af-5ed3-4436-b89e-9151e9558c24'', ''High School Year'', NULL, ''HSY'']
labels:
  en: Course type
  ku: Cura kors
  ar: نوع الفرع
labels-plural:
  en: Course types
  ku: Curên kors
  ar: نوع الفرع
';


--
-- Name: acorn_university_course_years; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_course_years (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    name integer NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    ordinal integer GENERATED ALWAYS AS (name) STORED NOT NULL
);


ALTER TABLE public.acorn_university_course_years OWNER TO university;

--
-- Name: TABLE acorn_university_course_years; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_course_years IS 'attribute-functions:
  name: $name = $this->attributes[''name''] ?? NULL; $ord = Model::ordinal($name); return "$name$ord year";
order: 1005
seeding:
  - [''5afc781c-2b47-11f0-bc2a-0bdc97d6ed09'', NULL, ''1'']
  - [''607dd68c-2b47-11f0-a57e-5f9aa740c8dc'', NULL, ''2'']
  - [''60dc4aaa-2b47-11f0-83f4-7f2b70ba9b18'', NULL, ''3'']
  - [''6118ff22-2b47-11f0-80a4-a7c3a85423e6'', NULL, ''4'']
  - [''99960a78-3864-11f0-a921-ff378d7cc773'', NULL, ''5'']
  - [''99960c8a-3864-11f0-a922-470968d3166b'', NULL, ''6'']
  - [''99960cee-3864-11f0-a923-2f0d564c9ec7'', NULL, ''7'']
  - [''99960d3e-3864-11f0-a924-53433cf99053'', NULL, ''8'']
  - [''99960d98-3864-11f0-a925-432355d22072'', NULL, ''9'']
  - [''61495bc2-2b47-11f0-b804-6317f8482a6b'', NULL, ''10'']
  - [''61733dca-2b47-11f0-b084-23828f21ea2c'', NULL, ''11'']
  - [''619bd3d4-2b47-11f0-9c1e-8b0e1b85bf28'', NULL, ''12'']
labels:
  en: Course Year
  ku: Salê Kors
  ar: سنة الدورة
labels-plural:
  en: Course Years
  ku: Salên Kors
  ar: سنوات الدراسة

';


--
-- Name: COLUMN acorn_university_course_years.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_years.description IS 'tab: acorn::lang.models.general.description';


--
-- Name: COLUMN acorn_university_course_years.name; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_years.name IS 'extra-translations:
  year: 
    en: Year
    ku: Sal
column-type: partial
column-partial: ordinal
suffix: acorn.university::lang.models.courseyear.year
';


--
-- Name: acorn_university_document_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_document_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    template_match character varying(1024)
);


ALTER TABLE public.acorn_university_document_types OWNER TO university;

--
-- Name: TABLE acorn_university_document_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_document_types IS 'order: 1100
menu-splitter: true
labels:
  en: Document type
  ku: Belge nasname
  ar: نوع الهوية
labels-plural:
  en: Document types
  ku: Belgên nasname
  ar: نوع الهوية
seeding:
  - [''e4c82b40-a40f-11f0-ac3f-13160da9c5f5'', ''High-School Certificate'']
';


--
-- Name: acorn_university_entities; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_entities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_group_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    import_source character varying(1024),
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    location_id uuid,
    leaf_table character varying(1024)
);


ALTER TABLE public.acorn_university_entities OWNER TO university;

--
-- Name: TABLE acorn_university_entities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_entities IS 'global-scope: fn_acorn_university_scope_entities
global-scope-css-theme: blue
menu: false
order: -100
labels:
  en: Entity
  ku: Tişt
  ar: الكيان
labels-plural:
  en: Entities
  ku: Tiştên
  ar: الكيان
attribute-functions:
  name-plus: |
        $name  = $this->buildNameFromRelations();
        if ($first = $this->university_hierarchies__entity()->first()) {
            if ($parent = $first->parent) {
                $parentUserGroup = $parent->entity->user_group;
                $name .= " ($parentUserGroup->name)";
            }
        }
        return $name;
';


--
-- Name: COLUMN acorn_university_entities.user_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_entities.user_group_id IS 'field-exclude: true
column-exclude: true
read-only: true';


--
-- Name: COLUMN acorn_university_entities.import_source; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_entities.import_source IS 'tab: Legacy
readOnly: true
tabLocation: 2
advanced: true
invisible: true';


--
-- Name: COLUMN acorn_university_entities.leaf_table; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_entities.leaf_table IS 'labels:
  en: Type
  ku: Cura
  ar: يكتب
labels-plural:
  en: Types
  ku: Curên
  ar: أنواع
hidden: true
';


--
-- Name: acorn_university_identity_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_identity_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_identity_types OWNER TO university;

--
-- Name: TABLE acorn_university_identity_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_identity_types IS 'labels:
  en: Identity type
  ku: Cûra nasname
  ar: نوع الهوية
labels-plural:
  en: Identity types
  ku: Cûran nasname
  ar: نوع الهوية
seeding:
  - [''d9f5affa-4873-11f0-8711-cb311b854057'', ''Syrian National ID'']
  - [''d9f5b0ea-4873-11f0-8712-4779f8bb335f'', ''British passport'']
  - [''d9f5b130-4873-11f0-8713-432262224658'', ''Driving License'']';


--
-- Name: acorn_university_material_topics; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_material_topics (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_material_topics OWNER TO university;

--
-- Name: TABLE acorn_university_material_topics; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_material_topics IS 'order: 68
seeding:
  # acorn_university_material_topics
  # id, name, description, created_by_user_id
  - [''3175bf94-83ae-477d-82bd-cce7b6311e43'', ''Theory'', NULL, ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''e30082ac-8e8c-4be1-9ea7-4f894a025bc8'', ''Practice'', NULL, ''a11d6172-6565-4195-a62e-038358aa9fa9'']
labels:
  en: Topic
  ku: Mijar
  ar: عنوان
labels-plural:
  en: Topics
  ku: Mijarên
  ar: المواضيع';


--
-- Name: acorn_university_material_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_material_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_material_types OWNER TO university;

--
-- Name: TABLE acorn_university_material_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_material_types IS 'order: 1200
seeding:
  # acorn_university_material_types
  # id, name, description, created_by_user_id
  - [''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''material'', NULL, ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''d0fcbfae-f745-4f1c-a99c-30372a6aa128'', ''language'', NULL, ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''ece9328c-430c-4183-a34b-ab3fd4de3589'', ''standard'', NULL, ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''specialization'', ''Material is specific to this, or a few, courses only'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''fdc21104-548c-4341-9ac1-fb4fa1b3fd0b'', ''single'', ''Course has only 1 material'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
labels:
  en: Material type
  ku: Cura material
  ar: نوع المادة
labels-plural:
  en: Material types
  ku: Curên material
  ar: أنواع المواد';


--
-- Name: acorn_university_materials; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_materials (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    material_type_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_materials OWNER TO university;

--
-- Name: TABLE acorn_university_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_materials IS 'order: 65
seeding:
  # acorn_university_materials
  # id, name, description, material_type_id, created_by_user_id
  - [''d675a530-28be-11f0-a2c9-9bb10fa15bd3'', ''Biology'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''dd494c0e-28be-11f0-94e1-a7b2083dd749'', ''Physics'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''e427a282-28be-11f0-8856-a7abd8a449c5'', ''Geography'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''d43af2a2-2bd9-11f0-b08b-5fd59b502470'', ''History'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''d8168f4e-2bd9-11f0-97a5-1b42cf640b5b'', ''Philosophy'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''d84f8434-2bd9-11f0-bfa1-7b92380571bd'', ''Sociology'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''7f5c3dc8-2e53-11f0-8600-6ff513625846'', ''Year 10'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''7f5c4156-2e53-11f0-8601-43470f236a9e'', ''Year 11'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''ee22cafe-502e-11f0-90c2-3702c192c6ec'', ''Year 9'', NULL, ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''cdc800ae-28be-11f0-a8a6-334555029afd'', ''Maths'', '''', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''9f7d3a1a-b218-44a0-b285-c58ed0749a5a'', ''Sport'', '''', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3a4c-ef31-444d-b9ce-e0277d883c69'', ''Art'', '''', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''ecf3dae8-28be-11f0-91f7-f31527b6ca23'', ''Chemistry'', '''', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''9f7d3043-29c9-4a93-9417-374158b3fb10'', ''Anatomy'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''d88f0f6e-2bd9-11f0-8846-8bc9dcb96017'', ''Jineologi'', '''', ''6b4bae9a-149f-11f0-a4e5-779d31ace22e'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''9f7d3005-1327-40a4-9d99-ad83d2358741'', ''Physics and Chemistry'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3073-300e-44a0-aa45-b738e474e871'', ''Nursing'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d30cd-6ceb-4841-bfd3-5b7de5f8085f'', ''Rays'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d310c-48de-40c8-a5a8-b9c406a779de'', ''Anesthetization'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3139-9d3f-4965-970c-972c8824c6b4'', ''Physical therapy'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3165-47e2-4239-9373-6f5bb82464a1'', ''Pharmacy'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d319d-bf6f-4662-a864-de0c7c1f35a0'', ''Lab'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3886-ce95-4120-bf5e-c26355e1cc6d'', ''Financial Mathematics'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d38a9-a00b-45a7-88dc-e1ca69b0f92d'', ''Statistics'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d38d4-7ee0-432a-a613-13f1e8fc470d'', ''Food industries'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d38fb-2d86-4697-aaaa-2c7c744d2eed'', ''Dairy'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d391f-7aff-4a7c-a689-c3c58f72b430'', ''Gardening'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3948-80cc-4fd1-bca2-774b7eea6b1a'', ''Farm animal'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3976-aa21-471b-8a43-c4c5072e7a85'', ''Agricultural pests'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d5a21-3c5c-4242-a091-5a3bf4fd829a'', ''Electronics 3'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f83484d-e6cb-49c3-994b-fdb976ceba92'', ''Web Design'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f83489a-47d5-47ad-8a11-d877272a51ee'', ''Micro Organisms'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f8d4247-f04c-4bc5-9328-62a186e45574'', ''Televison'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f8d429b-fd97-437b-9a8f-dfaac8432db2'', ''Protection and Alarm Systems'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f8d42ca-567a-4106-b583-28281ba8ec35'', ''Antennas'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f8d42fb-0e1e-4459-8351-cac9a6828060'', ''Electronic Device Maintenance'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''005bba60-28bf-11f0-bf7f-cff663f8102b'', ''Arabic'', NULL, ''d0fcbfae-f745-4f1c-a99c-30372a6aa128'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''b025cfe2-50f3-11f0-96d9-13090f80441e'', ''Community Language'', NULL, ''d0fcbfae-f745-4f1c-a99c-30372a6aa128'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''f3c853a8-28be-11f0-8938-73b157eb85a1'', ''Kurdish'', NULL, ''d0fcbfae-f745-4f1c-a99c-30372a6aa128'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''fa61ead0-28be-11f0-9fb3-2bbf7e1c7c7c'', ''English'', '''', ''d0fcbfae-f745-4f1c-a99c-30372a6aa128'', ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''9f7d3210-28c4-4b3d-a914-568d1b2b7987'', ''Internal Combustion Engines'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d32e0-2739-4ad6-9d1b-253a034c1ac2'', ''Mechanical Engineering Drawing 3'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3312-291e-41a9-a5fe-e297d597e2dc'', ''Vehicle control systems'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3342-ed04-4edd-a956-da51c02f58f4'', ''Diesel fuel injection systems'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d35eb-1782-4478-9e13-cc08eac51af5'', ''Electrical appliances 2'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3615-0c25-4950-b326-01e832505ccc'', ''Automated command and control'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d363a-d062-4f98-8b96-6a8fdaa7e6eb'', ''Electrical Engineering Drawing 3'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3661-f29f-4b5c-bf18-b49df3d424c7'', ''Hardware and software maintenance 2'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d368c-0ca7-4f3a-abc5-7991ce322b9f'', ''Programming 3'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d36b3-24d8-4537-a12b-a666197847c1'', ''Network management'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d36da-d87f-4fe2-83fe-fb6269b26c7b'', ''Computer applications'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3700-135b-4322-9c21-aa8ad1e49c1e'', ''Marketing'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3735-b592-45f9-bb09-f3cb237c1f76'', ''Bank accounting'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d375d-0c8d-4587-81d2-208632503d48'', ''Financial Institutions Accounting'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3835-0cdf-487b-8daf-846854567178'', ''Private accounting'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9f7d3861-f5b4-4e32-8de6-613fa2935b32'', ''Computer'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c6fa-c451-4549-8196-cd4239e9c959'', ''Separator'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c724-21a2-400c-9971-4009a27b3d5c'', ''Turning'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c768-a4b5-4a84-9af0-3a068ea51aaf'', ''Cnc'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
  - [''9fc5c7b4-ce62-48dc-ab40-3b867f68aeb9'', ''Industrial Drawing'', '''', ''cef98b97-a61a-4e3f-9270-8ffe718db38b'', ''9e95e479-9690-4091-a730-aecdf51f9258'']
labels:
  en: Material
  ku: Material
  ar: موضوع
labels-plural:
  en: Materials
  ku: Materials
  ar: المواضيع';


--
-- Name: acorn_university_project_students; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_project_students (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(2048) NOT NULL,
    owner_student_id uuid,
    user_group_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    score double precision,
    course_material_id uuid,
    project_id uuid NOT NULL,
    description text,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_project_students OWNER TO university;

--
-- Name: TABLE acorn_university_project_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_project_students IS 'labels:
  en: Project
  ku: Projê
  ar: المشاريع الخاصة
labels-plural:
  en: Projects
  ku: Projên
  ar: المشاريع الخاصة
menu: false';


--
-- Name: COLUMN acorn_university_project_students.owner_student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_project_students.owner_student_id IS 'labels:
  en: Owned Project
  ku: Projê xwede
  ar: المشاريع الخاصة
labels-plural:
  en: Owned Projects
  ku: Projên xwede
  ar: المشاريع الخاصة';


--
-- Name: COLUMN acorn_university_project_students.score; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_project_students.score IS 'list-editable: true
labels:
  en: Score
  ku: Pila
  ar: علامة المادة
labels:
  en: Scores
  ku: Pilayên
  ar: علامة المادة';


--
-- Name: COLUMN acorn_university_project_students.course_material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_project_students.course_material_id IS 'no-relation-manager: true';


--
-- Name: COLUMN acorn_university_project_students.project_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_project_students.project_id IS 'can-filter: false';


--
-- Name: acorn_university_projects; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_projects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(2048) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    maximum double precision,
    minimum double precision,
    required boolean,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_projects OWNER TO university;

--
-- Name: TABLE acorn_university_projects; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_projects IS 'all-controllers: after
menu-splitter: true
labels:
  en: Project
  ku: Projê
  ar: المشاريع الخاصة
labels-plural:
  en: Projects
  ku: Projên
  ar: المشاريع الخاصة';


--
-- Name: acorn_university_semester_groups; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_semester_groups (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_semester_groups OWNER TO university;

--
-- Name: TABLE acorn_university_semester_groups; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_semester_groups IS 'order: 1010
labels:
  en: Semester Group
  ku: Gruba Qunax
  ar: مجموعة الفصل الدراسي
labels-plural:
  en: Semester Groups
  ku: Gubên Qunaxên
  ar: مجموعات الفصل الدراسي';


--
-- Name: COLUMN acorn_university_semester_groups.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_semester_groups.description IS 'tab: acorn::lang.models.general.description';


--
-- Name: acorn_university_semesters; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_semesters (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    ordinal integer NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    semester_group_id uuid
);


ALTER TABLE public.acorn_university_semesters OWNER TO university;

--
-- Name: TABLE acorn_university_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_semesters IS 'attribute-functions:
  name: "return $this->attributes[''name''] . '' ('' . $this->ordinalText() . '')'';"
order: 1012
seeding:
  - [''61c051fa-2b47-11f0-bc0f-ab4c8b696730'', ''Semester 1'', NULL, 1]
  - [''61eb583c-2b47-11f0-adc3-ef976031065b'', ''Semester 2'', NULL, 1]
  - [''6212587e-2b47-11f0-b854-631a30042bb5'', ''Semester 3'', NULL, 1]
labels:
  en: Semester
  ku: Qunax
  ar: الفصل الدراسي
labels-plural:
  en: Semesters
  ku: Qunaxên
  ar: الفصول الدراسية';


--
-- Name: COLUMN acorn_university_semesters.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_semesters.description IS 'tab: acorn::lang.models.general.description';


--
-- Name: acorn_university_student_codes; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_codes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    student_id uuid NOT NULL,
    code character varying(1024) NOT NULL,
    entity_id uuid,
    name character varying(1024) GENERATED ALWAYS AS (code) STORED NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    current boolean DEFAULT true NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_student_codes OWNER TO university;

--
-- Name: TABLE acorn_university_student_codes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_codes IS 'menu: false
labels:
  en: Code
  ku: Kod
  ar: رقم الاكتتاب
labels-plural:
  en: Codes
  ku: Kodên
  ar: رقم الاكتتاب';


--
-- Name: COLUMN acorn_university_student_codes.entity_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_codes.entity_id IS 'can-filter: false
labels:
  en: Owner organisation
  ku: Xwede kod
labels-plural:
  en: Owning organisations
  ku: Xwede kodên
';


--
-- Name: COLUMN acorn_university_student_codes.current; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_codes.current IS 'list-editable: false-on-null';


--
-- Name: acorn_university_student_documents; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    student_id uuid NOT NULL,
    document_type_id uuid,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    pdf character varying(1024) NOT NULL,
    template character varying(1024) NOT NULL
);


ALTER TABLE public.acorn_university_student_documents OWNER TO university;

--
-- Name: TABLE acorn_university_student_documents; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_documents IS 'menu: false
labels:
  en: Document
  ku: Belge
  ar: الرقم الوطني
labels-plural:
  en: Documents
  ku: Belgên
  ar: الرقم الوطني';


--
-- Name: COLUMN acorn_university_student_documents.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_documents.student_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_university_student_documents.document_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_documents.document_type_id IS 'no-relation-manager: true';


--
-- Name: acorn_university_student_identities; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_identities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    number character varying(1024) NOT NULL,
    description text,
    identity_type_id uuid NOT NULL,
    student_id uuid NOT NULL,
    name character varying(1024) GENERATED ALWAYS AS (number) STORED NOT NULL,
    current boolean DEFAULT true NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_student_identities OWNER TO university;

--
-- Name: TABLE acorn_university_student_identities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_identities IS 'menu: false
labels:
  en: Identity
  ku: Nasname
  ar: الرقم الوطني
labels-plural:
  en: Identities
  ku: Nasnamên
  ar: الرقم الوطني';


--
-- Name: COLUMN acorn_university_student_identities.number; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_identities.number IS 'labels:
  en: Number
  ku: Hecmar
  ar: رقم
labels-plural:
  en: Numbers
  ku: Hejmarên
  ar: رقم
';


--
-- Name: COLUMN acorn_university_student_identities.identity_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_identities.identity_type_id IS 'no-relation-manager: true';


--
-- Name: COLUMN acorn_university_student_identities.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_identities.student_id IS 'can-filter: false';


--
-- Name: COLUMN acorn_university_student_identities.current; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_identities.current IS 'list-editable: true';


--
-- Name: acorn_university_student_notes; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_notes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    student_id uuid NOT NULL,
    owner_entity_id uuid,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_student_notes OWNER TO university;

--
-- Name: TABLE acorn_university_student_notes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_notes IS 'menu: false
labels:
  en: Notes
  ku: Têbînî
  ar: ملحوظة
labels-plural:
  en: Notes
  ku: Têbînî
  ar: ملحوظة
';


--
-- Name: COLUMN acorn_university_student_notes.owner_entity_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_notes.owner_entity_id IS 'no-relation-manager: true';


--
-- Name: COLUMN acorn_university_student_notes.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_notes.description IS 'column-type: partial
column-partial: html';


--
-- Name: acorn_university_student_statuses; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_statuses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    score double precision,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_student_statuses OWNER TO university;

--
-- Name: TABLE acorn_university_student_statuses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_statuses IS 'order: 520
labels:
  en: Status
  ku: Rewş
  ar: الحالات الخاصة
labels-plural:
  en: Statuses
  ku: Rewşên
  ar: الحالات الخاصة
seeding:
  - [''021c0f46-3b96-11f0-add5-1fdf3952358b'', ''Families of Martyrs'']
  - [''9b7bab3e-5102-11f0-9cd9-7fb657bb3130'', ''Families Of Martyrs brother'']
  - [''9b7baeb8-5102-11f0-9cda-bffc4b023c0d'', ''Families Of Martyrs sister'']
  - [''9b7bb020-5102-11f0-9cdb-93d38f211b1c'', ''Families Of Martyrs son'']
  - [''9b7bb0fc-5102-11f0-9cdc-9b34ab0a8820'', ''Families Of Martyrs daughter'']
  - [''9b7bb1ba-5102-11f0-9cdd-e70ab0372790'', ''Families Of Martyrs father'']
  - [''9b7bb278-5102-11f0-9cde-6796eef88af5'', ''Families Of Martyrs mother'']
  - [''9b7bb35e-5102-11f0-9cdf-0344f140c200'', ''Families Of Martyrs uncle'']
  - [''9b7bb426-5102-11f0-9ce0-cbc33fff389d'', ''Families Of Martyrs aunt'']
  - [''021c1022-3b96-11f0-add6-9b77f9e97678'', ''From the occupied territories'']
  - [''021c104a-3b96-11f0-add7-bf3af6dabafb'', ''Served in the army'']
  - [''021c1068-3b96-11f0-add8-a7fe27552a6d'', ''Needs housing'']';


--
-- Name: COLUMN acorn_university_student_statuses.description; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_statuses.description IS 'invisible: true';


--
-- Name: COLUMN acorn_university_student_statuses.score; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_statuses.score IS 'list-editable: true
labels:
  en: Score
  ku: Pila
  ar: علامة المادة
labels:
  en: Scores
  ku: Pilayên
  ar: علامة المادة';


--
-- Name: acorn_university_student_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type character varying(1024) NOT NULL,
    owner_entity_id uuid,
    name character varying(1024) GENERATED ALWAYS AS (type) STORED NOT NULL,
    description text,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_student_types OWNER TO university;

--
-- Name: TABLE acorn_university_student_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_types IS 'menu: false
labels:
  en: Type
  ku: Cura
  ar: رقم الاكتتاب
labels-plural:
  en: Types
  ku: Curan
  ar: رقم الاكتتاب
seeding:
  # acorn_university_student_types
  # id, type, owner_entity_id, name, description, created_by_user_id
  - [''8a925f9b-9ef1-400d-a6b4-b98f312d9c2c'', ''Irregular'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''Irregular'', NULL, ''a11d6172-6565-4195-a62e-038358aa9fa9'']
  - [''0e52c385-133a-44ec-9be8-928d2a2d62b9'', ''Regular'', ''f56c6e68-0546-4f18-b6e1-5180da9c8dc1'', ''Regular'', NULL, ''a11d6172-6565-4195-a62e-038358aa9fa9'']';


--
-- Name: COLUMN acorn_university_student_types.owner_entity_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_types.owner_entity_id IS 'can-filter: false
labels:
  en: Owner organisation
  ku: Xwede kod
labels-plural:
  en: Owning organisations
  ku: Xwede kodên
';


--
-- Name: acorn_calendar_upcreated_ats; Type: VIEW; Schema: public; Owner: createsystem
--

CREATE VIEW public.acorn_calendar_upcreated_ats AS
 SELECT 'Acorn\University\Models\Entity'::text AS model_type,
    acorn_university_entities.id AS model_id,
    'acorn_university_entities'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_university_entities.created_at AS datetime
   FROM public.acorn_university_entities
UNION ALL
 SELECT 'Acorn\University\Models\Entity'::text AS model_type,
    acorn_university_entities.id AS model_id,
    'acorn_university_entities'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_university_entities.updated_at AS datetime
   FROM public.acorn_university_entities
UNION ALL
 SELECT 'Acorn\University\Models\Hierarchy'::text AS model_type,
    acorn_university_hierarchies.id AS model_id,
    'acorn_university_hierarchies'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_university_hierarchies.created_at AS datetime
   FROM public.acorn_university_hierarchies
UNION ALL
 SELECT 'Acorn\University\Models\Hierarchy'::text AS model_type,
    acorn_university_hierarchies.id AS model_id,
    'acorn_university_hierarchies'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_university_hierarchies.updated_at AS datetime
   FROM public.acorn_university_hierarchies
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Enrollment'::text AS model_type,
    acorn_enrollment_enrollments.id AS model_id,
    'acorn_enrollment_enrollments'::text AS "table",
    acorn_enrollment_enrollments.name,
    0 AS update,
    acorn_enrollment_enrollments.created_at AS datetime
   FROM public.acorn_enrollment_enrollments
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Enrollment'::text AS model_type,
    acorn_enrollment_enrollments.id AS model_id,
    'acorn_enrollment_enrollments'::text AS "table",
    acorn_enrollment_enrollments.name,
    1 AS update,
    acorn_enrollment_enrollments.updated_at AS datetime
   FROM public.acorn_enrollment_enrollments
UNION ALL
 SELECT 'Acorn\Exam\Models\Score'::text AS model_type,
    acorn_exam_scores.id AS model_id,
    'acorn_exam_scores'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_exam_scores.created_at AS datetime
   FROM public.acorn_exam_scores
UNION ALL
 SELECT 'Acorn\Exam\Models\Score'::text AS model_type,
    acorn_exam_scores.id AS model_id,
    'acorn_exam_scores'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_exam_scores.updated_at AS datetime
   FROM public.acorn_exam_scores
UNION ALL
 SELECT 'Acorn\Exam\Models\Exam'::text AS model_type,
    acorn_exam_exams.id AS model_id,
    'acorn_exam_exams'::text AS "table",
    acorn_exam_exams.name,
    0 AS update,
    acorn_exam_exams.created_at AS datetime
   FROM public.acorn_exam_exams
UNION ALL
 SELECT 'Acorn\Exam\Models\Exam'::text AS model_type,
    acorn_exam_exams.id AS model_id,
    'acorn_exam_exams'::text AS "table",
    acorn_exam_exams.name,
    1 AS update,
    acorn_exam_exams.updated_at AS datetime
   FROM public.acorn_exam_exams
UNION ALL
 SELECT 'Acorn\Exam\Models\Centre'::text AS model_type,
    acorn_exam_centres.id AS model_id,
    'acorn_exam_centres'::text AS "table",
    acorn_exam_centres.name,
    0 AS update,
    acorn_exam_centres.created_at AS datetime
   FROM public.acorn_exam_centres
UNION ALL
 SELECT 'Acorn\Exam\Models\Centre'::text AS model_type,
    acorn_exam_centres.id AS model_id,
    'acorn_exam_centres'::text AS "table",
    acorn_exam_centres.name,
    1 AS update,
    acorn_exam_centres.updated_at AS datetime
   FROM public.acorn_exam_centres
UNION ALL
 SELECT 'Acorn\University\Models\CourseSpecialization'::text AS model_type,
    acorn_university_course_specializations.id AS model_id,
    'acorn_university_course_specializations'::text AS "table",
    acorn_university_course_specializations.name,
    0 AS update,
    acorn_university_course_specializations.created_at AS datetime
   FROM public.acorn_university_course_specializations
UNION ALL
 SELECT 'Acorn\University\Models\CourseSpecialization'::text AS model_type,
    acorn_university_course_specializations.id AS model_id,
    'acorn_university_course_specializations'::text AS "table",
    acorn_university_course_specializations.name,
    1 AS update,
    acorn_university_course_specializations.updated_at AS datetime
   FROM public.acorn_university_course_specializations
UNION ALL
 SELECT 'Acorn\University\Models\CourseMaterial'::text AS model_type,
    acorn_university_course_materials.id AS model_id,
    'acorn_university_course_materials'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_university_course_materials.created_at AS datetime
   FROM public.acorn_university_course_materials
UNION ALL
 SELECT 'Acorn\University\Models\CourseMaterial'::text AS model_type,
    acorn_university_course_materials.id AS model_id,
    'acorn_university_course_materials'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_university_course_materials.updated_at AS datetime
   FROM public.acorn_university_course_materials
UNION ALL
 SELECT 'Acorn\University\Models\Material'::text AS model_type,
    acorn_university_materials.id AS model_id,
    'acorn_university_materials'::text AS "table",
    acorn_university_materials.name,
    0 AS update,
    acorn_university_materials.created_at AS datetime
   FROM public.acorn_university_materials
UNION ALL
 SELECT 'Acorn\University\Models\Material'::text AS model_type,
    acorn_university_materials.id AS model_id,
    'acorn_university_materials'::text AS "table",
    acorn_university_materials.name,
    1 AS update,
    acorn_university_materials.updated_at AS datetime
   FROM public.acorn_university_materials
UNION ALL
 SELECT 'Acorn\University\Models\MaterialTopic'::text AS model_type,
    acorn_university_material_topics.id AS model_id,
    'acorn_university_material_topics'::text AS "table",
    acorn_university_material_topics.name,
    0 AS update,
    acorn_university_material_topics.created_at AS datetime
   FROM public.acorn_university_material_topics
UNION ALL
 SELECT 'Acorn\University\Models\MaterialTopic'::text AS model_type,
    acorn_university_material_topics.id AS model_id,
    'acorn_university_material_topics'::text AS "table",
    acorn_university_material_topics.name,
    1 AS update,
    acorn_university_material_topics.updated_at AS datetime
   FROM public.acorn_university_material_topics
UNION ALL
 SELECT 'Acorn\Exam\Models\Instance'::text AS model_type,
    acorn_exam_instances.id AS model_id,
    'acorn_exam_instances'::text AS "table",
    acorn_exam_instances.name,
    0 AS update,
    acorn_exam_instances.created_at AS datetime
   FROM public.acorn_exam_instances
UNION ALL
 SELECT 'Acorn\Exam\Models\Instance'::text AS model_type,
    acorn_exam_instances.id AS model_id,
    'acorn_exam_instances'::text AS "table",
    acorn_exam_instances.name,
    1 AS update,
    acorn_exam_instances.updated_at AS datetime
   FROM public.acorn_exam_instances
UNION ALL
 SELECT 'Acorn\Exam\Models\Interview'::text AS model_type,
    acorn_exam_interviews.id AS model_id,
    'acorn_exam_interviews'::text AS "table",
    (acorn_exam_interviews.name)::character varying(1024) AS name,
    0 AS update,
    acorn_exam_interviews.created_at AS datetime
   FROM public.acorn_exam_interviews
UNION ALL
 SELECT 'Acorn\Exam\Models\Interview'::text AS model_type,
    acorn_exam_interviews.id AS model_id,
    'acorn_exam_interviews'::text AS "table",
    (acorn_exam_interviews.name)::character varying(1024) AS name,
    1 AS update,
    acorn_exam_interviews.updated_at AS datetime
   FROM public.acorn_exam_interviews
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseMaterial'::text AS model_type,
    acorn_exam_calculation_course_materials.id AS model_id,
    'acorn_exam_calculation_course_materials'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_exam_calculation_course_materials.created_at AS datetime
   FROM public.acorn_exam_calculation_course_materials
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseMaterial'::text AS model_type,
    acorn_exam_calculation_course_materials.id AS model_id,
    'acorn_exam_calculation_course_materials'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_exam_calculation_course_materials.updated_at AS datetime
   FROM public.acorn_exam_calculation_course_materials
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationMaterialType'::text AS model_type,
    acorn_exam_calculation_material_types.id AS model_id,
    'acorn_exam_calculation_material_types'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_exam_calculation_material_types.created_at AS datetime
   FROM public.acorn_exam_calculation_material_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationMaterialType'::text AS model_type,
    acorn_exam_calculation_material_types.id AS model_id,
    'acorn_exam_calculation_material_types'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_exam_calculation_material_types.updated_at AS datetime
   FROM public.acorn_exam_calculation_material_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseType'::text AS model_type,
    acorn_exam_calculation_course_types.id AS model_id,
    'acorn_exam_calculation_course_types'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_exam_calculation_course_types.created_at AS datetime
   FROM public.acorn_exam_calculation_course_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseType'::text AS model_type,
    acorn_exam_calculation_course_types.id AS model_id,
    'acorn_exam_calculation_course_types'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_exam_calculation_course_types.updated_at AS datetime
   FROM public.acorn_exam_calculation_course_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourse'::text AS model_type,
    acorn_exam_calculation_courses.id AS model_id,
    'acorn_exam_calculation_courses'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_exam_calculation_courses.created_at AS datetime
   FROM public.acorn_exam_calculation_courses
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourse'::text AS model_type,
    acorn_exam_calculation_courses.id AS model_id,
    'acorn_exam_calculation_courses'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_exam_calculation_courses.updated_at AS datetime
   FROM public.acorn_exam_calculation_courses
UNION ALL
 SELECT 'Acorn\Enrollment\Models\CourseEntryRequirement'::text AS model_type,
    acorn_enrollment_course_entry_requirements.id AS model_id,
    'acorn_enrollment_course_entry_requirements'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_enrollment_course_entry_requirements.created_at AS datetime
   FROM public.acorn_enrollment_course_entry_requirements
UNION ALL
 SELECT 'Acorn\Enrollment\Models\CourseEntryRequirement'::text AS model_type,
    acorn_enrollment_course_entry_requirements.id AS model_id,
    'acorn_enrollment_course_entry_requirements'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_enrollment_course_entry_requirements.updated_at AS datetime
   FROM public.acorn_enrollment_course_entry_requirements
UNION ALL
 SELECT 'Acorn\University\Models\StudentStatus'::text AS model_type,
    acorn_university_student_statuses.id AS model_id,
    'acorn_university_student_statuses'::text AS "table",
    acorn_university_student_statuses.name,
    0 AS update,
    acorn_university_student_statuses.created_at AS datetime
   FROM public.acorn_university_student_statuses
UNION ALL
 SELECT 'Acorn\University\Models\StudentStatus'::text AS model_type,
    acorn_university_student_statuses.id AS model_id,
    'acorn_university_student_statuses'::text AS "table",
    acorn_university_student_statuses.name,
    1 AS update,
    acorn_university_student_statuses.updated_at AS datetime
   FROM public.acorn_university_student_statuses
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Desire'::text AS model_type,
    acorn_enrollment_desires.id AS model_id,
    'acorn_enrollment_desires'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_enrollment_desires.created_at AS datetime
   FROM public.acorn_enrollment_desires
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Desire'::text AS model_type,
    acorn_enrollment_desires.id AS model_id,
    'acorn_enrollment_desires'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_enrollment_desires.updated_at AS datetime
   FROM public.acorn_enrollment_desires
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYear'::text AS model_type,
    acorn_university_academic_years.id AS model_id,
    'acorn_university_academic_years'::text AS "table",
    acorn_university_academic_years.name,
    0 AS update,
    acorn_university_academic_years.created_at AS datetime
   FROM public.acorn_university_academic_years
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYear'::text AS model_type,
    acorn_university_academic_years.id AS model_id,
    'acorn_university_academic_years'::text AS "table",
    acorn_university_academic_years.name,
    1 AS update,
    acorn_university_academic_years.updated_at AS datetime
   FROM public.acorn_university_academic_years
UNION ALL
 SELECT 'Acorn\University\Models\CourseYear'::text AS model_type,
    acorn_university_course_years.id AS model_id,
    'acorn_university_course_years'::text AS "table",
    (acorn_university_course_years.name)::character varying(1024) AS name,
    0 AS update,
    acorn_university_course_years.created_at AS datetime
   FROM public.acorn_university_course_years
UNION ALL
 SELECT 'Acorn\University\Models\CourseYear'::text AS model_type,
    acorn_university_course_years.id AS model_id,
    'acorn_university_course_years'::text AS "table",
    (acorn_university_course_years.name)::character varying(1024) AS name,
    1 AS update,
    acorn_university_course_years.updated_at AS datetime
   FROM public.acorn_university_course_years
UNION ALL
 SELECT 'Acorn\University\Models\SemesterGroup'::text AS model_type,
    acorn_university_semester_groups.id AS model_id,
    'acorn_university_semester_groups'::text AS "table",
    acorn_university_semester_groups.name,
    0 AS update,
    acorn_university_semester_groups.created_at AS datetime
   FROM public.acorn_university_semester_groups
UNION ALL
 SELECT 'Acorn\University\Models\SemesterGroup'::text AS model_type,
    acorn_university_semester_groups.id AS model_id,
    'acorn_university_semester_groups'::text AS "table",
    acorn_university_semester_groups.name,
    1 AS update,
    acorn_university_semester_groups.updated_at AS datetime
   FROM public.acorn_university_semester_groups
UNION ALL
 SELECT 'Acorn\University\Models\Semester'::text AS model_type,
    acorn_university_semesters.id AS model_id,
    'acorn_university_semesters'::text AS "table",
    acorn_university_semesters.name,
    0 AS update,
    acorn_university_semesters.created_at AS datetime
   FROM public.acorn_university_semesters
UNION ALL
 SELECT 'Acorn\University\Models\Semester'::text AS model_type,
    acorn_university_semesters.id AS model_id,
    'acorn_university_semesters'::text AS "table",
    acorn_university_semesters.name,
    1 AS update,
    acorn_university_semesters.updated_at AS datetime
   FROM public.acorn_university_semesters
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYearSemester'::text AS model_type,
    acorn_university_academic_year_semesters.id AS model_id,
    'acorn_university_academic_year_semesters'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_university_academic_year_semesters.created_at AS datetime
   FROM public.acorn_university_academic_year_semesters
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYearSemester'::text AS model_type,
    acorn_university_academic_year_semesters.id AS model_id,
    'acorn_university_academic_year_semesters'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_university_academic_year_semesters.updated_at AS datetime
   FROM public.acorn_university_academic_year_semesters
UNION ALL
 SELECT 'Acorn\University\Models\DocumentType'::text AS model_type,
    acorn_university_document_types.id AS model_id,
    'acorn_university_document_types'::text AS "table",
    acorn_university_document_types.name,
    0 AS update,
    acorn_university_document_types.created_at AS datetime
   FROM public.acorn_university_document_types
UNION ALL
 SELECT 'Acorn\University\Models\DocumentType'::text AS model_type,
    acorn_university_document_types.id AS model_id,
    'acorn_university_document_types'::text AS "table",
    acorn_university_document_types.name,
    1 AS update,
    acorn_university_document_types.updated_at AS datetime
   FROM public.acorn_university_document_types
UNION ALL
 SELECT 'Acorn\University\Models\CourseType'::text AS model_type,
    acorn_university_course_types.id AS model_id,
    'acorn_university_course_types'::text AS "table",
    acorn_university_course_types.name,
    0 AS update,
    acorn_university_course_types.created_at AS datetime
   FROM public.acorn_university_course_types
UNION ALL
 SELECT 'Acorn\University\Models\CourseType'::text AS model_type,
    acorn_university_course_types.id AS model_id,
    'acorn_university_course_types'::text AS "table",
    acorn_university_course_types.name,
    1 AS update,
    acorn_university_course_types.updated_at AS datetime
   FROM public.acorn_university_course_types
UNION ALL
 SELECT 'Acorn\University\Models\MaterialType'::text AS model_type,
    acorn_university_material_types.id AS model_id,
    'acorn_university_material_types'::text AS "table",
    acorn_university_material_types.name,
    0 AS update,
    acorn_university_material_types.created_at AS datetime
   FROM public.acorn_university_material_types
UNION ALL
 SELECT 'Acorn\University\Models\MaterialType'::text AS model_type,
    acorn_university_material_types.id AS model_id,
    'acorn_university_material_types'::text AS "table",
    acorn_university_material_types.name,
    1 AS update,
    acorn_university_material_types.updated_at AS datetime
   FROM public.acorn_university_material_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Type'::text AS model_type,
    acorn_exam_types.id AS model_id,
    'acorn_exam_types'::text AS "table",
    acorn_exam_types.name,
    0 AS update,
    acorn_exam_types.created_at AS datetime
   FROM public.acorn_exam_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Type'::text AS model_type,
    acorn_exam_types.id AS model_id,
    'acorn_exam_types'::text AS "table",
    acorn_exam_types.name,
    1 AS update,
    acorn_exam_types.updated_at AS datetime
   FROM public.acorn_exam_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Calculation'::text AS model_type,
    acorn_exam_calculations.id AS model_id,
    'acorn_exam_calculations'::text AS "table",
    acorn_exam_calculations.name,
    0 AS update,
    acorn_exam_calculations.created_at AS datetime
   FROM public.acorn_exam_calculations
UNION ALL
 SELECT 'Acorn\Exam\Models\Calculation'::text AS model_type,
    acorn_exam_calculations.id AS model_id,
    'acorn_exam_calculations'::text AS "table",
    acorn_exam_calculations.name,
    1 AS update,
    acorn_exam_calculations.updated_at AS datetime
   FROM public.acorn_exam_calculations
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationType'::text AS model_type,
    acorn_exam_calculation_types.id AS model_id,
    'acorn_exam_calculation_types'::text AS "table",
    acorn_exam_calculation_types.name,
    0 AS update,
    acorn_exam_calculation_types.created_at AS datetime
   FROM public.acorn_exam_calculation_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationType'::text AS model_type,
    acorn_exam_calculation_types.id AS model_id,
    'acorn_exam_calculation_types'::text AS "table",
    acorn_exam_calculation_types.name,
    1 AS update,
    acorn_exam_calculation_types.updated_at AS datetime
   FROM public.acorn_exam_calculation_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentIdentity'::text AS model_type,
    acorn_university_student_identities.id AS model_id,
    'acorn_university_student_identities'::text AS "table",
    acorn_university_student_identities.name,
    0 AS update,
    acorn_university_student_identities.created_at AS datetime
   FROM public.acorn_university_student_identities
UNION ALL
 SELECT 'Acorn\University\Models\StudentIdentity'::text AS model_type,
    acorn_university_student_identities.id AS model_id,
    'acorn_university_student_identities'::text AS "table",
    acorn_university_student_identities.name,
    1 AS update,
    acorn_university_student_identities.updated_at AS datetime
   FROM public.acorn_university_student_identities
UNION ALL
 SELECT 'Acorn\University\Models\StudentDocument'::text AS model_type,
    acorn_university_student_documents.id AS model_id,
    'acorn_university_student_documents'::text AS "table",
    acorn_university_student_documents.name,
    0 AS update,
    acorn_university_student_documents.created_at AS datetime
   FROM public.acorn_university_student_documents
UNION ALL
 SELECT 'Acorn\University\Models\StudentDocument'::text AS model_type,
    acorn_university_student_documents.id AS model_id,
    'acorn_university_student_documents'::text AS "table",
    acorn_university_student_documents.name,
    1 AS update,
    acorn_university_student_documents.updated_at AS datetime
   FROM public.acorn_university_student_documents
UNION ALL
 SELECT 'Acorn\University\Models\ProjectStudent'::text AS model_type,
    acorn_university_project_students.id AS model_id,
    'acorn_university_project_students'::text AS "table",
    (acorn_university_project_students.name)::character varying(1024) AS name,
    0 AS update,
    acorn_university_project_students.created_at AS datetime
   FROM public.acorn_university_project_students
UNION ALL
 SELECT 'Acorn\University\Models\ProjectStudent'::text AS model_type,
    acorn_university_project_students.id AS model_id,
    'acorn_university_project_students'::text AS "table",
    (acorn_university_project_students.name)::character varying(1024) AS name,
    1 AS update,
    acorn_university_project_students.updated_at AS datetime
   FROM public.acorn_university_project_students
UNION ALL
 SELECT 'Acorn\University\Models\IdentityType'::text AS model_type,
    acorn_university_identity_types.id AS model_id,
    'acorn_university_identity_types'::text AS "table",
    acorn_university_identity_types.name,
    0 AS update,
    acorn_university_identity_types.created_at AS datetime
   FROM public.acorn_university_identity_types
UNION ALL
 SELECT 'Acorn\University\Models\IdentityType'::text AS model_type,
    acorn_university_identity_types.id AS model_id,
    'acorn_university_identity_types'::text AS "table",
    acorn_university_identity_types.name,
    1 AS update,
    acorn_university_identity_types.updated_at AS datetime
   FROM public.acorn_university_identity_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentNote'::text AS model_type,
    acorn_university_student_notes.id AS model_id,
    'acorn_university_student_notes'::text AS "table",
    acorn_university_student_notes.name,
    0 AS update,
    acorn_university_student_notes.created_at AS datetime
   FROM public.acorn_university_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentNote'::text AS model_type,
    acorn_university_student_notes.id AS model_id,
    'acorn_university_student_notes'::text AS "table",
    acorn_university_student_notes.name,
    1 AS update,
    acorn_university_student_notes.updated_at AS datetime
   FROM public.acorn_university_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentCode'::text AS model_type,
    acorn_university_student_codes.id AS model_id,
    'acorn_university_student_codes'::text AS "table",
    acorn_university_student_codes.name,
    0 AS update,
    acorn_university_student_codes.created_at AS datetime
   FROM public.acorn_university_student_codes
UNION ALL
 SELECT 'Acorn\University\Models\StudentCode'::text AS model_type,
    acorn_university_student_codes.id AS model_id,
    'acorn_university_student_codes'::text AS "table",
    acorn_university_student_codes.name,
    1 AS update,
    acorn_university_student_codes.updated_at AS datetime
   FROM public.acorn_university_student_codes
UNION ALL
 SELECT 'Acorn\Enrollment\Models\StudentNote'::text AS model_type,
    acorn_enrollment_student_notes.id AS model_id,
    'acorn_enrollment_student_notes'::text AS "table",
    (acorn_enrollment_student_notes.name)::character varying(1024) AS name,
    0 AS update,
    acorn_enrollment_student_notes.created_at AS datetime
   FROM public.acorn_enrollment_student_notes
UNION ALL
 SELECT 'Acorn\Enrollment\Models\StudentNote'::text AS model_type,
    acorn_enrollment_student_notes.id AS model_id,
    'acorn_enrollment_student_notes'::text AS "table",
    (acorn_enrollment_student_notes.name)::character varying(1024) AS name,
    1 AS update,
    acorn_enrollment_student_notes.updated_at AS datetime
   FROM public.acorn_enrollment_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentType'::text AS model_type,
    acorn_university_student_types.id AS model_id,
    'acorn_university_student_types'::text AS "table",
    acorn_university_student_types.name,
    0 AS update,
    acorn_university_student_types.created_at AS datetime
   FROM public.acorn_university_student_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentType'::text AS model_type,
    acorn_university_student_types.id AS model_id,
    'acorn_university_student_types'::text AS "table",
    acorn_university_student_types.name,
    1 AS update,
    acorn_university_student_types.updated_at AS datetime
   FROM public.acorn_university_student_types
UNION ALL
 SELECT 'Acorn\Exam\Models\InterviewStudent'::text AS model_type,
    acorn_exam_interview_students.id AS model_id,
    'acorn_exam_interview_students'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_exam_interview_students.created_at AS datetime
   FROM public.acorn_exam_interview_students
UNION ALL
 SELECT 'Acorn\Exam\Models\InterviewStudent'::text AS model_type,
    acorn_exam_interview_students.id AS model_id,
    'acorn_exam_interview_students'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_exam_interview_students.updated_at AS datetime
   FROM public.acorn_exam_interview_students
UNION ALL
 SELECT 'Acorn\University\Models\CoursePlan'::text AS model_type,
    acorn_university_course_plans.id AS model_id,
    'acorn_university_course_plans'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_university_course_plans.created_at AS datetime
   FROM public.acorn_university_course_plans
UNION ALL
 SELECT 'Acorn\University\Models\CoursePlan'::text AS model_type,
    acorn_university_course_plans.id AS model_id,
    'acorn_university_course_plans'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_university_course_plans.updated_at AS datetime
   FROM public.acorn_university_course_plans
UNION ALL
 SELECT 'Acorn\Exam\Models\ExamMaterial'::text AS model_type,
    acorn_exam_exam_materials.id AS model_id,
    'acorn_exam_exam_materials'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_exam_exam_materials.created_at AS datetime
   FROM public.acorn_exam_exam_materials
UNION ALL
 SELECT 'Acorn\Exam\Models\ExamMaterial'::text AS model_type,
    acorn_exam_exam_materials.id AS model_id,
    'acorn_exam_exam_materials'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_exam_exam_materials.updated_at AS datetime
   FROM public.acorn_exam_exam_materials
UNION ALL
 SELECT 'Acorn\University\Models\Project'::text AS model_type,
    acorn_university_projects.id AS model_id,
    'acorn_university_projects'::text AS "table",
    (acorn_university_projects.name)::character varying(1024) AS name,
    0 AS update,
    acorn_university_projects.created_at AS datetime
   FROM public.acorn_university_projects
UNION ALL
 SELECT 'Acorn\University\Models\Project'::text AS model_type,
    acorn_university_projects.id AS model_id,
    'acorn_university_projects'::text AS "table",
    (acorn_university_projects.name)::character varying(1024) AS name,
    1 AS update,
    acorn_university_projects.updated_at AS datetime
   FROM public.acorn_university_projects
UNION ALL
 SELECT 'Acorn\University\Models\Lecture'::text AS model_type,
    acorn_university_lectures.id AS model_id,
    'acorn_university_lectures'::text AS "table",
    NULL::text AS name,
    0 AS update,
    acorn_university_lectures.created_at AS datetime
   FROM public.acorn_university_lectures
UNION ALL
 SELECT 'Acorn\University\Models\Lecture'::text AS model_type,
    acorn_university_lectures.id AS model_id,
    'acorn_university_lectures'::text AS "table",
    NULL::text AS name,
    1 AS update,
    acorn_university_lectures.updated_at AS datetime
   FROM public.acorn_university_lectures
UNION ALL
 SELECT 'Acorn\Exam\Models\ScoreName'::text AS model_type,
    acorn_exam_score_names.id AS model_id,
    'acorn_exam_score_names'::text AS "table",
    acorn_exam_score_names.name,
    0 AS update,
    acorn_exam_score_names.created_at AS datetime
   FROM public.acorn_exam_score_names
UNION ALL
 SELECT 'Acorn\Exam\Models\ScoreName'::text AS model_type,
    acorn_exam_score_names.id AS model_id,
    'acorn_exam_score_names'::text AS "table",
    acorn_exam_score_names.name,
    1 AS update,
    acorn_exam_score_names.updated_at AS datetime
   FROM public.acorn_exam_score_names
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Run'::text AS model_type,
    acorn_enrollment_runs.id AS model_id,
    'acorn_enrollment_runs'::text AS "table",
    acorn_enrollment_runs.name,
    0 AS update,
    acorn_enrollment_runs.created_at AS datetime
   FROM public.acorn_enrollment_runs
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Run'::text AS model_type,
    acorn_enrollment_runs.id AS model_id,
    'acorn_enrollment_runs'::text AS "table",
    acorn_enrollment_runs.name,
    1 AS update,
    acorn_enrollment_runs.updated_at AS datetime
   FROM public.acorn_enrollment_runs
UNION ALL
 SELECT 'Acorn\Exam\Models\Question'::text AS model_type,
    acorn_exam_questions.id AS model_id,
    'acorn_exam_questions'::text AS "table",
    acorn_exam_questions.name,
    0 AS update,
    acorn_exam_questions.created_at AS datetime
   FROM public.acorn_exam_questions
UNION ALL
 SELECT 'Acorn\Exam\Models\Question'::text AS model_type,
    acorn_exam_questions.id AS model_id,
    'acorn_exam_questions'::text AS "table",
    acorn_exam_questions.name,
    1 AS update,
    acorn_exam_questions.updated_at AS datetime
   FROM public.acorn_exam_questions
UNION ALL
 SELECT 'Acorn\Exam\Models\Section'::text AS model_type,
    acorn_exam_sections.id AS model_id,
    'acorn_exam_sections'::text AS "table",
    acorn_exam_sections.name,
    0 AS update,
    acorn_exam_sections.created_at AS datetime
   FROM public.acorn_exam_sections
UNION ALL
 SELECT 'Acorn\Exam\Models\Section'::text AS model_type,
    acorn_exam_sections.id AS model_id,
    'acorn_exam_sections'::text AS "table",
    acorn_exam_sections.name,
    1 AS update,
    acorn_exam_sections.updated_at AS datetime
   FROM public.acorn_exam_sections
UNION ALL
 SELECT 'Acorn\Exam\Models\Answer'::text AS model_type,
    acorn_exam_answers.id AS model_id,
    'acorn_exam_answers'::text AS "table",
    acorn_exam_answers.name,
    0 AS update,
    acorn_exam_answers.created_at AS datetime
   FROM public.acorn_exam_answers
UNION ALL
 SELECT 'Acorn\Exam\Models\Answer'::text AS model_type,
    acorn_exam_answers.id AS model_id,
    'acorn_exam_answers'::text AS "table",
    acorn_exam_answers.name,
    1 AS update,
    acorn_exam_answers.updated_at AS datetime
   FROM public.acorn_exam_answers;


ALTER VIEW public.acorn_calendar_upcreated_ats OWNER TO createsystem;

--
-- Name: acorn_university_students_number; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.acorn_university_students_number
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.acorn_university_students_number OWNER TO university;

--
-- Name: acorn_university_students; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_students (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    import_source character varying(1024),
    legacy_import_result character varying(1024),
    legacy_import_avg double precision,
    legacy_import_total_mark double precision,
    legacy_import_the_total double precision,
    legacy_import_final_avg double precision,
    legacy_import_passed_primaries boolean,
    legacy_import_passed_secondaries boolean,
    legacy_import_attendance integer,
    number integer DEFAULT nextval('public.acorn_university_students_number'::regclass) NOT NULL,
    legacy_import_school character varying(1024),
    legacy_import_qeyd character varying(1024),
    legacy_import_student_type character varying(1024),
    legacy_import_id integer,
    legacy_import_birth_place character varying(20248),
    printed json,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid
);


ALTER TABLE public.acorn_university_students OWNER TO university;

--
-- Name: TABLE acorn_university_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_students IS 'batch-print: true
order: 500
menu-splitter: true
hints:
  introduction:
    labels:
      en: Introduction
    contentHtml: true
    content:
      en: Welcome to Student registration! You can update students after you create them. Fields marked with a <span class="required"></span> are required. All other fields are optional.
    level: info
  school:
    labels:
      en: School mode
    content:
      en: You are registered as working at a school, so your interface is designed for this.
    level: info
    conditions: |
      select count(*) from acorn_dbauth_user u
        inner join acorn_university_entities en on en.id = u.global_scope_entity_id
        where en.leaf_table = ''acorn_university_schools''
  not-activated:
    path: plugins/acorn/user/controllers/users/hint_activate
    conditions: not (select is_activated from acorn_user_users where id = acorn_university_students.user_id)
    context: update
  guest:
    path: plugins/acorn/user/controllers/users/hint_guest
    conditions: exists(select * from acorn_user_users where id = acorn_university_students.user_id and is_guest)
    context: update
  banned:
    path: plugins/acorn/user/controllers/users/hint_banned
    conditions: exists(select * from acorn_user_throttle where user_id = acorn_university_students.user_id and is_banned)
    context: update
  trashed:
    path: plugins/acorn/user/controllers/users/hint_trashed
    conditions: exists(select * from acorn_user_users where id = acorn_university_students.user_id and not deleted_at is null)
    context: update
action-links:
  front-end:
    labels:
      en: Front-End
    url: /student/login/id/:id?no-redirect
    icon: crosshairs
    target: _blank
  certificates:
    labels:
      en: Certificates
    url: /backend/acorn/exam/certificates?search=:id
    icon: clipboard
    target: _blank
    permissions: acorn.exam.certificate_view_menu
labels:
  en: Student
  ku: Xwendekar
  ar: الطالب
labels-plural:
  en: Students
  ku: Xwendekarên
  ar: الطالب
filters:
  religion:
    label: acorn.user::lang.models.religion.label_plural
    type: group
    modelClass: Acorn\User\Models\Religion
    conditions: exists(select * from acorn_user_users u where u.religion_id in(:filtered) and u.id = acorn_university_students.user_id)
  ethnicity:
    label: acorn.user::lang.models.ethnicity.label_plural
    type: group
    modelClass: Acorn\User\Models\Ethnicity
    conditions: exists(select * from acorn_user_users u where u.ethnicity_id in(:filtered) and u.id = acorn_university_students.user_id)
  courses:
    label: acorn.university::lang.models.course.label_plural
    conditions: ''exists(select * from acorn_user_user_group_version ugv inner join acorn_university_hierarchies hi on hi.user_group_version_id = ugv.user_group_version_id where hi.entity_id in(:filtered) and ugv.user_id = acorn_university_students.user_id)''
    modelClass: Acorn\University\Models\Entity
    searchNameSelect: select ugs.name from acorn_user_user_groups ugs where ugs.id = acorn_university_entities.user_group_id
';


--
-- Name: COLUMN acorn_university_students.import_source; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.import_source IS 'tab: Legacy
readOnly: true
disabled: true
tabLocation: 2
advanced: true
invisible: true';


--
-- Name: COLUMN acorn_university_students.legacy_import_result; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_result IS 'tab: Legacy
readOnly: true
tabLocation: 2
advanced: true
invisible: true
comment: Binket, serket, Serket, Serkeftî
labels:
  en: Legacy Import Result
  ku: Importkirina Mîrasî encam
  ar: نتيجة استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Results
  ku: Importkirina Mîrasî encamên
  ar: نتيجة استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.legacy_import_avg; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_avg IS 'tab: Legacy
tabLocation: 2
advanced: true
readOnly: true
invisible: true
comment: Final University enrollment score
labels:
  en: Legacy Import Average
  ku: Importkirina Mîrasî ort
  ar: معدل استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Averages
  ku: Importkirina Mîrasî ortên
  ar: معدل استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.legacy_import_total_mark; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_total_mark IS 'tab: Legacy
tabLocation: 2
advanced: true
invisible: true
readOnly: true
comment: Final University enrollment score
labels:
  en: Legacy Import Total mark
  ku: Importkirina Mîrasî Nîşeya giştî
  ar: النتيجة النهائية استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Total marks
  ku: Importkirina Nîşeya giştîyên
  ar: النتيجة النهائية استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.legacy_import_the_total; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_the_total IS 'tab: Legacy
tabLocation: 2
advanced: true
invisible: true
readOnly: true
comment: Final University enrollment score';


--
-- Name: COLUMN acorn_university_students.legacy_import_final_avg; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_final_avg IS 'tab: Legacy
tabLocation: 2
advanced: true
invisible: true
readOnly: true
comment: Final University enrollment score with Year 10 & 11
labels:
  en: Legacy Import Final average
  ku: Importkirina Mîrasî ortê dawî
  ar: المعدل النهائي استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Family places
  ku: Importkirina Mîrasî ortê dawîyên
  ar: المعدل النهائي استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.legacy_import_passed_primaries; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_passed_primaries IS 'tab: Legacy
tabLocation: 2
advanced: true
readOnly: true
invisible: true
comment: Primary subjects passed
labels:
  en: Legacy Import Passed primaries
  ku: Importkirina Mîrasî Seretayî derbas bû
  ar: المواد الاساسية الناجحة استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Passed primaries
  ku: Importkirina Mîrasî Seretayî derbas bû
  ar: المواد الاساسية الناجحة استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.legacy_import_passed_secondaries; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_passed_secondaries IS 'tab: Legacy
tabLocation: 2
advanced: true
readOnly: true
invisible: true
comment: Secondary subjects passed minimum
labels:
  en: Legacy Import Passed secondaries
  ku: Importkirina Mîrasî Derbasbûyî ya duyemîn
  ar: المواد الفرعية الناجحة استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Passed secondaries
  ku: Importkirina Mîrasî Derbasbûyî ya duyemîn
  ar: المواد الفرعية الناجحة استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.legacy_import_attendance; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_attendance IS 'tab: Legacy
tabLocation: 2
advanced: true
readOnly: true
invisible: true
comment: Number of materials required (non-blank score)
labels:
  en: Legacy Import Attendance
  ku: Importkirina Mîrasî Amadetî
  ar: خضور المواد استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Attendances
  ku: Importkirina Mîrasî Amadetîyên
  ar: خضور المواد استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.number; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.number IS 'read-only: true
comment: Unique student system number
span: right
disabled: true
invisible: true
tab: acorn.university::lang.models.student.university_student_codes__student
labels:
  en: Unique System number
  ku: Hejmara pergalî
  ar: الرقم الفريد للنظام
labels-plural:
  en: Unique System numbers
  ku: Hejmaran pergalî
  ar: الرقم الفريد للنظام
field-comment: This is a unique NABU system number for this student. It is used internally for calculations and identity
advanced: true';


--
-- Name: COLUMN acorn_university_students.legacy_import_school; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_school IS 'tab: Legacy
tabLocation: 2
advanced: true
readOnly: true
comment: Actual school, to be processed later
labels:
  en: Legacy Import School
  ku: Importkirina Mîrasî dibistan
  ar: المدرسة
labels-plural:
  en: Legacy Import Schools
  ku: Importkirina Mîrasî dibistanên
  ar: المدرسة';


--
-- Name: COLUMN acorn_university_students.legacy_import_qeyd; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_qeyd IS 'tab: Legacy
tabLocation: 2
advanced: true
readOnly: true
comment: School enrollment place. To be processed later on
labels:
  en: Legacy Import Family place
  ku: Cihê Malbatê yê Importkirina Mîrasî
  ar: القيد
labels-plural:
  en: Legacy Import Family places
  ku: Cihê Malbatên yê Importkirina Mîrasî
  ar: القيد';


--
-- Name: COLUMN acorn_university_students.legacy_import_student_type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_student_type IS 'tab: Legacy
tabLocation: 2
advanced: true
readOnly: true
comment: Regular or Irregular, concerning Year 10 and 11
filters:
  student_type:
    label: acorn.university::lang.models.student.legacy_import_student_type
    type: group
    options:
      regular: acorn.exam::lang.models.certificate.regular
      irregular: acorn.exam::lang.models.certificate.irregular
    conditions: legacy_import_student_type in(:filtered)
labels:
  en: Legacy Import Student type
  ku: Importkirina Mîrasî Cureyê Xwendekar
  ar: نظام التقديم
labels-plural:
  en: Legacy Import Student types
  ku: Importkirina Mîrasî Cureyê Xwendekarên
  ar: نظام التقديم';


--
-- Name: COLUMN acorn_university_students.legacy_import_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_id IS 'columnClass: normal # Not _id FK field
tab: Legacy
tabLocation: 2
invisible: true
advanced: true
readOnly: true
comment: Legacy import ID
labels:
  en: Legacy Import ID
  ku: ID Importê ya Mîrasî
  ar: الرقم الوطني استيراد الإصدار القديم
labels-plural:
  en: Legacy Import IDs
  ku: IDên Importê ya Mîrasî
  ar: الرقم الوطني استيراد الإصدار القديم
';


--
-- Name: COLUMN acorn_university_students.legacy_import_birth_place; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.legacy_import_birth_place IS 'tab: Legacy
tabLocation: 2
advanced: true
invisible: true
comment: Birth place because location cleaning is difficult
labels:
  en: Legacy Import Birth place
  ku: Importkirina Mîrasî Cihê jidayikbûnê
  ar: تاريخ الميلاد استيراد الإصدار القديم
labels-plural:
  en: Legacy Import Birth places
  ku: Importkirina Mîrasî Cihên jidayikbûnê
  ar: تاريخ الميلاد استيراد الإصدار القديم';


--
-- Name: COLUMN acorn_university_students.printed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.printed IS '# Superceeded by documents table
field-exclude: true
column-exclude: true
labels:
  en: Printed
  ku: Çap
  ar: تم الطباعة
labels-plural:
  en: Printed
  ku: Çap
  ar: تم الطباعة
column-type: text
field-type: datatable
adding: false
invisible: true
deleting: false
css-classes:
  - single-tab
  - nolabel
columns:
  0:
    type: string
    title: acorn.university::lang.models.general.name
tab: INHERIT
tab-location: 2

filters:
  printed:
    label: acorn.university::lang.models.student.documents_printed
    type: checkbox
    conditions: not printed is null
  not_printed:
    label: acorn.university::lang.models.student.documents_not_printed
    type: checkbox
    conditions: printed is null
extra-translations:
  documents_printed:
    en: Documents printed
    ku: Belgeyên çapkirî
    ar: المستندات المطبوعة
  documents_not_printed:
    en: Documents not printed
    ku: Belgeyên ne çapkirî
    ar: المستندات غير المطبوعة
';


--
-- Name: COLUMN acorn_university_students.created_by_user_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.created_by_user_id IS 'advanced: true
invisible: true
read-only: true
field-type: text
hidden: false';


--
-- Name: COLUMN acorn_university_students.updated_by_user_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_students.updated_by_user_id IS 'advanced: true
invisible: true
read-only: true
field-type: text
hidden: false';


--
-- Name: acorn_created_bys; Type: VIEW; Schema: public; Owner: createsystem
--

CREATE VIEW public.acorn_created_bys AS
 SELECT 'Acorn\University\Models\Entity'::text AS model_type,
    acorn_university_entities.id AS model_id,
    'acorn_university_entities'::text AS "table",
    0 AS update,
    acorn_university_entities.created_by_user_id AS by
   FROM public.acorn_university_entities
UNION ALL
 SELECT 'Acorn\University\Models\Entity'::text AS model_type,
    acorn_university_entities.id AS model_id,
    'acorn_university_entities'::text AS "table",
    1 AS update,
    acorn_university_entities.updated_by_user_id AS by
   FROM public.acorn_university_entities
UNION ALL
 SELECT 'Acorn\University\Models\Hierarchy'::text AS model_type,
    acorn_university_hierarchies.id AS model_id,
    'acorn_university_hierarchies'::text AS "table",
    0 AS update,
    acorn_university_hierarchies.created_by_user_id AS by
   FROM public.acorn_university_hierarchies
UNION ALL
 SELECT 'Acorn\University\Models\Hierarchy'::text AS model_type,
    acorn_university_hierarchies.id AS model_id,
    'acorn_university_hierarchies'::text AS "table",
    1 AS update,
    acorn_university_hierarchies.updated_by_user_id AS by
   FROM public.acorn_university_hierarchies
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Enrollment'::text AS model_type,
    acorn_enrollment_enrollments.id AS model_id,
    'acorn_enrollment_enrollments'::text AS "table",
    0 AS update,
    acorn_enrollment_enrollments.created_by_user_id AS by
   FROM public.acorn_enrollment_enrollments
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Enrollment'::text AS model_type,
    acorn_enrollment_enrollments.id AS model_id,
    'acorn_enrollment_enrollments'::text AS "table",
    1 AS update,
    acorn_enrollment_enrollments.updated_by_user_id AS by
   FROM public.acorn_enrollment_enrollments
UNION ALL
 SELECT 'Acorn\Exam\Models\Score'::text AS model_type,
    acorn_exam_scores.id AS model_id,
    'acorn_exam_scores'::text AS "table",
    0 AS update,
    acorn_exam_scores.created_by_user_id AS by
   FROM public.acorn_exam_scores
UNION ALL
 SELECT 'Acorn\Exam\Models\Score'::text AS model_type,
    acorn_exam_scores.id AS model_id,
    'acorn_exam_scores'::text AS "table",
    1 AS update,
    acorn_exam_scores.updated_by_user_id AS by
   FROM public.acorn_exam_scores
UNION ALL
 SELECT 'Acorn\Exam\Models\Exam'::text AS model_type,
    acorn_exam_exams.id AS model_id,
    'acorn_exam_exams'::text AS "table",
    0 AS update,
    acorn_exam_exams.created_by_user_id AS by
   FROM public.acorn_exam_exams
UNION ALL
 SELECT 'Acorn\Exam\Models\Exam'::text AS model_type,
    acorn_exam_exams.id AS model_id,
    'acorn_exam_exams'::text AS "table",
    1 AS update,
    acorn_exam_exams.updated_by_user_id AS by
   FROM public.acorn_exam_exams
UNION ALL
 SELECT 'Acorn\Exam\Models\Centre'::text AS model_type,
    acorn_exam_centres.id AS model_id,
    'acorn_exam_centres'::text AS "table",
    0 AS update,
    acorn_exam_centres.created_by_user_id AS by
   FROM public.acorn_exam_centres
UNION ALL
 SELECT 'Acorn\Exam\Models\Centre'::text AS model_type,
    acorn_exam_centres.id AS model_id,
    'acorn_exam_centres'::text AS "table",
    1 AS update,
    acorn_exam_centres.updated_by_user_id AS by
   FROM public.acorn_exam_centres
UNION ALL
 SELECT 'Acorn\University\Models\CourseSpecialization'::text AS model_type,
    acorn_university_course_specializations.id AS model_id,
    'acorn_university_course_specializations'::text AS "table",
    0 AS update,
    acorn_university_course_specializations.created_by_user_id AS by
   FROM public.acorn_university_course_specializations
UNION ALL
 SELECT 'Acorn\University\Models\CourseSpecialization'::text AS model_type,
    acorn_university_course_specializations.id AS model_id,
    'acorn_university_course_specializations'::text AS "table",
    1 AS update,
    acorn_university_course_specializations.updated_by_user_id AS by
   FROM public.acorn_university_course_specializations
UNION ALL
 SELECT 'Acorn\University\Models\CourseMaterial'::text AS model_type,
    acorn_university_course_materials.id AS model_id,
    'acorn_university_course_materials'::text AS "table",
    0 AS update,
    acorn_university_course_materials.created_by_user_id AS by
   FROM public.acorn_university_course_materials
UNION ALL
 SELECT 'Acorn\University\Models\CourseMaterial'::text AS model_type,
    acorn_university_course_materials.id AS model_id,
    'acorn_university_course_materials'::text AS "table",
    1 AS update,
    acorn_university_course_materials.updated_by_user_id AS by
   FROM public.acorn_university_course_materials
UNION ALL
 SELECT 'Acorn\University\Models\Material'::text AS model_type,
    acorn_university_materials.id AS model_id,
    'acorn_university_materials'::text AS "table",
    0 AS update,
    acorn_university_materials.created_by_user_id AS by
   FROM public.acorn_university_materials
UNION ALL
 SELECT 'Acorn\University\Models\Material'::text AS model_type,
    acorn_university_materials.id AS model_id,
    'acorn_university_materials'::text AS "table",
    1 AS update,
    acorn_university_materials.updated_by_user_id AS by
   FROM public.acorn_university_materials
UNION ALL
 SELECT 'Acorn\University\Models\MaterialTopic'::text AS model_type,
    acorn_university_material_topics.id AS model_id,
    'acorn_university_material_topics'::text AS "table",
    0 AS update,
    acorn_university_material_topics.created_by_user_id AS by
   FROM public.acorn_university_material_topics
UNION ALL
 SELECT 'Acorn\University\Models\MaterialTopic'::text AS model_type,
    acorn_university_material_topics.id AS model_id,
    'acorn_university_material_topics'::text AS "table",
    1 AS update,
    acorn_university_material_topics.updated_by_user_id AS by
   FROM public.acorn_university_material_topics
UNION ALL
 SELECT 'Acorn\Exam\Models\Instance'::text AS model_type,
    acorn_exam_instances.id AS model_id,
    'acorn_exam_instances'::text AS "table",
    0 AS update,
    acorn_exam_instances.created_by_user_id AS by
   FROM public.acorn_exam_instances
UNION ALL
 SELECT 'Acorn\Exam\Models\Instance'::text AS model_type,
    acorn_exam_instances.id AS model_id,
    'acorn_exam_instances'::text AS "table",
    1 AS update,
    acorn_exam_instances.updated_by_user_id AS by
   FROM public.acorn_exam_instances
UNION ALL
 SELECT 'Acorn\Exam\Models\Interview'::text AS model_type,
    acorn_exam_interviews.id AS model_id,
    'acorn_exam_interviews'::text AS "table",
    0 AS update,
    acorn_exam_interviews.created_by_user_id AS by
   FROM public.acorn_exam_interviews
UNION ALL
 SELECT 'Acorn\Exam\Models\Interview'::text AS model_type,
    acorn_exam_interviews.id AS model_id,
    'acorn_exam_interviews'::text AS "table",
    1 AS update,
    acorn_exam_interviews.updated_by_user_id AS by
   FROM public.acorn_exam_interviews
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseMaterial'::text AS model_type,
    acorn_exam_calculation_course_materials.id AS model_id,
    'acorn_exam_calculation_course_materials'::text AS "table",
    0 AS update,
    acorn_exam_calculation_course_materials.created_by_user_id AS by
   FROM public.acorn_exam_calculation_course_materials
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseMaterial'::text AS model_type,
    acorn_exam_calculation_course_materials.id AS model_id,
    'acorn_exam_calculation_course_materials'::text AS "table",
    1 AS update,
    acorn_exam_calculation_course_materials.updated_by_user_id AS by
   FROM public.acorn_exam_calculation_course_materials
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationMaterialType'::text AS model_type,
    acorn_exam_calculation_material_types.id AS model_id,
    'acorn_exam_calculation_material_types'::text AS "table",
    0 AS update,
    acorn_exam_calculation_material_types.created_by_user_id AS by
   FROM public.acorn_exam_calculation_material_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationMaterialType'::text AS model_type,
    acorn_exam_calculation_material_types.id AS model_id,
    'acorn_exam_calculation_material_types'::text AS "table",
    1 AS update,
    acorn_exam_calculation_material_types.updated_by_user_id AS by
   FROM public.acorn_exam_calculation_material_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseType'::text AS model_type,
    acorn_exam_calculation_course_types.id AS model_id,
    'acorn_exam_calculation_course_types'::text AS "table",
    0 AS update,
    acorn_exam_calculation_course_types.created_by_user_id AS by
   FROM public.acorn_exam_calculation_course_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourseType'::text AS model_type,
    acorn_exam_calculation_course_types.id AS model_id,
    'acorn_exam_calculation_course_types'::text AS "table",
    1 AS update,
    acorn_exam_calculation_course_types.updated_by_user_id AS by
   FROM public.acorn_exam_calculation_course_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourse'::text AS model_type,
    acorn_exam_calculation_courses.id AS model_id,
    'acorn_exam_calculation_courses'::text AS "table",
    0 AS update,
    acorn_exam_calculation_courses.created_by_user_id AS by
   FROM public.acorn_exam_calculation_courses
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationCourse'::text AS model_type,
    acorn_exam_calculation_courses.id AS model_id,
    'acorn_exam_calculation_courses'::text AS "table",
    1 AS update,
    acorn_exam_calculation_courses.updated_by_user_id AS by
   FROM public.acorn_exam_calculation_courses
UNION ALL
 SELECT 'Acorn\Enrollment\Models\CourseEntryRequirement'::text AS model_type,
    acorn_enrollment_course_entry_requirements.id AS model_id,
    'acorn_enrollment_course_entry_requirements'::text AS "table",
    0 AS update,
    acorn_enrollment_course_entry_requirements.created_by_user_id AS by
   FROM public.acorn_enrollment_course_entry_requirements
UNION ALL
 SELECT 'Acorn\Enrollment\Models\CourseEntryRequirement'::text AS model_type,
    acorn_enrollment_course_entry_requirements.id AS model_id,
    'acorn_enrollment_course_entry_requirements'::text AS "table",
    1 AS update,
    acorn_enrollment_course_entry_requirements.updated_by_user_id AS by
   FROM public.acorn_enrollment_course_entry_requirements
UNION ALL
 SELECT 'Acorn\University\Models\Student'::text AS model_type,
    acorn_university_students.id AS model_id,
    'acorn_university_students'::text AS "table",
    0 AS update,
    acorn_university_students.created_by_user_id AS by
   FROM public.acorn_university_students
UNION ALL
 SELECT 'Acorn\University\Models\Student'::text AS model_type,
    acorn_university_students.id AS model_id,
    'acorn_university_students'::text AS "table",
    1 AS update,
    acorn_university_students.updated_by_user_id AS by
   FROM public.acorn_university_students
UNION ALL
 SELECT 'Acorn\University\Models\StudentStatus'::text AS model_type,
    acorn_university_student_statuses.id AS model_id,
    'acorn_university_student_statuses'::text AS "table",
    0 AS update,
    acorn_university_student_statuses.created_by_user_id AS by
   FROM public.acorn_university_student_statuses
UNION ALL
 SELECT 'Acorn\University\Models\StudentStatus'::text AS model_type,
    acorn_university_student_statuses.id AS model_id,
    'acorn_university_student_statuses'::text AS "table",
    1 AS update,
    acorn_university_student_statuses.updated_by_user_id AS by
   FROM public.acorn_university_student_statuses
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Desire'::text AS model_type,
    acorn_enrollment_desires.id AS model_id,
    'acorn_enrollment_desires'::text AS "table",
    0 AS update,
    acorn_enrollment_desires.created_by_user_id AS by
   FROM public.acorn_enrollment_desires
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Desire'::text AS model_type,
    acorn_enrollment_desires.id AS model_id,
    'acorn_enrollment_desires'::text AS "table",
    1 AS update,
    acorn_enrollment_desires.updated_by_user_id AS by
   FROM public.acorn_enrollment_desires
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYear'::text AS model_type,
    acorn_university_academic_years.id AS model_id,
    'acorn_university_academic_years'::text AS "table",
    0 AS update,
    acorn_university_academic_years.created_by_user_id AS by
   FROM public.acorn_university_academic_years
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYear'::text AS model_type,
    acorn_university_academic_years.id AS model_id,
    'acorn_university_academic_years'::text AS "table",
    1 AS update,
    acorn_university_academic_years.updated_by_user_id AS by
   FROM public.acorn_university_academic_years
UNION ALL
 SELECT 'Acorn\University\Models\CourseYear'::text AS model_type,
    acorn_university_course_years.id AS model_id,
    'acorn_university_course_years'::text AS "table",
    0 AS update,
    acorn_university_course_years.created_by_user_id AS by
   FROM public.acorn_university_course_years
UNION ALL
 SELECT 'Acorn\University\Models\CourseYear'::text AS model_type,
    acorn_university_course_years.id AS model_id,
    'acorn_university_course_years'::text AS "table",
    1 AS update,
    acorn_university_course_years.updated_by_user_id AS by
   FROM public.acorn_university_course_years
UNION ALL
 SELECT 'Acorn\University\Models\SemesterGroup'::text AS model_type,
    acorn_university_semester_groups.id AS model_id,
    'acorn_university_semester_groups'::text AS "table",
    0 AS update,
    acorn_university_semester_groups.created_by_user_id AS by
   FROM public.acorn_university_semester_groups
UNION ALL
 SELECT 'Acorn\University\Models\SemesterGroup'::text AS model_type,
    acorn_university_semester_groups.id AS model_id,
    'acorn_university_semester_groups'::text AS "table",
    1 AS update,
    acorn_university_semester_groups.updated_by_user_id AS by
   FROM public.acorn_university_semester_groups
UNION ALL
 SELECT 'Acorn\University\Models\Semester'::text AS model_type,
    acorn_university_semesters.id AS model_id,
    'acorn_university_semesters'::text AS "table",
    0 AS update,
    acorn_university_semesters.created_by_user_id AS by
   FROM public.acorn_university_semesters
UNION ALL
 SELECT 'Acorn\University\Models\Semester'::text AS model_type,
    acorn_university_semesters.id AS model_id,
    'acorn_university_semesters'::text AS "table",
    1 AS update,
    acorn_university_semesters.updated_by_user_id AS by
   FROM public.acorn_university_semesters
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYearSemester'::text AS model_type,
    acorn_university_academic_year_semesters.id AS model_id,
    'acorn_university_academic_year_semesters'::text AS "table",
    0 AS update,
    acorn_university_academic_year_semesters.created_by_user_id AS by
   FROM public.acorn_university_academic_year_semesters
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYearSemester'::text AS model_type,
    acorn_university_academic_year_semesters.id AS model_id,
    'acorn_university_academic_year_semesters'::text AS "table",
    1 AS update,
    acorn_university_academic_year_semesters.updated_by_user_id AS by
   FROM public.acorn_university_academic_year_semesters
UNION ALL
 SELECT 'Acorn\University\Models\DocumentType'::text AS model_type,
    acorn_university_document_types.id AS model_id,
    'acorn_university_document_types'::text AS "table",
    0 AS update,
    acorn_university_document_types.created_by_user_id AS by
   FROM public.acorn_university_document_types
UNION ALL
 SELECT 'Acorn\University\Models\DocumentType'::text AS model_type,
    acorn_university_document_types.id AS model_id,
    'acorn_university_document_types'::text AS "table",
    1 AS update,
    acorn_university_document_types.updated_by_user_id AS by
   FROM public.acorn_university_document_types
UNION ALL
 SELECT 'Acorn\University\Models\CourseType'::text AS model_type,
    acorn_university_course_types.id AS model_id,
    'acorn_university_course_types'::text AS "table",
    0 AS update,
    acorn_university_course_types.created_by_user_id AS by
   FROM public.acorn_university_course_types
UNION ALL
 SELECT 'Acorn\University\Models\CourseType'::text AS model_type,
    acorn_university_course_types.id AS model_id,
    'acorn_university_course_types'::text AS "table",
    1 AS update,
    acorn_university_course_types.updated_by_user_id AS by
   FROM public.acorn_university_course_types
UNION ALL
 SELECT 'Acorn\University\Models\MaterialType'::text AS model_type,
    acorn_university_material_types.id AS model_id,
    'acorn_university_material_types'::text AS "table",
    0 AS update,
    acorn_university_material_types.created_by_user_id AS by
   FROM public.acorn_university_material_types
UNION ALL
 SELECT 'Acorn\University\Models\MaterialType'::text AS model_type,
    acorn_university_material_types.id AS model_id,
    'acorn_university_material_types'::text AS "table",
    1 AS update,
    acorn_university_material_types.updated_by_user_id AS by
   FROM public.acorn_university_material_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Type'::text AS model_type,
    acorn_exam_types.id AS model_id,
    'acorn_exam_types'::text AS "table",
    0 AS update,
    acorn_exam_types.created_by_user_id AS by
   FROM public.acorn_exam_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Type'::text AS model_type,
    acorn_exam_types.id AS model_id,
    'acorn_exam_types'::text AS "table",
    1 AS update,
    acorn_exam_types.updated_by_user_id AS by
   FROM public.acorn_exam_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Calculation'::text AS model_type,
    acorn_exam_calculations.id AS model_id,
    'acorn_exam_calculations'::text AS "table",
    0 AS update,
    acorn_exam_calculations.created_by_user_id AS by
   FROM public.acorn_exam_calculations
UNION ALL
 SELECT 'Acorn\Exam\Models\Calculation'::text AS model_type,
    acorn_exam_calculations.id AS model_id,
    'acorn_exam_calculations'::text AS "table",
    1 AS update,
    acorn_exam_calculations.updated_by_user_id AS by
   FROM public.acorn_exam_calculations
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationType'::text AS model_type,
    acorn_exam_calculation_types.id AS model_id,
    'acorn_exam_calculation_types'::text AS "table",
    0 AS update,
    acorn_exam_calculation_types.created_by_user_id AS by
   FROM public.acorn_exam_calculation_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationType'::text AS model_type,
    acorn_exam_calculation_types.id AS model_id,
    'acorn_exam_calculation_types'::text AS "table",
    1 AS update,
    acorn_exam_calculation_types.updated_by_user_id AS by
   FROM public.acorn_exam_calculation_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentIdentity'::text AS model_type,
    acorn_university_student_identities.id AS model_id,
    'acorn_university_student_identities'::text AS "table",
    0 AS update,
    acorn_university_student_identities.created_by_user_id AS by
   FROM public.acorn_university_student_identities
UNION ALL
 SELECT 'Acorn\University\Models\StudentIdentity'::text AS model_type,
    acorn_university_student_identities.id AS model_id,
    'acorn_university_student_identities'::text AS "table",
    1 AS update,
    acorn_university_student_identities.updated_by_user_id AS by
   FROM public.acorn_university_student_identities
UNION ALL
 SELECT 'Acorn\University\Models\StudentDocument'::text AS model_type,
    acorn_university_student_documents.id AS model_id,
    'acorn_university_student_documents'::text AS "table",
    0 AS update,
    acorn_university_student_documents.created_by_user_id AS by
   FROM public.acorn_university_student_documents
UNION ALL
 SELECT 'Acorn\University\Models\StudentDocument'::text AS model_type,
    acorn_university_student_documents.id AS model_id,
    'acorn_university_student_documents'::text AS "table",
    1 AS update,
    acorn_university_student_documents.updated_by_user_id AS by
   FROM public.acorn_university_student_documents
UNION ALL
 SELECT 'Acorn\University\Models\ProjectStudent'::text AS model_type,
    acorn_university_project_students.id AS model_id,
    'acorn_university_project_students'::text AS "table",
    0 AS update,
    acorn_university_project_students.created_by_user_id AS by
   FROM public.acorn_university_project_students
UNION ALL
 SELECT 'Acorn\University\Models\ProjectStudent'::text AS model_type,
    acorn_university_project_students.id AS model_id,
    'acorn_university_project_students'::text AS "table",
    1 AS update,
    acorn_university_project_students.updated_by_user_id AS by
   FROM public.acorn_university_project_students
UNION ALL
 SELECT 'Acorn\University\Models\IdentityType'::text AS model_type,
    acorn_university_identity_types.id AS model_id,
    'acorn_university_identity_types'::text AS "table",
    0 AS update,
    acorn_university_identity_types.created_by_user_id AS by
   FROM public.acorn_university_identity_types
UNION ALL
 SELECT 'Acorn\University\Models\IdentityType'::text AS model_type,
    acorn_university_identity_types.id AS model_id,
    'acorn_university_identity_types'::text AS "table",
    1 AS update,
    acorn_university_identity_types.updated_by_user_id AS by
   FROM public.acorn_university_identity_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentNote'::text AS model_type,
    acorn_university_student_notes.id AS model_id,
    'acorn_university_student_notes'::text AS "table",
    0 AS update,
    acorn_university_student_notes.created_by_user_id AS by
   FROM public.acorn_university_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentNote'::text AS model_type,
    acorn_university_student_notes.id AS model_id,
    'acorn_university_student_notes'::text AS "table",
    1 AS update,
    acorn_university_student_notes.updated_by_user_id AS by
   FROM public.acorn_university_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentCode'::text AS model_type,
    acorn_university_student_codes.id AS model_id,
    'acorn_university_student_codes'::text AS "table",
    0 AS update,
    acorn_university_student_codes.created_by_user_id AS by
   FROM public.acorn_university_student_codes
UNION ALL
 SELECT 'Acorn\University\Models\StudentCode'::text AS model_type,
    acorn_university_student_codes.id AS model_id,
    'acorn_university_student_codes'::text AS "table",
    1 AS update,
    acorn_university_student_codes.updated_by_user_id AS by
   FROM public.acorn_university_student_codes
UNION ALL
 SELECT 'Acorn\Enrollment\Models\StudentNote'::text AS model_type,
    acorn_enrollment_student_notes.id AS model_id,
    'acorn_enrollment_student_notes'::text AS "table",
    0 AS update,
    acorn_enrollment_student_notes.created_by_user_id AS by
   FROM public.acorn_enrollment_student_notes
UNION ALL
 SELECT 'Acorn\Enrollment\Models\StudentNote'::text AS model_type,
    acorn_enrollment_student_notes.id AS model_id,
    'acorn_enrollment_student_notes'::text AS "table",
    1 AS update,
    acorn_enrollment_student_notes.updated_by_user_id AS by
   FROM public.acorn_enrollment_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentType'::text AS model_type,
    acorn_university_student_types.id AS model_id,
    'acorn_university_student_types'::text AS "table",
    0 AS update,
    acorn_university_student_types.created_by_user_id AS by
   FROM public.acorn_university_student_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentType'::text AS model_type,
    acorn_university_student_types.id AS model_id,
    'acorn_university_student_types'::text AS "table",
    1 AS update,
    acorn_university_student_types.updated_by_user_id AS by
   FROM public.acorn_university_student_types
UNION ALL
 SELECT 'Acorn\Exam\Models\InterviewStudent'::text AS model_type,
    acorn_exam_interview_students.id AS model_id,
    'acorn_exam_interview_students'::text AS "table",
    0 AS update,
    acorn_exam_interview_students.created_by_user_id AS by
   FROM public.acorn_exam_interview_students
UNION ALL
 SELECT 'Acorn\Exam\Models\InterviewStudent'::text AS model_type,
    acorn_exam_interview_students.id AS model_id,
    'acorn_exam_interview_students'::text AS "table",
    1 AS update,
    acorn_exam_interview_students.updated_by_user_id AS by
   FROM public.acorn_exam_interview_students
UNION ALL
 SELECT 'Acorn\University\Models\CoursePlan'::text AS model_type,
    acorn_university_course_plans.id AS model_id,
    'acorn_university_course_plans'::text AS "table",
    0 AS update,
    acorn_university_course_plans.created_by_user_id AS by
   FROM public.acorn_university_course_plans
UNION ALL
 SELECT 'Acorn\University\Models\CoursePlan'::text AS model_type,
    acorn_university_course_plans.id AS model_id,
    'acorn_university_course_plans'::text AS "table",
    1 AS update,
    acorn_university_course_plans.updated_by_user_id AS by
   FROM public.acorn_university_course_plans
UNION ALL
 SELECT 'Acorn\Exam\Models\ExamMaterial'::text AS model_type,
    acorn_exam_exam_materials.id AS model_id,
    'acorn_exam_exam_materials'::text AS "table",
    0 AS update,
    acorn_exam_exam_materials.created_by_user_id AS by
   FROM public.acorn_exam_exam_materials
UNION ALL
 SELECT 'Acorn\Exam\Models\ExamMaterial'::text AS model_type,
    acorn_exam_exam_materials.id AS model_id,
    'acorn_exam_exam_materials'::text AS "table",
    1 AS update,
    acorn_exam_exam_materials.updated_by_user_id AS by
   FROM public.acorn_exam_exam_materials
UNION ALL
 SELECT 'Acorn\University\Models\Project'::text AS model_type,
    acorn_university_projects.id AS model_id,
    'acorn_university_projects'::text AS "table",
    0 AS update,
    acorn_university_projects.created_by_user_id AS by
   FROM public.acorn_university_projects
UNION ALL
 SELECT 'Acorn\University\Models\Project'::text AS model_type,
    acorn_university_projects.id AS model_id,
    'acorn_university_projects'::text AS "table",
    1 AS update,
    acorn_university_projects.updated_by_user_id AS by
   FROM public.acorn_university_projects
UNION ALL
 SELECT 'Acorn\University\Models\Lecture'::text AS model_type,
    acorn_university_lectures.id AS model_id,
    'acorn_university_lectures'::text AS "table",
    0 AS update,
    acorn_university_lectures.created_by_user_id AS by
   FROM public.acorn_university_lectures
UNION ALL
 SELECT 'Acorn\University\Models\Lecture'::text AS model_type,
    acorn_university_lectures.id AS model_id,
    'acorn_university_lectures'::text AS "table",
    1 AS update,
    acorn_university_lectures.updated_by_user_id AS by
   FROM public.acorn_university_lectures
UNION ALL
 SELECT 'Acorn\Exam\Models\ScoreName'::text AS model_type,
    acorn_exam_score_names.id AS model_id,
    'acorn_exam_score_names'::text AS "table",
    0 AS update,
    acorn_exam_score_names.created_by_user_id AS by
   FROM public.acorn_exam_score_names
UNION ALL
 SELECT 'Acorn\Exam\Models\ScoreName'::text AS model_type,
    acorn_exam_score_names.id AS model_id,
    'acorn_exam_score_names'::text AS "table",
    1 AS update,
    acorn_exam_score_names.updated_by_user_id AS by
   FROM public.acorn_exam_score_names
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Run'::text AS model_type,
    acorn_enrollment_runs.id AS model_id,
    'acorn_enrollment_runs'::text AS "table",
    0 AS update,
    acorn_enrollment_runs.created_by_user_id AS by
   FROM public.acorn_enrollment_runs
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Run'::text AS model_type,
    acorn_enrollment_runs.id AS model_id,
    'acorn_enrollment_runs'::text AS "table",
    1 AS update,
    acorn_enrollment_runs.updated_by_user_id AS by
   FROM public.acorn_enrollment_runs
UNION ALL
 SELECT 'Acorn\Exam\Models\Question'::text AS model_type,
    acorn_exam_questions.id AS model_id,
    'acorn_exam_questions'::text AS "table",
    0 AS update,
    acorn_exam_questions.created_by_user_id AS by
   FROM public.acorn_exam_questions
UNION ALL
 SELECT 'Acorn\Exam\Models\Question'::text AS model_type,
    acorn_exam_questions.id AS model_id,
    'acorn_exam_questions'::text AS "table",
    1 AS update,
    acorn_exam_questions.updated_by_user_id AS by
   FROM public.acorn_exam_questions
UNION ALL
 SELECT 'Acorn\Exam\Models\Section'::text AS model_type,
    acorn_exam_sections.id AS model_id,
    'acorn_exam_sections'::text AS "table",
    0 AS update,
    acorn_exam_sections.created_by_user_id AS by
   FROM public.acorn_exam_sections
UNION ALL
 SELECT 'Acorn\Exam\Models\Section'::text AS model_type,
    acorn_exam_sections.id AS model_id,
    'acorn_exam_sections'::text AS "table",
    1 AS update,
    acorn_exam_sections.updated_by_user_id AS by
   FROM public.acorn_exam_sections
UNION ALL
 SELECT 'Acorn\Exam\Models\Answer'::text AS model_type,
    acorn_exam_answers.id AS model_id,
    'acorn_exam_answers'::text AS "table",
    0 AS update,
    acorn_exam_answers.created_by_user_id AS by
   FROM public.acorn_exam_answers
UNION ALL
 SELECT 'Acorn\Exam\Models\Answer'::text AS model_type,
    acorn_exam_answers.id AS model_id,
    'acorn_exam_answers'::text AS "table",
    1 AS update,
    acorn_exam_answers.updated_by_user_id AS by
   FROM public.acorn_exam_answers;


ALTER VIEW public.acorn_created_bys OWNER TO createsystem;

--
-- Name: acorn_user_users; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_users (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255),
    email character varying(255),
    password character varying(255),
    activation_code character varying(255),
    persist_code character varying(255),
    reset_password_code character varying(255),
    permissions text,
    is_activated boolean DEFAULT false NOT NULL,
    is_system_user boolean DEFAULT false NOT NULL,
    activated_at timestamp(0) without time zone,
    last_login timestamp(0) without time zone,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    username character varying(255),
    surname character varying(255),
    deleted_at timestamp(0) without time zone,
    last_seen timestamp(0) without time zone,
    is_guest boolean DEFAULT false NOT NULL,
    is_superuser boolean DEFAULT false NOT NULL,
    created_ip_address character varying(255),
    last_ip_address character varying(255),
    acorn_imap_username character varying(255),
    acorn_imap_password character varying(255),
    acorn_imap_server character varying(255),
    acorn_imap_port integer,
    acorn_imap_protocol character varying(255),
    acorn_imap_encryption character varying(255),
    acorn_imap_authentication character varying(255),
    acorn_imap_validate_cert boolean,
    acorn_smtp_server character varying(255),
    acorn_smtp_port character varying(255),
    acorn_smtp_encryption character varying(255),
    acorn_smtp_authentication character varying(255),
    acorn_smtp_username character varying(255),
    acorn_smtp_password character varying(255),
    acorn_messaging_sounds boolean,
    acorn_messaging_email_notifications character(1),
    acorn_messaging_autocreated boolean,
    acorn_imap_last_fetch timestamp(0) without time zone,
    acorn_default_calendar uuid,
    acorn_start_of_week integer,
    acorn_default_event_time_from date,
    acorn_default_event_time_to date,
    birth_date timestamp without time zone,
    import_source character varying(1024),
    fathers_name character varying(1024),
    mothers_name character varying(1024),
    gender "char",
    marital_status "char",
    religion_id uuid,
    ethnicity_id uuid,
    global_scope_entity_id uuid,
    global_scope_academic_year_id uuid,
    CONSTRAINT gender_enum CHECK (((gender IS NULL) OR (gender = ANY (ARRAY['M'::"char", 'F'::"char", 'O'::"char", 'N'::"char"])))),
    CONSTRAINT marital_status_enum CHECK (((marital_status IS NULL) OR (marital_status = ANY (ARRAY['M'::"char", 'S'::"char", 'O'::"char", 'N'::"char"]))))
);


ALTER TABLE public.acorn_user_users OWNER TO university;

--
-- Name: COLUMN acorn_user_users.created_at; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_user_users.created_at IS 'disabled: true';


--
-- Name: backend_users; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.backend_users (
    id integer NOT NULL,
    first_name character varying(255),
    last_name character varying(255),
    login character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    activation_code character varying(255),
    persist_code character varying(255),
    reset_password_code character varying(255),
    permissions text,
    is_activated boolean DEFAULT false NOT NULL,
    role_id integer,
    activated_at timestamp(0) without time zone,
    last_login timestamp(0) without time zone,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    deleted_at timestamp(0) without time zone,
    is_superuser boolean DEFAULT false NOT NULL,
    metadata text,
    acorn_url character varying(2048),
    acorn_user_user_id uuid,
    acorn_create_sync_user boolean DEFAULT true NOT NULL,
    acorn_create_and_sync_aa_user boolean DEFAULT true
);


ALTER TABLE public.backend_users OWNER TO university;

--
-- Name: acorn_dbauth_user; Type: VIEW; Schema: public; Owner: sz
--

CREATE VIEW public.acorn_dbauth_user AS
 SELECT bk.id AS backend_id,
    bk.login AS backend_login,
    u.id,
    u.name,
    u.email,
    u.password,
    u.activation_code,
    u.persist_code,
    u.reset_password_code,
    u.permissions,
    u.is_activated,
    u.is_system_user,
    u.activated_at,
    u.last_login,
    u.created_at,
    u.updated_at,
    u.username,
    u.surname,
    u.deleted_at,
    u.last_seen,
    u.is_guest,
    u.is_superuser,
    u.created_ip_address,
    u.last_ip_address,
    u.acorn_imap_username,
    u.acorn_imap_password,
    u.acorn_imap_server,
    u.acorn_imap_port,
    u.acorn_imap_protocol,
    u.acorn_imap_encryption,
    u.acorn_imap_authentication,
    u.acorn_imap_validate_cert,
    u.acorn_smtp_server,
    u.acorn_smtp_port,
    u.acorn_smtp_encryption,
    u.acorn_smtp_authentication,
    u.acorn_smtp_username,
    u.acorn_smtp_password,
    u.acorn_messaging_sounds,
    u.acorn_messaging_email_notifications,
    u.acorn_messaging_autocreated,
    u.acorn_imap_last_fetch,
    u.acorn_default_calendar,
    u.acorn_start_of_week,
    u.acorn_default_event_time_from,
    u.acorn_default_event_time_to,
    u.birth_date,
    u.import_source,
    u.fathers_name,
    u.mothers_name,
    u.gender,
    u.marital_status,
    u.religion_id,
    u.ethnicity_id,
    u.global_scope_entity_id,
    u.global_scope_academic_year_id
   FROM (public.backend_users bk
     JOIN public.acorn_user_users u ON ((bk.acorn_user_user_id = u.id)))
  WHERE (bk.id =
        CASE
            WHEN (CURRENT_USER ~ '^token_[0-9]+$'::text) THEN (replace((CURRENT_USER)::text, 'token_'::text, ''::text))::integer
            ELSE NULL::integer
        END);


ALTER VIEW public.acorn_dbauth_user OWNER TO sz;

--
-- Name: acorn_enrollment_courses; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_enrollment_courses (
    enrollment_id uuid NOT NULL,
    course_hierarchy_id uuid NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    failed_below_minimum boolean DEFAULT false NOT NULL
);


ALTER TABLE public.acorn_enrollment_courses OWNER TO university;

--
-- Name: TABLE acorn_enrollment_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_enrollment_courses IS 'menu: false
add-missing-columns: false
labels:
  en: Enrollment Course
labels-plural:
  en: Enrollment Courses';


--
-- Name: COLUMN acorn_enrollment_courses.failed_below_minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_courses.failed_below_minimum IS 'filters:
  failed_below_minimum:
    type: checkbox
    conditions: failed_below_minimum
labels:
  en: Failed below minimum students
  ku: Xwendekarên di bin kêmtirîn astê de neçûn
  ar: فشل الطلاب تحت الحد الأدنى
read-only: true
field-type: checkbox
';


--
-- Name: acorn_enrollment_students; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_enrollment_students (
    enrollment_id uuid NOT NULL,
    student_id uuid NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    proposed_desire_id uuid,
    conflict boolean,
    manual_add boolean DEFAULT false NOT NULL,
    manual_proposed boolean DEFAULT true NOT NULL,
    proposal_run_id uuid
);


ALTER TABLE public.acorn_enrollment_students OWNER TO university;

--
-- Name: TABLE acorn_enrollment_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_enrollment_students IS 'menu: false
add-missing-columns: false';


--
-- Name: COLUMN acorn_enrollment_students.proposed_desire_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_students.proposed_desire_id IS 'options-where: 
  enrollment_student_id: id@
filters:
  enrolled:
    label: acorn.enrollment::lang.models.student.enrolled
    type: checkbox
    conditions: not proposed_desire_id is null
extra-translations:
  enrolled:
    en: Enrolled
can-filter: true';


--
-- Name: COLUMN acorn_enrollment_students.conflict; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_students.conflict IS 'filters: 
  conflict:
    label: acorn.enrollment::lang.models.student.conflict
    type: checkbox
    conditions: conflict';


--
-- Name: COLUMN acorn_enrollment_students.manual_add; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_students.manual_add IS 'default: true
read-only: true
filters: 
  manual_add:
    label: acorn.enrollment::lang.models.student.manual_add
    type: checkbox
    conditions: manual_add';


--
-- Name: COLUMN acorn_enrollment_students.manual_proposed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_students.manual_proposed IS 'default: true
filters: 
  manual_proposed:
    label: acorn.enrollment::lang.models.student.manual_proposed
    type: checkbox
    conditions: manual_proposed';


--
-- Name: COLUMN acorn_enrollment_students.proposal_run_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_students.proposal_run_id IS 'advanced: true
read-only: true';


--
-- Name: acorn_university_course_year_semesters; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_course_year_semesters (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    course_id uuid NOT NULL,
    course_year_id uuid NOT NULL,
    academic_year_semester_id uuid NOT NULL,
    entity_id uuid NOT NULL,
    academic_year_semester_ordinal integer NOT NULL,
    course_plan_id uuid NOT NULL,
    course_specialization_id uuid,
    enrollment_academic_year_id uuid NOT NULL
);


ALTER TABLE public.acorn_university_course_year_semesters OWNER TO university;

--
-- Name: TABLE acorn_university_course_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_course_year_semesters IS 'no-relation-manager-default: true
labels:
  en: Course Year Semester
  ku: Salê Dersê Semester
  ar: الدورة السنة الفصل الدراسي
labels-plural:
  en: Course Year Semesters
  ku: Salê Dersê Semesterên
  ar: السنة الدراسية الفصول الدراسية
';


--
-- Name: COLUMN acorn_university_course_year_semesters.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_year_semesters.course_id IS 'invisible: true
can-filter: true
tab-location: 3
context-update:
  read-only: true
css-classes-column:
  - hide-duplicates';


--
-- Name: COLUMN acorn_university_course_year_semesters.course_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_year_semesters.course_year_id IS 'can-filter: true
tab-location: 3
context-update:
  read-only: true
column-type: partial
column-partial: ordinal
suffix: acorn::lang.models.general.dateformats.year
css-classes-column:
  - hide-duplicates';


--
-- Name: COLUMN acorn_university_course_year_semesters.academic_year_semester_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_year_semesters.academic_year_semester_id IS 'can-filter: true
tab-location: 3
context-update:
  read-only: true
css-classes-column:
  - hide-duplicates';


--
-- Name: COLUMN acorn_university_course_year_semesters.academic_year_semester_ordinal; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_year_semesters.academic_year_semester_ordinal IS 'column-partial: ordinal
column-type: partial
tab-location: 3
suffix: acorn.university::lang.models.semester.label
read-only: true
css-classes-column:
  - hide-duplicates';


--
-- Name: COLUMN acorn_university_course_year_semesters.course_plan_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_year_semesters.course_plan_id IS 'hidden: true
invisible: true
css-classes-column:
  - hide-duplicates';


--
-- Name: COLUMN acorn_university_course_year_semesters.course_specialization_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_year_semesters.course_specialization_id IS 'labels:
  en: Specialization
  ku: Tibet
tab-location: 3
context-update:
  read-only: true';


--
-- Name: COLUMN acorn_university_course_year_semesters.enrollment_academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_course_year_semesters.enrollment_academic_year_id IS 'order: 10
# Necessary to hide field in favour of tab-location 3
contexts:
  create: true
  preview: true
context-update:
  tab-location: 3
  read-only: true
  context: update';


--
-- Name: acorn_university_courses; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_courses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    weight double precision,
    course_type_id uuid,
    entity_id uuid NOT NULL,
    show_on_front_end boolean DEFAULT false NOT NULL,
    "parent_1[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL,
    "parent_2[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL
);


ALTER TABLE public.acorn_university_courses OWNER TO university;

--
-- Name: TABLE acorn_university_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_courses IS 'order: 60
seeding:
  # Science, Literature
  - [''ffc92184-2d8f-11f0-9f2f-af2e2a870b91'', ''c555e604-2d8f-11f0-b535-bb3e95f882b4'', NULL, ''a5d8016a-78ad-4296-aac7-fc5332045764'']
  - [''001382ce-2d90-11f0-b3fe-bf0261495ded'', ''c5b7ccb6-2d8f-11f0-9338-4fa17b2a6436'', NULL, ''a5d8016a-78ad-4296-aac7-fc5332045764'']
  # Year 10,11
  - [''f6210e20-2e53-11f0-b41e-bbc1e97e17dc'', ''4bf9dbe8-2e53-11f0-ad9d-eb001b270147'', NULL, ''801fb8af-5ed3-4436-b89e-9151e9558c24'']
  - [''f62111ea-2e53-11f0-b41f-ff3908814684'', ''4bf9de9a-2e53-11f0-ad9e-1339796bedc7'', NULL, ''801fb8af-5ed3-4436-b89e-9151e9558c24'']
labels:
  en: Course
  ku: Kors
  ar: المنهج
labels-plural:
  en: Courses
  ku: Korsên
  ar: المنهج
hints:
  no_hierarchy:
    labels:
      en: Not connected
      ku: Ne girêdayî ye
      ar: غير متصل
    contentHtml: true
    content:
      en: This course is not connected to any organisation. <a href="/backend/acorn/university/hierarchies">Add to an organisation</a>.
      ku: Ev qurs bi tu rêxistinekê ve ne girêdayî ye. <a href="/backend/acorn/university/hierarchies">Li rêxistinekê zêde bike</a>.
      ar: هذه الدورة ليست مرتبطة بأي منظمة. <a href="/backend/acorn/university/hierarchies">إضافة إلى منظمة</a>.
    level: warning
    conditions: not exists(select * from acorn_university_hierarchies where entity_id = acorn_university_courses.entity_id)
    context: update';


--
-- Name: COLUMN acorn_university_courses.weight; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_courses.weight IS 'tab-location: 3';


--
-- Name: COLUMN acorn_university_courses.course_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_courses.course_type_id IS 'order: 2
tab-location: 3
';


--
-- Name: COLUMN acorn_university_courses.show_on_front_end; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_courses.show_on_front_end IS 'explicit-label-key: acorn.user::lang.settings.show_on_front_end
order: 1
tab-location: 3
hints:
  public:
    labels: 
      en: Public
    content:
      en: The course is visible on the front end in calendars and results
    conditions: acorn_university_courses.show_on_front_end
    level: warning
    context: update';


--
-- Name: COLUMN acorn_university_courses."parent_1[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_courses."parent_1[entity]" IS 'labels: 
  en: School/Department
labels-plural:
  en: Schools/Departments
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: COLUMN acorn_university_courses."parent_2[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_courses."parent_2[entity]" IS 'labels: 
  en: Region/Faculty
labels-plural:
  en: Regions/Faculties
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: acorn_university_student_status; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_status (
    student_id uuid NOT NULL,
    student_status_id uuid NOT NULL
);


ALTER TABLE public.acorn_university_student_status OWNER TO university;

--
-- Name: TABLE acorn_university_student_status; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_status IS 'labels:
  en: Status
  ku: Rewş
  ar: الحالات الخاصة
labels-plural:
  en: Statuses
  ku: Rewşên
  ar: الحالات الخاصة';


--
-- Name: acorn_user_user_group_version; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_user_group_version (
    user_id uuid NOT NULL,
    user_group_version_id uuid NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_user_user_group_version OWNER TO university;

--
-- Name: acorn_user_user_groups; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_user_groups (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    code character varying(2048) NOT NULL,
    description text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    parent_user_group_id uuid,
    nest_left integer DEFAULT 0 NOT NULL,
    nest_right integer DEFAULT 0 NOT NULL,
    nest_depth integer DEFAULT 0 NOT NULL,
    image character varying(1024),
    colour character varying(1024),
    type_id uuid,
    import_source character varying(1024),
    CONSTRAINT name_valid CHECK (((name)::text <> ''::text))
);


ALTER TABLE public.acorn_user_user_groups OWNER TO university;

--
-- Name: COLUMN acorn_user_user_groups.colour; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_user_user_groups.colour IS 'tab-location: 3';


--
-- Name: COLUMN acorn_user_user_groups.import_source; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_user_user_groups.import_source IS 'advanced: true
invisible: true';


--
-- Name: acorn_enrollment_olapcube; Type: MATERIALIZED VIEW; Schema: public; Owner: university
--

CREATE MATERIALIZED VIEW public.acorn_enrollment_olapcube AS
 SELECT es.student_id AS id,
    es.proposed_desire_id,
    COALESCE(proposed_desire_ugs.name, 'None'::character varying) AS proposed_desire_name,
    e.id AS enrollment_id,
    e.name AS enrollment_name,
    e.owner_entity_id,
    COALESCE(owner_entity_ugs.name, 'None'::character varying) AS owner_entity_name,
    hi_s.id AS course_hierarchy_id,
    COALESCE(ugs_c.name, 'None'::character varying) AS course_hierarchy_name,
    ss.student_status_id,
    COALESCE(sts.name, 'None'::character varying) AS student_status_name,
    e.strategy_function,
    e.calculation_id
   FROM (((((((((((((((((((public.acorn_enrollment_students es
     JOIN public.acorn_enrollment_enrollments e ON (((es.enrollment_id = e.id) AND (e.deleted_at IS NULL))))
     JOIN public.acorn_university_students s ON ((es.student_id = s.id)))
     LEFT JOIN public.acorn_user_user_group_version ugv ON ((s.user_id = ugv.user_id)))
     LEFT JOIN public.acorn_university_hierarchies hi_s ON ((hi_s.user_group_version_id = ugv.user_group_version_id)))
     LEFT JOIN public.acorn_university_entities en_c ON ((en_c.id = hi_s.entity_id)))
     LEFT JOIN public.acorn_university_course_year_semesters cys ON ((cys.entity_id = en_c.id)))
     LEFT JOIN public.acorn_university_courses c_s ON ((cys.course_id = c_s.id)))
     LEFT JOIN public.acorn_user_user_groups ugs_c ON ((ugs_c.id = en_c.user_group_id)))
     LEFT JOIN public.acorn_university_course_types ct ON ((c_s.course_type_id = ct.id)))
     LEFT JOIN public.acorn_university_student_status ss ON ((ss.student_id = s.id)))
     LEFT JOIN public.acorn_university_student_statuses sts ON ((ss.student_status_id = sts.id)))
     LEFT JOIN public.acorn_university_entities owner_entity_en ON ((e.owner_entity_id = owner_entity_en.id)))
     LEFT JOIN public.acorn_user_user_groups owner_entity_ugs ON ((owner_entity_en.user_group_id = owner_entity_ugs.id)))
     LEFT JOIN public.acorn_enrollment_desires ed ON ((es.proposed_desire_id = ed.id)))
     LEFT JOIN public.acorn_enrollment_course_entry_requirements cer ON ((ed.course_entry_requirement_id = cer.id)))
     LEFT JOIN public.acorn_enrollment_courses ec ON ((cer.enrollment_course_id = ec.id)))
     LEFT JOIN public.acorn_university_hierarchies hi ON ((ec.course_hierarchy_id = hi.id)))
     LEFT JOIN public.acorn_university_entities proposed_desire_en ON ((hi.entity_id = proposed_desire_en.id)))
     LEFT JOIN public.acorn_user_user_groups proposed_desire_ugs ON ((proposed_desire_en.user_group_id = proposed_desire_ugs.id)))
  WHERE (NOT ct.is_general)
  WITH NO DATA;


ALTER MATERIALIZED VIEW public.acorn_enrollment_olapcube OWNER TO university;

--
-- Name: MATERIALIZED VIEW acorn_enrollment_olapcube; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON MATERIALIZED VIEW public.acorn_enrollment_olapcube IS 'menu: false';


--
-- Name: COLUMN acorn_enrollment_olapcube.proposed_desire_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_olapcube.proposed_desire_id IS 'extra-foreign-key:
  table: acorn_enrollment_desires
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_enrollment_olapcube.enrollment_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_olapcube.enrollment_id IS 'extra-foreign-key:
  table: acorn_enrollment_enrollments
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_enrollment_olapcube.owner_entity_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_olapcube.owner_entity_id IS 'extra-foreign-key:
  table: acorn_university_entities
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_enrollment_olapcube.course_hierarchy_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_olapcube.course_hierarchy_id IS 'extra-foreign-key:
  table: acorn_university_hierarchies
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_enrollment_olapcube.student_status_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_olapcube.student_status_id IS 'extra-foreign-key:
  table: acorn_university_student_statuses
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_enrollment_olapcube.calculation_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_olapcube.calculation_id IS 'extra-foreign-key:
  table: acorn_exam_calculations
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: acorn_enrollment_statistics; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_enrollment_statistics AS
 SELECT e.id AS enrollment_id,
    'Students'::text AS name,
    (count(*))::character varying AS value
   FROM (public.acorn_enrollment_enrollments e
     JOIN public.acorn_enrollment_students es ON ((e.id = es.enrollment_id)))
  GROUP BY e.id
UNION ALL
 SELECT e.id AS enrollment_id,
    'Conflicts'::text AS name,
    (count(es.enrollment_id))::character varying AS value
   FROM (public.acorn_enrollment_enrollments e
     LEFT JOIN public.acorn_enrollment_students es ON (((e.id = es.enrollment_id) AND es.conflict)))
  GROUP BY e.id
UNION ALL
 SELECT e.id AS enrollment_id,
    'Desires'::text AS name,
    (count(ed.id))::character varying AS value
   FROM ((public.acorn_enrollment_enrollments e
     LEFT JOIN public.acorn_enrollment_students es ON ((e.id = es.enrollment_id)))
     LEFT JOIN public.acorn_enrollment_desires ed ON ((es.id = ed.enrollment_student_id)))
  GROUP BY e.id
UNION ALL
 SELECT e.id AS enrollment_id,
    'Max Desire priority'::text AS name,
    (COALESCE(max(ed.sort_order), 0))::character varying AS value
   FROM ((public.acorn_enrollment_enrollments e
     LEFT JOIN public.acorn_enrollment_students es ON ((e.id = es.enrollment_id)))
     LEFT JOIN public.acorn_enrollment_desires ed ON ((es.id = ed.enrollment_student_id)))
  GROUP BY e.id
UNION ALL
 SELECT e.id AS enrollment_id,
    'Courses'::text AS name,
    (count(*))::character varying AS value
   FROM (public.acorn_enrollment_enrollments e
     JOIN public.acorn_enrollment_courses ec ON ((e.id = ec.enrollment_id)))
  GROUP BY e.id
UNION ALL
 SELECT e.id AS enrollment_id,
    'Failed Courses'::text AS name,
    (count(ec.enrollment_id))::character varying AS value
   FROM (public.acorn_enrollment_enrollments e
     LEFT JOIN public.acorn_enrollment_courses ec ON (((e.id = ec.enrollment_id) AND ec.failed_below_minimum)))
  GROUP BY e.id
UNION ALL
 SELECT e.id AS enrollment_id,
    'Proposed allocations'::text AS name,
    (count(es.proposed_desire_id))::character varying AS value
   FROM (public.acorn_enrollment_enrollments e
     LEFT JOIN public.acorn_enrollment_students es ON (((e.id = es.enrollment_id) AND (NOT (es.proposed_desire_id IS NULL)))))
  GROUP BY e.id;


ALTER VIEW public.acorn_enrollment_statistics OWNER TO university;

--
-- Name: VIEW acorn_enrollment_statistics; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_enrollment_statistics IS 'menu: false';


--
-- Name: COLUMN acorn_enrollment_statistics.enrollment_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_enrollment_statistics.enrollment_id IS 'extra-foreign-key: 
  table: acorn_enrollment_enrollments
  comment:
    tab-location: 3
    show-search: false
    css-classes: 
      - no-header
labels:
  en: Statistic
labels-plural:
  en: Statistics';


--
-- Name: acorn_exam_result_internal2s; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_exam_result_internal2s (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    student_id uuid,
    academic_year_id uuid,
    exam_id uuid,
    course_material_id uuid,
    course_id uuid,
    material_id uuid,
    calculation_id uuid,
    calculation_type_id uuid,
    calculation_type_name character varying(1024),
    project_id uuid,
    interview_id uuid,
    expression character varying(2048),
    minimum double precision,
    maximum double precision,
    required boolean,
    expression_type character varying(1024),
    needs_evaluate boolean,
    resolved_expression character varying(2048),
    result double precision,
    explanation character varying[]
);


ALTER TABLE public.acorn_exam_result_internal2s OWNER TO university;

--
-- Name: TABLE acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_exam_result_internal2s IS 'menu: false
add-missing-columns: false
labels:
  en: Student Result
  ku: Encamên Xwendekar
labels-plural:
  en: Student Result
  ku: Encamên Xwendekarên';


--
-- Name: COLUMN acorn_exam_result_internal2s.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.academic_year_id IS 'css-classes-column:
  - tablet';


--
-- Name: COLUMN acorn_exam_result_internal2s.calculation_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.calculation_id IS 'column-type: partial
column-partial: name_description
value-from: false
sql-select: false';


--
-- Name: COLUMN acorn_exam_result_internal2s.expression; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.expression IS 'column-type: partial
column-partial: expression';


--
-- Name: COLUMN acorn_exam_result_internal2s.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.minimum IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_result_internal2s.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.maximum IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_result_internal2s.expression_type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.expression_type IS 'filters:
  expression_type:
    label: acorn.exam::lang.models.result.expression_type
    conditions: expression_type in(:filtered)
    options:
      data: Data
      expression: Expression
      formulae: Formulae';


--
-- Name: COLUMN acorn_exam_result_internal2s.resolved_expression; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.resolved_expression IS 'column-type: partial
column-partial: expression';


--
-- Name: COLUMN acorn_exam_result_internal2s.result; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_result_internal2s.result IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: acorn_exam_results; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_exam_results AS
 SELECT id,
    name,
    student_id,
    academic_year_id,
    exam_id,
    course_material_id,
    course_id,
    material_id,
    calculation_id,
    calculation_type_id,
    project_id,
    interview_id,
    expression,
    minimum,
    maximum,
    required,
    expression_type,
    needs_evaluate,
    resolved_expression,
    result,
    ((result >= COALESCE(minimum, (0)::double precision)) AND (result <= COALESCE(maximum, (100000)::double precision))) AS passed,
    to_json(explanation) AS explanation
   FROM public.acorn_exam_result_internal2s;


ALTER VIEW public.acorn_exam_results OWNER TO university;

--
-- Name: VIEW acorn_exam_results; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_exam_results IS 'labels:
  en: Student Result
  ku: Encamên Xwendekar
  ar: نتيجة الطالب
labels-plural:
  en: Student Result
  ku: Encamên Xwendekarên
  ar: نتيجة الطالب
menu: false';


--
-- Name: COLUMN acorn_exam_results.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    tab-location: 2
    advanced: true
    invisible: true
    labels:
      en: Student Result
      ku: Encamên Xwendekar
      ar: نتيجة الطالب
    labels-plural:
      en: Student Result
      ku: Encamên Xwendekarên
      ar: نتيجة الطالب
';


--
-- Name: COLUMN acorn_exam_results.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true
css-classes-column:
  - tablet';


--
-- Name: COLUMN acorn_exam_results.exam_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.exam_id IS 'extra-foreign-key: 
  table: acorn_exam_exams
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true';


--
-- Name: COLUMN acorn_exam_results.course_material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.course_material_id IS 'extra-foreign-key: 
  table: acorn_university_course_materials
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true';


--
-- Name: COLUMN acorn_exam_results.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.course_id IS 'extra-foreign-key: 
  table: acorn_university_courses
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true';


--
-- Name: COLUMN acorn_exam_results.material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.material_id IS 'extra-foreign-key: 
  table: acorn_university_materials
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true';


--
-- Name: COLUMN acorn_exam_results.calculation_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.calculation_id IS 'extra-foreign-key: 
  table: acorn_exam_calculations
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true
column-type: partial
column-partial: name_description
value-from: false
sql-select: false
';


--
-- Name: COLUMN acorn_exam_results.calculation_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.calculation_type_id IS 'extra-foreign-key: 
  table: acorn_exam_calculation_types
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true';


--
-- Name: COLUMN acorn_exam_results.project_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.project_id IS 'extra-foreign-key: 
  table: acorn_university_projects
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true';


--
-- Name: COLUMN acorn_exam_results.interview_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.interview_id IS 'extra-foreign-key: 
  table: acorn_exam_interviews
  comment:
    tab-location: 2
    field-exclude: true
    invisible: true';


--
-- Name: COLUMN acorn_exam_results.expression; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.expression IS 'column-type: partial
column-partial: expression';


--
-- Name: COLUMN acorn_exam_results.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.minimum IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_results.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.maximum IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_results.expression_type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.expression_type IS 'filters:
  expression_type:
    label: acorn.exam::lang.models.result.expression_type
    conditions: expression_type in(:filtered)
    options:
      data: Data
      expression: Expression
      formulae: Formulae';


--
-- Name: COLUMN acorn_exam_results.resolved_expression; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.resolved_expression IS 'column-type: partial
column-partial: expression';


--
-- Name: COLUMN acorn_exam_results.result; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.result IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_results.passed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.passed IS 'css-classes-column:
  - show-cross
labels:
  en: Passed
  ku: Serket
  ar: ناجح
labels-plural:
  en: Passed
  ku: Serket
  ar: ناجح
filters:
  passed:
    label: acorn.exam::lang.models.result.passed
    type: checkbox
    conditions: passed
  not_passed:
    label: acorn.exam::lang.models.result.not_passed
    type: checkbox
    conditions: not passed
extra-translations:
  not_passed:
    en: Failed
    ku: binket
    ar: راسب';


--
-- Name: COLUMN acorn_exam_results.explanation; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_results.explanation IS 'column-type: partial
column-partial: multi
';


--
-- Name: acorn_user_user_group_versions; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_user_group_versions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_group_id uuid NOT NULL,
    version integer DEFAULT 1 NOT NULL,
    current boolean DEFAULT true NOT NULL,
    import_source character varying(1024),
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_user_user_group_versions OWNER TO university;

--
-- Name: acorn_exam_data_entry_scores; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_exam_data_entry_scores AS
 SELECT concat(u.id, '::', en.user_group_id, '::', em.exam_id) AS id,
    u.id AS student_user_id,
    s.id AS student_id,
    cys.academic_year_semester_id,
    ays.academic_year_id,
    en.user_group_id AS course_user_group_id,
    ens.user_group_id AS organisation_user_group_id,
    c.id AS course_id,
    ugs.code AS course_code,
    c.course_type_id,
    em.exam_id,
    json_object_agg(public.fn_acorn_exam_token_name(VARIADIC ARRAY[m.name]), json_build_object('id', es.id, 'type', 'Acorn\Exam\Models\Score', 'exam_material_id', em.id, 'title', m.id, 'title_type', 'Acorn\University\Models\Material', 'value', (round((es.score)::numeric, 1))::double precision, 'createValues', json_build_object('student_id', s.id, 'exam_material_id', em.id), 'minimum', xrm.minimum, 'maximum', xrm.maximum, 'required', (xrm.required OR cm.required), 'result', xrm.result, 'passed', xrm.passed) ORDER BY cm.sort_order) AS scores,
    json_object_agg(public.fn_acorn_exam_token_name(VARIADIC ARRAY[m.name]), json_build_object('id', sn.id, 'type', 'Acorn\Exam\Models\ScoreName', 'title', m.id, 'title_type', 'Acorn\University\Models\Material', 'value', sn.id, 'value_type', 'Acorn\Exam\Models\ScoreName'::text, 'value_suffix', snf.id, 'value_suffix_type', 'Acorn\Exam\Models\ScoreName'::text)) AS score_names,
    sum(
        CASE
            WHEN (ct.id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid) THEN es.score
            ELSE NULL::double precision
        END) AS sum,
    count(es.id) AS attendance,
    xr.passed,
        CASE
            WHEN (ct.id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid) THEN xr.result
            ELSE NULL::double precision
        END AS result,
    xr.minimum,
    xr.maximum
   FROM ((((((((((((((((((((((((public.acorn_university_courses c
     LEFT JOIN public.acorn_university_course_types ct ON ((c.course_type_id = ct.id)))
     JOIN public.acorn_university_course_year_semesters cys ON ((cys.course_id = c.id)))
     JOIN public.acorn_university_course_materials cm ON ((cm.course_year_semester_id = cys.id)))
     JOIN public.acorn_university_academic_year_semesters ays ON ((cys.academic_year_semester_id = ays.id)))
     JOIN public.acorn_university_academic_years ay ON ((ay.id = ays.academic_year_id)))
     JOIN public.acorn_exam_exam_materials em ON ((em.course_material_id = cm.id)))
     JOIN public.acorn_exam_exams e ON ((em.exam_id = e.id)))
     JOIN public.acorn_exam_types et ON ((e.type_id = et.id)))
     JOIN public.acorn_university_materials m ON ((cm.material_id = m.id)))
     JOIN public.acorn_university_entities en ON ((cys.entity_id = en.id)))
     JOIN public.acorn_university_hierarchies hi ON (((hi.entity_id = en.id) AND (hi.academic_year_id = ay.id))))
     JOIN public.acorn_user_user_group_versions ugv ON ((hi.user_group_version_id = ugv.id)))
     JOIN public.acorn_user_user_groups ugs ON ((ugv.user_group_id = ugs.id)))
     JOIN public.acorn_user_user_group_version ug ON ((ugv.id = ug.user_group_version_id)))
     JOIN public.acorn_user_users u ON ((u.id = ug.user_id)))
     JOIN public.acorn_university_students s ON ((s.user_id = u.id)))
     JOIN public.acorn_university_hierarchies his ON ((hi.parent_id = his.id)))
     JOIN public.acorn_university_entities ens ON ((his.entity_id = ens.id)))
     JOIN public.acorn_user_user_groups ugss ON ((ens.user_group_id = ugss.id)))
     LEFT JOIN public.acorn_exam_scores es ON (((es.exam_material_id = em.id) AND (es.student_id = s.id))))
     LEFT JOIN public.acorn_exam_score_names sn ON ((floor(es.score) = sn.score)))
     LEFT JOIN public.acorn_exam_score_names snf ON ((((round(((es.score - floor(es.score)))::numeric, 1))::double precision = snf.score) AND (snf.score <> (0)::double precision))))
     LEFT JOIN public.acorn_exam_results xr ON (((xr.student_id = s.id) AND (xr.academic_year_id = ay.id) AND (xr.course_id = c.id) AND (xr.course_material_id IS NULL) AND (xr.calculation_type_id = '56013d6e-3247-11f0-8e96-2f232943abf8'::uuid))))
     LEFT JOIN public.acorn_exam_results xrm ON (((xrm.student_id = s.id) AND (xrm.academic_year_id = ay.id) AND (xrm.course_id = c.id) AND (xrm.material_id = m.id) AND (xrm.calculation_type_id = '56013d6e-3247-11f0-8e96-2f232943abf8'::uuid))))
  GROUP BY u.id, s.id, c.id, ct.id, xr.minimum, xr.maximum, cys.academic_year_semester_id, ens.user_group_id, ays.academic_year_id, en.user_group_id, ugs.code, c.course_type_id, em.exam_id, xr.result, xr.passed;


ALTER VIEW public.acorn_exam_data_entry_scores OWNER TO university;

--
-- Name: VIEW acorn_exam_data_entry_scores; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_exam_data_entry_scores IS 'order: 1000
batch-print: true
menu-splitter: true
labels:
  en: Data Entry Scores
  ku: Pûanên Têketina Daneyan
  ar: نتائج إدخال البيانات
labels-plural:
  en: Data Entry Scores
  ku: Pûanên Têketina Daneyan
  ar: نتائج إدخال البيانات
';


--
-- Name: COLUMN acorn_exam_data_entry_scores.student_user_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.student_user_id IS 'extra-foreign-key: 
  table: acorn_user_users
  comment:
    tab-location: 2
	can-filter: true
labels:
  en: Student User
labels-plural:
  en: Student Users
sql-select: acorn_user_users.name
sortable: true
searchable: true
invisible: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    tab-location: 2
    invisible: true
    name-object: true
    depends-on:
      user_user_group_versions: true
    labels:
      en: Data Entry Scores
      ku: Pûanên Têketina Daneyan
      ar: نتائج إدخال البيانات
    labels-plural:
      en: Data Entry Scores
      ku: Pûanên Têketina Daneyan
      ar: نتائج إدخال البيانات
labels:
  en: Student
labels-plural:
  en: Students
qrcode-object: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.academic_year_semester_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.academic_year_semester_id IS 'extra-foreign-key: 
  table: acorn_university_academic_year_semesters
  comment:
    tab-location: 2
    name-object: true
filter-search-name-select: select ay.name from acorn_university_academic_years ay where ay.id = acorn_university_academic_year_semesters.academic_year_id
labels:
  en: Academic Year Semester
labels-plural:
  en: Academic Year Semesters';


--
-- Name: COLUMN acorn_exam_data_entry_scores.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true
    name-object: true
	can-filter: true
	global-scope: to
labels:
  en: Academic Year
labels-plural:
  en: Academic Years
css-classes-column:
  - tablet
invisible: true
no-relation-manager: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.course_user_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.course_user_group_id IS 'extra-foreign-key: 
  table: acorn_user_user_groups
  comment:
    tab-location: 2
    name-object: true
	can-filter: true
filter-conditions: >
            student_id in(
              select s.id from acorn_university_students s
              inner join acorn_user_user_group_version ugv on s.user_id = ugv.user_id
              inner join acorn_user_user_group_versions ugvs on ugv.user_group_version_id = ugvs.id
              where ugvs.user_group_id in(:filtered)
            )
no-relation-manager: true
labels:
  en: Course
  ku: Kors
  ar: المنهج
labels-plural:
  en: Courses
  ku: Kors
  ar: المنهج
invisible: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.organisation_user_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.organisation_user_group_id IS 'extra-foreign-key: 
  table: acorn_user_user_groups
  comment:
    tab-location: 2
    name-object: true
	can-filter: true
no-relation-manager: true
labels:
  en: School
  ku: Dibistan
  ar: مدرسة
labels-plural:
  en: Schools
  ku: Dibistanên
  ar: مدرسة
sortable: false';


--
-- Name: COLUMN acorn_exam_data_entry_scores.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.course_id IS 'extra-foreign-key: 
  table: acorn_university_courses
  comment:
    tab-location: 2
no-relation-manager: true
labels:
  en: Course
  ku: Kors
  ar: المنهج
labels-plural:
  en: Courses
  ku: Korsên
  ar: المنهج
';


--
-- Name: COLUMN acorn_exam_data_entry_scores.course_code; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.course_code IS 'sortable: true
sql-select: acorn_exam_data_entry_scores.course_code
labels:
  en: Course Code
  ku: Kode kors
  ar: رمز الفرع
labels-plural:
  en: Courses
  ku: Kode korsên
  ar: رمز الفرع
invisible: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.course_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.course_type_id IS 'extra-foreign-key: 
  table: acorn_university_course_types
  comment:
    tab-location: 2
	can-filter: true
invisible: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.exam_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.exam_id IS 'extra-foreign-key: 
  table: acorn_exam_exams
  comment:
    tab-location: 2
	can-filter: true
invisible: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.scores; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.scores IS 'list-editable: delete-on-null
type-editable: number
labels:
  en: Material Score
  ku: Pila
  ar: علامة المادة
labels-plural:
  en: Materials Scores
  ku: Pilayên
  ar: علامة المادة
';


--
-- Name: COLUMN acorn_exam_data_entry_scores.score_names; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.score_names IS 'read-only: true
column-type: partial
column-partial: record_list_editable
invisible: true
labels:
  en: Material Score name
labels-plural:
  en: Materials Score names';


--
-- Name: COLUMN acorn_exam_data_entry_scores.sum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.sum IS 'invisible: true
labels:
  en: Sum
  ku: Giş
  ar: المجموع
labels-plural:
  en: Sums
  ku: Gişên
  ar: المجموع
';


--
-- Name: COLUMN acorn_exam_data_entry_scores.attendance; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.attendance IS 'invisible: true
labels:
  en: Attendance
  ku: Amadetî
  ar: الحضور
labels-plural:
  en: Attendances
  ku: Amadetîyên
  ar: الحضور
';


--
-- Name: COLUMN acorn_exam_data_entry_scores.passed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.passed IS 'column-partial: tick
column-type: partial
css-classes-column:
  - show-cross
filters:
  passed:
    label: acorn.exam::lang.models.result.passed
    type: checkbox
    conditions: passed
  failed:
    label: acorn.exam::lang.models.result.not_passed
    type: checkbox
    conditions: not passed
labels:
  en: Course Passed
  ku: Kors Serket
  ar: النجاح في الفرع
labels-plural:
  en: Course Passes
  ku: Kors Serketên
  ar: النجاح في الفرع
invisible: true';


--
-- Name: COLUMN acorn_exam_data_entry_scores.result; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.result IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true
labels:
  en: Result
  ku: Encam
  ar: العلامة
labels-plural:
  en: Results
  ku: Encamên
  ar: العلامة
';


--
-- Name: COLUMN acorn_exam_data_entry_scores.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.minimum IS 'labels:
  en: Minimum
  ku: Kêmtirîn
  ar: الحد الاعلى
labels-plural:
  en: Minimums
  ku: Kêmtirînên
  ar: الحد الاعلى
';


--
-- Name: COLUMN acorn_exam_data_entry_scores.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_data_entry_scores.maximum IS 'invisible: true
labels:
  en: Maximum
  ku: Zêdetirîn
  ar: الحد الدنى
labels-plural:
  en: Maximums
  ku: Zêdetirînên
  ar: الحد الدنى
';


--
-- Name: acorn_user_languages; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_languages (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    locale character varying(10) NOT NULL,
    rtl boolean DEFAULT false NOT NULL
);


ALTER TABLE public.acorn_user_languages OWNER TO university;

--
-- Name: acorn_user_user_languages; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_user_languages (
    user_id uuid NOT NULL,
    language_id uuid NOT NULL,
    current boolean DEFAULT true NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE public.acorn_user_user_languages OWNER TO university;

--
-- Name: COLUMN acorn_user_user_languages.user_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_user_user_languages.user_id IS 'no-relation-manager: true';


--
-- Name: acorn_exam_certificates; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_exam_certificates AS
 SELECT sc.id,
    sc.student_user_id,
    sc.student_id,
    co.code AS student_code,
    sc.academic_year_semester_id,
    sc.academic_year_id,
    sc.course_user_group_id,
    sc.organisation_user_group_id,
    sc.course_id,
    sc.course_code,
    sc.course_type_id,
    ((('https://nabu.acorn.org/student/login/id/'::text || (s.id)::text) || '/?bm='::text) || (s.legacy_import_id)::text) AS qrcode,
    sc.exam_id,
    sc.scores,
    sc.score_names,
    (round((sc.sum)::numeric, 1))::double precision AS sum,
    sn.id AS sum_score_name_id,
    snf.id AS sum_score_name_suffix_id,
    sc.attendance,
    sc.passed,
    (round((sc.result)::numeric, 1))::double precision AS result,
    sc.minimum,
    sc.maximum,
    (round((xrfa.result)::numeric, 1))::double precision AS bakeloria_final_mark,
    xrp.passed AS bakeloria_passed,
    (COALESCE(((s.legacy_import_birth_place)::text || ' '::text), (''::character varying)::text) || COALESCE(((u.birth_date)::date)::text, (''::character varying)::text)) AS place_and_date_of_birth,
    (now())::date AS printed_date,
    (COALESCE(((u.name)::text || ' '::text), (''::character varying)::text) || (COALESCE(u.surname, ''::character varying))::text) AS full_name,
    l.rtl,
    ((((((((u.name)::text || ' '::text) || (COALESCE(u.fathers_name, ''::character varying))::text) || ' '::text) || (COALESCE(u.surname, ''::character varying))::text) || ' '::text) || (COALESCE(co.code, (s.id)::character varying))::text))::character varying AS filename,
    uul.language_id AS primary_language_id,
    s.legacy_import_student_type,
    s.legacy_import_birth_place,
    s.legacy_import_the_total,
    s.legacy_import_final_avg,
    s.legacy_import_result,
        CASE
            WHEN (sc.course_type_id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid) THEN s.legacy_import_avg
            ELSE NULL::double precision
        END AS legacy_import_avg,
        CASE
            WHEN (sc.course_type_id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid) THEN (((s.legacy_import_avg IS NULL) OR (abs((xr.result - s.legacy_import_avg)) < (0.5)::double precision)) AND ((s.legacy_import_final_avg IS NULL) OR (abs((xrfa.result - s.legacy_import_final_avg)) < (0.5)::double precision)) AND (xrp.passed = ((s.legacy_import_result)::text = ANY (ARRAY[('P'::character varying)::text, ('serket'::character varying)::text, ('Serket'::character varying)::text, ('Serkeftî'::character varying)::text]))))
            ELSE NULL::boolean
        END AS legacy_import_correct,
        CASE
            WHEN ((s.legacy_import_result)::text = 'Binket'::text) THEN false
            WHEN ((s.legacy_import_result)::text = 'F'::text) THEN false
            WHEN ((s.legacy_import_result)::text = ''::text) THEN NULL::boolean
            WHEN (s.legacy_import_result IS NULL) THEN NULL::boolean
            ELSE true
        END AS legacy_import_passed,
    u.username,
    u.password,
    u.email,
    u.birth_date,
    u.name,
    u.surname,
    u.fathers_name,
    u.mothers_name,
    u.gender,
    u.marital_status,
    s.printed,
    u.created_at,
    u.updated_at
   FROM ((((((((((public.acorn_exam_data_entry_scores sc
     JOIN public.acorn_university_students s ON ((sc.student_id = s.id)))
     JOIN public.acorn_user_users u ON ((s.user_id = u.id)))
     LEFT JOIN public.acorn_exam_score_names sn ON ((floor(sc.sum) = sn.score)))
     LEFT JOIN public.acorn_exam_score_names snf ON ((((round(((sc.sum - floor(sc.sum)))::numeric, 1))::double precision = snf.score) AND (snf.score <> (0)::double precision))))
     LEFT JOIN public.acorn_exam_results xr ON (((xr.student_id = sc.student_id) AND (xr.academic_year_id = sc.academic_year_id) AND (xr.course_id = sc.course_id) AND (xr.course_material_id IS NULL) AND (xr.calculation_type_id = '56013d6e-3247-11f0-8e96-2f232943abf8'::uuid))))
     LEFT JOIN public.acorn_exam_results xrp ON (((xrp.student_id = sc.student_id) AND (xrp.academic_year_id = sc.academic_year_id) AND (xrp.calculation_id = '9ee52f50-d22a-471e-bdeb-b13d81b1afb2'::uuid))))
     LEFT JOIN public.acorn_exam_results xrfa ON (((xrfa.student_id = sc.student_id) AND (xrfa.academic_year_id = sc.academic_year_id) AND (xrfa.calculation_id = '958b952c-2e7f-11f0-b4b6-0f8c2c07f33e'::uuid))))
     LEFT JOIN public.acorn_university_student_codes co ON (((co.student_id = sc.student_id) AND co.current)))
     LEFT JOIN public.acorn_user_user_languages uul ON (((u.id = uul.user_id) AND uul.current)))
     LEFT JOIN public.acorn_user_languages l ON ((uul.language_id = l.id)));


ALTER VIEW public.acorn_exam_certificates OWNER TO university;

--
-- Name: VIEW acorn_exam_certificates; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_exam_certificates IS 'batch-print: true
order: 1010
show-sorting: false
default-sort: id
labels:
  en: Certificate Information
  ku: Bawername agahî
  ar: معلومات الشهادة
labels-plural:
  en: Certificate Informations
  ku: Bawername agahîyên
  ar: معلومات الشهادة
labels-from:
  - acorn_university_students
  - acorn_user_users';


--
-- Name: COLUMN acorn_exam_certificates.id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.id IS 'sortable: true';


--
-- Name: COLUMN acorn_exam_certificates.student_user_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.student_user_id IS 'sortable: false
extra-foreign-key: 
  table: acorn_user_users
  comment:
    tab-location: 2
labels:
  en: Student User
labels-plural:
  en: Student Users
sql-select: acorn_user_users.name
searchable: true';


--
-- Name: COLUMN acorn_exam_certificates.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    tab-location: 2
    name-object: true
    invisible: true
    field-exclude: true
    labels:
      en: Certificate Information
      ku: Bawername agahî
      ar: معلومات الشهادة
    labels-plural:
      en: Certificate Informations
      ku: Bawername agahîyên
      ar: معلومات الشهادة
labels:
  en: Student
  ku: Xwendekar
  ar: طالب
labels-plural:
  en: Students
  ku: Xwendekarên
  ar: طالب
invisible: true
qrcode-object: true';


--
-- Name: COLUMN acorn_exam_certificates.student_code; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.student_code IS 'sortable: false
sql-select: acorn_exam_certificates.student_code';


--
-- Name: COLUMN acorn_exam_certificates.academic_year_semester_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.academic_year_semester_id IS 'extra-foreign-key: 
  table: acorn_university_academic_year_semesters
  comment:
    tab-location: 2
    name-object: true
labels:
  en: Academic Year Semester
labels-plural:
  en: Academic Year Semesters
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true
    name-object: true
	can-filter: true
	global-scope: to
labels:
  en: Academic Year
labels-plural:
  en: Academic Years
css-classes-column:
  - tablet
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.course_user_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.course_user_group_id IS 'extra-foreign-key: 
  table: acorn_user_user_groups
  comment:
    tab-location: 2
    can-filter: true
    name-object: true
filter-conditions: >
            student_id in(
              select s.id from acorn_university_students s
              inner join acorn_user_user_group_version ugv on s.user_id = ugv.user_id
              inner join acorn_user_user_group_versions ugvs on ugv.user_group_version_id = ugvs.id
              where ugvs.user_group_id in(:filtered)
            )
labels:
  en: Course
labels-plural:
  en: Courses
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.organisation_user_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.organisation_user_group_id IS 'extra-foreign-key: 
  table: acorn_user_user_groups
  comment:
    tab-location: 2
	can-filter: true
    name-object: true
labels:
  en: Organisation
labels-plural:
  en: Organisations
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.course_id IS 'extra-foreign-key: 
  table: acorn_university_courses
  comment:
    tab-location: 2
    hidden: true
labels:
  en: Course
labels-plural:
  en: Courses
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.course_code; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.course_code IS 'sortable: false
sql-select: acorn_exam_certificates.course_code
labels:
  en: Course Code
  ku: Kode kors
labels-plural:
  en: Courses
  ku: Kode korsên
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.course_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.course_type_id IS 'extra-foreign-key: 
  table: acorn_university_course_types
  comment:
    tab-location: 2
	can-filter: true
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.exam_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.exam_id IS 'extra-foreign-key: 
  table: acorn_exam_exams
  comment:
    tab-location: 2
    can-filter: true
    field-exclude: true
    column-exclude: true
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.scores; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.scores IS 'list-editable: delete-on-null
type-editable: number
labels:
  en: Material Score
labels-plural:
  en: Materials Scores
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.score_names; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.score_names IS 'read-only: true
column-type: partial
column-partial: record_list_editable
type-editable: string
invisible: true
labels:
  en: Material Score name
labels-plural:
  en: Materials Score names
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.sum_score_name_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.sum_score_name_id IS 'extra-foreign-key: 
  table: acorn_exam_score_names
  comment:
    tab-location: 2
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.sum_score_name_suffix_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.sum_score_name_suffix_id IS 'extra-foreign-key: 
  table: acorn_exam_score_names
  comment:
    tab-location: 2
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.passed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.passed IS 'column-partial: tick
column-type: partial
css-classes-column:
  - show-cross
filters:
  passed:
    label: acorn.exam::lang.models.result.passed
    type: checkbox
    conditions: passed
  failed:
    label: acorn.exam::lang.models.result.not_passed
    type: checkbox
    conditions: not passed
labels:
  en: Course Passed
  ku: Kors Serket
labels-plural:
  en: Course Passes
  ku: Kors Serketên
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.result; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.result IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true
labels:
  en: Result
  ku: Encam
labels-plural:
  en: Results
  ku: Encamên
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.bakeloria_final_mark; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.bakeloria_final_mark IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true
labels:
  en: High School Final Mark
  ku: Bakeloria Ortê dawî
labels-plural:
  en: High School Final Mark
  ku: Bakeloria Ortên dawî
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.bakeloria_passed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.bakeloria_passed IS 'column-partial: tick
column-type: partial
css-classes-column:
  - show-cross
filters:
  bakeloria_passed:
    label: acorn.exam::lang.models.certificate.bakeloria_passed
    type: checkbox
    conditions: bakeloria_passed
  bakeloria_not_passed:
    label: acorn.exam::lang.models.certificate.bakeloria_not_passed
    type: checkbox
    conditions: not bakeloria_passed
extra-translations:
  bakeloria_not_passed:
    en: High-School failed
    ku: Bakeloria binket
labels:
  en: High-School Passed
  ku: Bakeloria Serket
labels-plural:
  en: High-School Passes
  ku: Bakeloria Serketên
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.primary_language_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.primary_language_id IS 'extra-foreign-key: 
  table: acorn_user_languages
  comment:
    tab-location: 2
	can-filter: true
labels:
  en: Primary Language
labels-plural:
  en: Primary Languages
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.legacy_import_student_type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.legacy_import_student_type IS 'filters:
  legacy_import_student_type:
    label: acorn.exam::lang.models.certificate.legacy_import_student_type
    type: group
    options:
      regular: acorn.exam::lang.models.certificate.regular
      irregular: acorn.exam::lang.models.certificate.irregular
    conditions: legacy_import_student_type in(:filtered)
extra-translations:
  regular_students:
    en: High-School failed
    ku: Bakeloria binket
  regular:
    en: Regular
    ku: Rêzbirêz
    ar: عادي
  irregular:
    en: Irregular
    ku: Serbixwe
    ar: غير منتظم
labels:
  en: Legacy Import Student Type
  ku: Legacy Import Cura Xwendekar
  ar: نوع الطالب المستورد القديم
labels-plural:
  en: Legacy Import Student Types
  ku: Legacy Import Cura Xwendekarên
  ar: نوع الطالب المستورد القديم
sortable: false';


--
-- Name: COLUMN acorn_exam_certificates.legacy_import_the_total; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.legacy_import_the_total IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_certificates.legacy_import_final_avg; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.legacy_import_final_avg IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true
labels:
  en: Legacy Import Final Average
  ku: Barkirine kevin Ortê dawî
labels-plural:
  en: Legacy Import Final Averages
  ku: Barkirine kevin Ortên dawî
';


--
-- Name: COLUMN acorn_exam_certificates.legacy_import_avg; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.legacy_import_avg IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true
labels:
  en: Legacy Import Average
  ku: Barkirine kevin Ort
labels-plural:
  en: Legacy Import Averages
  ku: Barkirine kevin Ortên
';


--
-- Name: COLUMN acorn_exam_certificates.legacy_import_correct; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.legacy_import_correct IS 'column-partial: tick
column-type: partial
css-classes-column:
  - show-cross
filters:
  legacy_import_correct:
    label: acorn.exam::lang.models.certificate.legacy_import_correct
    type: checkbox
    conditions: legacy_import_correct
  legacy_import_incorrect:
    label: acorn.exam::lang.models.certificate.legacy_import_incorrect
    type: checkbox
    conditions: not legacy_import_correct
extra-translations:
  legacy_import_incorrect:
    en: Legacy Import Incorrect
labels:
  en: Legacy Import Correct
  ku: Barkirine kevin Rast
labels-plural:
  en: Legacy Import Correct
  ku: Barkirine kevin Rastên
';


--
-- Name: COLUMN acorn_exam_certificates.legacy_import_passed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.legacy_import_passed IS 'column-partial: tick
column-type: partial
css-classes-column:
  - show-cross
labels:
  en: Legacy Import Passed
  ku: Barkirine kevin Serket
labels-plural:
  en: Legacy Import Passes
  ku: Barkirine kevin Serketên
';


--
-- Name: COLUMN acorn_exam_certificates.printed; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.printed IS 'column-exclude: true
filters:
  printed:
    label: acorn.university::lang.models.student.documents_printed
    type: checkbox
    conditions: not printed is null
  not_printed:
    label: acorn.university::lang.models.student.documents_not_printed
    type: checkbox
    conditions: printed is null';


--
-- Name: COLUMN acorn_exam_certificates.created_at; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.created_at IS 'can-filter: true';


--
-- Name: COLUMN acorn_exam_certificates.updated_at; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_certificates.updated_at IS 'can-filter: true';


--
-- Name: acorn_exam_papers; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_exam_papers AS
 SELECT (((((s.id)::text || '::'::text) || cm.id) || '::'::text) || q.id) AS id,
    s.id AS student_id,
    c.id AS course_id,
    m.id AS material_id,
    ex.id AS exam_id,
    q.id AS question_id,
    ('https://nabu.acorn.org/student/login/id/'::text || (ex.id)::text) AS qrcode,
    json_object_agg(public.fn_acorn_exam_token_name(VARIADIC ARRAY[an.name]), json_build_object('title', an.id, 'title_type', 'Acorn\Exam\Models\Answer', 'required', an.current) ORDER BY an.sort_order) AS answers
   FROM (((((((((((public.acorn_exam_exam_materials em
     JOIN public.acorn_exam_exams ex ON ((em.exam_id = ex.id)))
     JOIN public.acorn_exam_sections sx ON ((sx.exam_id = ex.id)))
     JOIN public.acorn_exam_questions q ON ((q.section_id = sx.id)))
     JOIN public.acorn_exam_answers an ON ((an.question_id = q.id)))
     JOIN public.acorn_university_course_materials cm ON ((cm.id = em.course_material_id)))
     JOIN public.acorn_university_materials m ON ((cm.material_id = m.id)))
     JOIN public.acorn_university_course_year_semesters cys ON ((cm.course_year_semester_id = cys.id)))
     JOIN public.acorn_university_courses c ON ((cys.course_id = c.id)))
     JOIN public.acorn_university_hierarchies hi ON ((hi.entity_id = cys.entity_id)))
     JOIN public.acorn_user_user_group_version ugv ON ((ugv.user_group_version_id = hi.user_group_version_id)))
     JOIN public.acorn_university_students s ON ((s.user_id = ugv.user_id)))
  GROUP BY s.id, cm.id, c.id, m.id, ex.id, q.id, ('https://nabu.acorn.org/student/login/id/'::text || (ex.id)::text)
  ORDER BY (((((s.id)::text || '::'::text) || cm.id) || '::'::text) || q.id);


ALTER VIEW public.acorn_exam_papers OWNER TO university;

--
-- Name: VIEW acorn_exam_papers; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_exam_papers IS 'batch-print: true
order: 10010
show-sorting: false
default-sort: id
labels:
  en: Exam paper
  ku: Kaxezê azmûnê
  ar: ورقة الامتحان
labels-plural:
  en: Exam papers
  ku: Kaxezên azmûnê
  ar: أوراق الامتحان
';


--
-- Name: COLUMN acorn_exam_papers.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_papers.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    name-object: true
    field-exclude: true
can-filter: true';


--
-- Name: COLUMN acorn_exam_papers.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_papers.course_id IS 'extra-foreign-key: 
  table: acorn_university_courses
  comment:
    name-object: true
    field-exclude: true
can-filter: true';


--
-- Name: COLUMN acorn_exam_papers.material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_papers.material_id IS 'extra-foreign-key: 
  table: acorn_university_materials
  comment:
    name-object: true
    field-exclude: true
can-filter: true';


--
-- Name: COLUMN acorn_exam_papers.exam_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_papers.exam_id IS 'extra-foreign-key: 
  table: acorn_exam_exams
  comment:
    name-object: true
    field-exclude: true
can-filter: true';


--
-- Name: COLUMN acorn_exam_papers.question_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_papers.question_id IS 'extra-foreign-key: 
  table: acorn_exam_questions
  comment:
    field-exclude: true
can-filter: true
';


--
-- Name: COLUMN acorn_exam_papers.answers; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_papers.answers IS 'list-editable: delete-on-null
type-editable: number
labels:
  en: Answer
labels-plural:
  en: Answers
';


--
-- Name: acorn_exam_token2s; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_exam_token2s AS
 SELECT (concat(s.id, '::', public.fn_acorn_exam_token_name(VARIADIC ARRAY['material'::character varying, (s.number)::character varying, ay.name, ugs.name, ct.name, m.name, mt.name, camt.name, ect.name, (
        CASE
            WHEN cm.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying])))::character varying AS id,
    public.fn_acorn_exam_token_name(VARIADIC ARRAY['material'::character varying, (s.number)::character varying, ay.name, ugs.name, ct.name, m.name, mt.name, camt.name, ect.name, (
        CASE
            WHEN cm.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying]) AS name,
    s.id AS student_id,
    ays.academic_year_id,
    NULL::uuid AS exam_id,
    cm.id AS course_material_id,
    cys.course_id,
    cm.material_id,
    camt.id AS calculation_id,
    NULL::uuid AS project_id,
    NULL::uuid AS interview_id,
    replace(replace(replace(replace(replace(replace((camt.expression)::text, ('<course>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ugs.name]))::text), ('<course-type>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ct.name]))::text), ('<material>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[m.name]))::text), ('<material-type>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[mt.name]))::text), ('<year>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ay.name]))::text), ('<student>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[(s.number)::character varying]))::text) AS expression,
    cm.minimum,
    cm.maximum,
    cm.required,
    'expression'::text AS expression_type,
    true AS needs_evaluate
   FROM ((((((((((((((((public.acorn_university_course_materials cm
     JOIN public.acorn_university_course_year_semesters cys ON ((cm.course_year_semester_id = cys.id)))
     JOIN public.acorn_university_academic_year_semesters ays ON ((cys.academic_year_semester_id = ays.id)))
     JOIN public.acorn_university_academic_years ay ON ((ay.id = ays.academic_year_id)))
     JOIN public.acorn_university_courses c ON ((cys.course_id = c.id)))
     JOIN public.acorn_university_course_types ct ON ((c.course_type_id = ct.id)))
     JOIN public.acorn_university_entities en ON ((cys.entity_id = en.id)))
     JOIN public.acorn_university_hierarchies hi ON (((hi.entity_id = en.id) AND (hi.academic_year_id = ay.id))))
     JOIN public.acorn_user_user_group_versions ugv ON ((hi.user_group_version_id = ugv.id)))
     JOIN public.acorn_user_user_groups ugs ON ((ugv.user_group_id = ugs.id)))
     JOIN public.acorn_user_user_group_version ug ON ((ugv.id = ug.user_group_version_id)))
     JOIN public.acorn_university_students s ON ((ug.user_id = s.user_id)))
     JOIN public.acorn_university_materials m ON ((cm.material_id = m.id)))
     JOIN public.acorn_university_material_types mt ON ((m.material_type_id = mt.id)))
     JOIN public.acorn_exam_calculation_material_types cmt ON (((mt.id = cmt.material_type_id) AND (cmt.academic_year_id = ays.academic_year_id))))
     JOIN public.acorn_exam_calculations camt ON ((cmt.calculation_id = camt.id)))
     JOIN public.acorn_exam_calculation_types ect ON ((camt.calculation_type_id = ect.id)))
UNION ALL
 SELECT (concat(s.id, '::', public.fn_acorn_exam_token_name(VARIADIC ARRAY['material'::character varying, (s.number)::character varying, ay.name, ugs.name, ct.name, m.name, mt.name, cacm.name, ect.name, (
        CASE
            WHEN cm.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying])))::character varying AS id,
    public.fn_acorn_exam_token_name(VARIADIC ARRAY['material'::character varying, (s.number)::character varying, ay.name, ugs.name, ct.name, m.name, mt.name, cacm.name, ect.name, (
        CASE
            WHEN cm.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying]) AS name,
    s.id AS student_id,
    ays.academic_year_id,
    NULL::uuid AS exam_id,
    cm.id AS course_material_id,
    cys.course_id,
    cm.material_id,
    cacm.id AS calculation_id,
    NULL::uuid AS project_id,
    NULL::uuid AS interview_id,
    replace(replace(replace(replace(replace(replace((cacm.expression)::text, ('<course>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ugs.name]))::text), ('<course-type>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ct.name]))::text), ('<material>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[m.name]))::text), ('<material-type>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[mt.name]))::text), ('<year>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ay.name]))::text), ('<student>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[(s.number)::character varying]))::text) AS expression,
    cm.minimum,
    cm.maximum,
    cm.required,
    'expression'::text AS expression_type,
    true AS needs_evaluate
   FROM ((((((((((((((((public.acorn_university_course_materials cm
     JOIN public.acorn_university_course_year_semesters cys ON ((cm.course_year_semester_id = cys.id)))
     JOIN public.acorn_university_academic_year_semesters ays ON ((cys.academic_year_semester_id = ays.id)))
     JOIN public.acorn_university_academic_years ay ON ((ay.id = ays.academic_year_id)))
     JOIN public.acorn_university_courses c ON ((cys.course_id = c.id)))
     JOIN public.acorn_university_course_types ct ON ((c.course_type_id = ct.id)))
     JOIN public.acorn_university_entities en ON ((cys.entity_id = en.id)))
     JOIN public.acorn_university_hierarchies hi ON (((hi.entity_id = en.id) AND (hi.academic_year_id = ay.id))))
     JOIN public.acorn_user_user_group_versions ugv ON ((hi.user_group_version_id = ugv.id)))
     JOIN public.acorn_user_user_groups ugs ON ((ugv.user_group_id = ugs.id)))
     JOIN public.acorn_user_user_group_version ug ON ((ugv.id = ug.user_group_version_id)))
     JOIN public.acorn_university_students s ON ((ug.user_id = s.user_id)))
     JOIN public.acorn_university_materials m ON ((cm.material_id = m.id)))
     JOIN public.acorn_university_material_types mt ON ((m.material_type_id = mt.id)))
     JOIN public.acorn_exam_calculation_course_materials ccm ON (((ccm.course_material_id = cm.id) AND (ccm.academic_year_id = ays.academic_year_id))))
     JOIN public.acorn_exam_calculations cacm ON ((ccm.calculation_id = cacm.id)))
     JOIN public.acorn_exam_calculation_types ect ON ((cacm.calculation_type_id = ect.id)))
UNION ALL
 SELECT (concat(s.id, '::', public.fn_acorn_exam_token_name(VARIADIC ARRAY['course'::character varying, (s.number)::character varying, ay.name, ugs.name, cac.name, ect.name, (
        CASE
            WHEN cac.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying])))::character varying AS id,
    public.fn_acorn_exam_token_name(VARIADIC ARRAY['course'::character varying, (s.number)::character varying, ay.name, ugs.name, cac.name, ect.name, (
        CASE
            WHEN cac.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying]) AS name,
    s.id AS student_id,
    cc.academic_year_id,
    NULL::uuid AS exam_id,
    NULL::uuid AS course_material_id,
    c.id AS course_id,
    NULL::uuid AS material_id,
    cac.id AS calculation_id,
    NULL::uuid AS project_id,
    NULL::uuid AS interview_id,
    replace(replace(replace(replace((cac.expression)::text, ('<course>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ugs.name]))::text), ('<course-type>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ct.name]))::text), ('<year>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ay.name]))::text), ('<student>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[(s.number)::character varying]))::text) AS expression,
    COALESCE(cyt.minimum, cac.minimum) AS minimum,
    COALESCE(cyt.maximum, cac.maximum) AS maximum,
    COALESCE(cyt.required, cac.required) AS required,
    'expression'::text AS expression_type,
    true AS needs_evaluate
   FROM (((((((((((((public.acorn_university_courses c
     JOIN public.acorn_university_course_types ct ON ((c.course_type_id = ct.id)))
     JOIN public.acorn_university_course_year_semesters cys ON ((cys.course_id = c.id)))
     JOIN public.acorn_university_entities en ON ((cys.entity_id = en.id)))
     JOIN public.acorn_university_hierarchies hi ON ((hi.entity_id = en.id)))
     JOIN public.acorn_university_academic_years ay ON ((hi.academic_year_id = ay.id)))
     JOIN public.acorn_user_user_group_versions ugv ON ((hi.user_group_version_id = ugv.id)))
     JOIN public.acorn_user_user_groups ugs ON ((ugv.user_group_id = ugs.id)))
     JOIN public.acorn_user_user_group_version ug ON ((ugv.id = ug.user_group_version_id)))
     JOIN public.acorn_university_students s ON ((ug.user_id = s.user_id)))
     JOIN public.acorn_exam_calculation_courses cc ON (((c.id = cc.course_id) AND (cc.academic_year_id = ay.id))))
     JOIN public.acorn_exam_calculations cac ON ((cc.calculation_id = cac.id)))
     JOIN public.acorn_exam_calculation_types ect ON ((cac.calculation_type_id = ect.id)))
     LEFT JOIN public.acorn_university_course_plans cyt ON (((c.id = cyt.course_id) AND (ay.id = cyt.enrollment_academic_year_id))))
UNION ALL
 SELECT (concat(s.id, '::', public.fn_acorn_exam_token_name(VARIADIC ARRAY['course'::character varying, (s.number)::character varying, ay.name, ugs.name, cact.name, ect.name, (
        CASE
            WHEN cact.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying])))::character varying AS id,
    public.fn_acorn_exam_token_name(VARIADIC ARRAY['course'::character varying, (s.number)::character varying, ay.name, ugs.name, cact.name, ect.name, (
        CASE
            WHEN cact.required THEN 'required'::text
            ELSE NULL::text
        END)::character varying, 'result'::character varying]) AS name,
    s.id AS student_id,
    cct.academic_year_id,
    NULL::uuid AS exam_id,
    NULL::uuid AS course_material_id,
    c.id AS course_id,
    NULL::uuid AS material_id,
    cact.id AS calculation_id,
    NULL::uuid AS project_id,
    NULL::uuid AS interview_id,
    replace(replace(replace(replace((cact.expression)::text, ('<course>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ugs.name]))::text), ('<course-type>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ct.name]))::text), ('<year>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ay.name]))::text), ('<student>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[(s.number)::character varying]))::text) AS expression,
    COALESCE(cyt.minimum, cact.minimum) AS minimum,
    COALESCE(cyt.maximum, cact.maximum) AS maximum,
    COALESCE(cyt.required, cact.required) AS required,
    'expression'::text AS expression_type,
    true AS needs_evaluate
   FROM (((((((((((((public.acorn_university_courses c
     JOIN public.acorn_university_course_types ct ON ((c.course_type_id = ct.id)))
     JOIN public.acorn_university_course_year_semesters cys ON ((cys.course_id = c.id)))
     JOIN public.acorn_university_entities en ON ((cys.entity_id = en.id)))
     JOIN public.acorn_university_hierarchies hi ON ((hi.entity_id = en.id)))
     JOIN public.acorn_university_academic_years ay ON ((hi.academic_year_id = ay.id)))
     JOIN public.acorn_user_user_group_versions ugv ON ((hi.user_group_version_id = ugv.id)))
     JOIN public.acorn_user_user_groups ugs ON ((ugv.user_group_id = ugs.id)))
     JOIN public.acorn_user_user_group_version ug ON ((ugv.id = ug.user_group_version_id)))
     JOIN public.acorn_university_students s ON ((ug.user_id = s.user_id)))
     JOIN public.acorn_exam_calculation_course_types cct ON (((cct.course_type_id = c.course_type_id) AND (cct.academic_year_id = ay.id))))
     JOIN public.acorn_exam_calculations cact ON ((cct.calculation_id = cact.id)))
     JOIN public.acorn_exam_calculation_types ect ON ((cact.calculation_type_id = ect.id)))
     LEFT JOIN public.acorn_university_course_plans cyt ON (((c.id = cyt.course_id) AND (ay.id = cyt.enrollment_academic_year_id))))
UNION ALL
 SELECT (concat(s.id, '::', public.fn_acorn_exam_token_name(VARIADIC ARRAY['calculation'::character varying, (s.number)::character varying, ay.name, c.name, ect.name])))::character varying AS id,
    public.fn_acorn_exam_token_name(VARIADIC ARRAY['calculation'::character varying, (s.number)::character varying, ay.name, c.name, ect.name]) AS name,
    s.id AS student_id,
    ay.id AS academic_year_id,
    NULL::uuid AS exam_id,
    NULL::uuid AS course_material_id,
    NULL::uuid AS course_id,
    NULL::uuid AS material_id,
    c.id AS calculation_id,
    NULL::uuid AS project_id,
    NULL::uuid AS interview_id,
    replace(replace((c.expression)::text, ('<student>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[(s.number)::character varying]))::text), ('<year>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ay.name]))::text) AS expression,
    c.minimum,
    c.maximum,
    c.required,
    'expression'::text AS expression_type,
    true AS needs_evaluate
   FROM (public.acorn_exam_calculations c
     JOIN public.acorn_exam_calculation_types ect ON ((c.calculation_type_id = ect.id))),
    public.acorn_university_students s,
    public.acorn_university_academic_years ay
  WHERE (NOT (replace(replace((c.expression)::text, ('<student>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[(s.number)::character varying]))::text), ('<year>'::character varying)::text, (public.fn_acorn_exam_token_name(VARIADIC ARRAY[ay.name]))::text) ~~ '%<%'::text));


ALTER VIEW public.acorn_exam_token2s OWNER TO university;

--
-- Name: VIEW acorn_exam_token2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_exam_token2s IS 'menu: false
labels:
  en: Student Calculation
  ku: Dinirxinên Xwendekar
labels-plural:
  en: Student Calculations
  ku: Dinirxinên Xwendekarên';


--
-- Name: COLUMN acorn_exam_token2s.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true
    hidden: true
    labels:
      en: Calculation
      ku: Algorithm
    labels-plural:
      en: Calculations
      ku: Algorithmên';


--
-- Name: COLUMN acorn_exam_token2s.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_exam_token2s.exam_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.exam_id IS 'extra-foreign-key: 
  table: acorn_exam_exams
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_exam_token2s.course_material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.course_material_id IS 'extra-foreign-key: 
  table: acorn_university_course_materials
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_exam_token2s.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.course_id IS 'extra-foreign-key: 
  table: acorn_university_courses
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true
    no-relation-manager: true';


--
-- Name: COLUMN acorn_exam_token2s.material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.material_id IS 'extra-foreign-key: 
  table: acorn_university_materials
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true
    no-relation-manager: true';


--
-- Name: COLUMN acorn_exam_token2s.calculation_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.calculation_id IS 'extra-foreign-key: 
  table: acorn_exam_calculations
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_exam_token2s.project_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.project_id IS 'extra-foreign-key: 
  table: acorn_university_projects
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true
    no-relation-manager: true';


--
-- Name: COLUMN acorn_exam_token2s.interview_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.interview_id IS 'extra-foreign-key: 
  table: acorn_exam_interviews
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_exam_token2s.expression; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.expression IS 'column-type: partial
column-partial: expression';


--
-- Name: COLUMN acorn_exam_token2s.minimum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.minimum IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_token2s.maximum; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.maximum IS 'column-partial: number
column-type: partial
format: "%.2f%%"
bar: true';


--
-- Name: COLUMN acorn_exam_token2s.expression_type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_exam_token2s.expression_type IS 'filters:
  expression_type:
    label: acorn.exam::lang.models.result.expression_type
    conditions: expression_type in(:filtered)
    options:
      data: Data
      expression: Expression
      formulae: Formulae';


--
-- Name: acorn_location_locations; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_locations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    address_id uuid NOT NULL,
    name character varying(2048) NOT NULL,
    description text,
    image character varying(2048),
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    created_by_user_id uuid,
    response text,
    type_id uuid
);


ALTER TABLE public.acorn_location_locations OWNER TO university;

--
-- Name: acorn_location_user_addresses; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_user_addresses (
    user_id uuid NOT NULL,
    address_id uuid NOT NULL,
    current boolean DEFAULT true NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    address_type_id uuid,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE public.acorn_location_user_addresses OWNER TO university;

--
-- Name: acorn_location_address_links; Type: VIEW; Schema: public; Owner: createsystem
--

CREATE VIEW public.acorn_location_address_links AS
 SELECT acorn_location_user_addresses.address_id AS event_id,
    'public'::character varying(2048) AS schema,
    'acorn_location_user_addresses'::character varying(2048) AS "table",
    'address_id'::character varying(2048) AS "column",
    'Acorn\Location\Models\UserAddress'::text AS model_type,
    acorn_location_user_addresses.id AS model_id
   FROM public.acorn_location_user_addresses
UNION ALL
 SELECT acorn_location_locations.address_id AS event_id,
    'public'::character varying(2048) AS schema,
    'acorn_location_locations'::character varying(2048) AS "table",
    'address_id'::character varying(2048) AS "column",
    'Acorn\Location\Models\Location'::text AS model_type,
    acorn_location_locations.id AS model_id
   FROM public.acorn_location_locations;


ALTER VIEW public.acorn_location_address_links OWNER TO createsystem;

--
-- Name: acorn_location_address_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_address_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    number character varying(1024),
    image character varying(2048),
    description text,
    server_id uuid NOT NULL,
    created_by_user_id uuid,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    import_source text,
    response text
);


ALTER TABLE public.acorn_location_address_types OWNER TO university;

--
-- Name: acorn_location_addresses; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_addresses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    number character varying(1024),
    image character varying(2048),
    description text,
    area_id uuid NOT NULL,
    gps_id uuid,
    server_id uuid NOT NULL,
    created_by_user_id uuid,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    response text,
    lookup_id uuid,
    import_source text
);


ALTER TABLE public.acorn_location_addresses OWNER TO university;

--
-- Name: acorn_location_area_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_area_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    created_by_user_id uuid,
    response text
);


ALTER TABLE public.acorn_location_area_types OWNER TO university;

--
-- Name: acorn_location_areas; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_areas (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    area_type_id uuid NOT NULL,
    parent_id uuid,
    gps_id uuid,
    server_id uuid NOT NULL,
    version integer DEFAULT 1 NOT NULL,
    is_current_version boolean DEFAULT true NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    created_by_user_id uuid,
    response text,
    import_source text,
    nest_right integer,
    nest_left integer,
    nest_depth integer
);


ALTER TABLE public.acorn_location_areas OWNER TO university;

--
-- Name: acorn_location_gps; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_gps (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    longitude double precision,
    latitude double precision,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    created_by_user_id uuid,
    response text
);


ALTER TABLE public.acorn_location_gps OWNER TO university;

--
-- Name: acorn_location_user_group_location; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_user_group_location (
    user_group_id uuid NOT NULL,
    location_id uuid NOT NULL,
    current boolean DEFAULT true NOT NULL
);


ALTER TABLE public.acorn_location_user_group_location OWNER TO university;

--
-- Name: acorn_servers; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_servers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    hostname character varying(1024) DEFAULT 'hostname()'::character varying NOT NULL,
    domain character varying(1024),
    response text,
    created_at timestamp(0) without time zone DEFAULT '2025-04-03 08:42:56.917994'::timestamp without time zone NOT NULL,
    name character varying(1024) GENERATED ALWAYS AS (hostname) STORED,
    location_id uuid
);


ALTER TABLE public.acorn_servers OWNER TO university;

--
-- Name: acorn_location_location_links; Type: VIEW; Schema: public; Owner: createsystem
--

CREATE VIEW public.acorn_location_location_links AS
 SELECT acorn_university_entities.location_id AS event_id,
    'public'::character varying(2048) AS schema,
    'acorn_university_entities'::character varying(2048) AS "table",
    'location_id'::character varying(2048) AS "column",
    'Acorn\University\Models\Entity'::text AS model_type,
    acorn_university_entities.id AS model_id
   FROM public.acorn_university_entities
UNION ALL
 SELECT acorn_exam_centres.location_id AS event_id,
    'public'::character varying(2048) AS schema,
    'acorn_exam_centres'::character varying(2048) AS "table",
    'location_id'::character varying(2048) AS "column",
    'Acorn\Exam\Models\Centre'::text AS model_type,
    acorn_exam_centres.id AS model_id
   FROM public.acorn_exam_centres
UNION ALL
 SELECT acorn_location_user_group_location.location_id AS event_id,
    'public'::character varying(2048) AS schema,
    'acorn_location_user_group_location'::character varying(2048) AS "table",
    'location_id'::character varying(2048) AS "column",
    'Acorn\Location\Models\UserGroupLocation'::text AS model_type,
    NULL::uuid AS model_id
   FROM public.acorn_location_user_group_location
UNION ALL
 SELECT acorn_servers.location_id AS event_id,
    'public'::character varying(2048) AS schema,
    'acorn_servers'::character varying(2048) AS "table",
    'location_id'::character varying(2048) AS "column",
    'Acorn\\Models\Server'::text AS model_type,
    acorn_servers.id AS model_id
   FROM public.acorn_servers;


ALTER VIEW public.acorn_location_location_links OWNER TO createsystem;

--
-- Name: acorn_location_lookup; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_lookup (
    id uuid NOT NULL,
    address character varying(1024) NOT NULL,
    city character varying(1024) NOT NULL,
    zip character varying(1024) NOT NULL,
    country_code character varying(1024) NOT NULL,
    state_code character varying(1024) NOT NULL,
    latitude character varying(1024) NOT NULL,
    longitude character varying(1024) NOT NULL,
    vicinity character varying(1024) NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.acorn_location_lookup OWNER TO university;

--
-- Name: acorn_location_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_location_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL,
    description text,
    parent_type_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    created_by_user_id uuid,
    response text,
    colour character varying(1024),
    image character varying(1024)
);


ALTER TABLE public.acorn_location_types OWNER TO university;

--
-- Name: acorn_messaging_action; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_action (
    message_id uuid NOT NULL,
    action character varying(1024) NOT NULL,
    settings text NOT NULL,
    status uuid NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_action OWNER TO university;

--
-- Name: acorn_messaging_label; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_label (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255),
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_label OWNER TO university;

--
-- Name: acorn_messaging_message; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_message (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_from_id uuid NOT NULL,
    subject character varying(2048) NOT NULL,
    body text NOT NULL,
    labels character varying(2048),
    "externalID" character varying(2048),
    source character varying(2048),
    mime_type character varying(64),
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_message OWNER TO university;

--
-- Name: TABLE acorn_messaging_message; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_messaging_message IS 'table-type: content';


--
-- Name: acorn_messaging_message_instance; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_message_instance (
    message_id uuid NOT NULL,
    instance_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT '2025-04-03 08:43:15.373287'::timestamp without time zone NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_message_instance OWNER TO university;

--
-- Name: acorn_messaging_message_message; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_message_message (
    message1_id uuid NOT NULL,
    message2_id uuid NOT NULL,
    relationship integer NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_message_message OWNER TO university;

--
-- Name: acorn_messaging_message_user; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_message_user (
    message_id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_message_user OWNER TO university;

--
-- Name: acorn_messaging_message_user_group; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_message_user_group (
    message_id uuid NOT NULL,
    user_group_id uuid NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_message_user_group OWNER TO university;

--
-- Name: acorn_messaging_status; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_status (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    description character varying(255),
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_status OWNER TO university;

--
-- Name: TABLE acorn_messaging_status; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_messaging_status IS 'table-type: content';


--
-- Name: acorn_messaging_user_message_status; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_messaging_user_message_status (
    user_id uuid NOT NULL,
    message_id uuid NOT NULL,
    status_id uuid NOT NULL,
    value character varying(255),
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_messaging_user_message_status OWNER TO university;

--
-- Name: TABLE acorn_messaging_user_message_status; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_messaging_user_message_status IS 'table-type: content';


--
-- Name: acorn_names; Type: VIEW; Schema: public; Owner: createsystem
--

CREATE VIEW public.acorn_names AS
 SELECT 'Acorn\University\Models\Hierarchy'::text AS model_type,
    acorn_university_hierarchies.id AS model_id,
    'acorn_university_hierarchies'::text AS "table",
    'description'::text AS field,
    acorn_university_hierarchies.description AS content
   FROM public.acorn_university_hierarchies
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Enrollment'::text AS model_type,
    acorn_enrollment_enrollments.id AS model_id,
    'acorn_enrollment_enrollments'::text AS "table",
    'name'::text AS field,
    (acorn_enrollment_enrollments.name)::text AS content
   FROM public.acorn_enrollment_enrollments
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Enrollment'::text AS model_type,
    acorn_enrollment_enrollments.id AS model_id,
    'acorn_enrollment_enrollments'::text AS "table",
    'description'::text AS field,
    acorn_enrollment_enrollments.description AS content
   FROM public.acorn_enrollment_enrollments
UNION ALL
 SELECT 'Acorn\Exam\Models\Exam'::text AS model_type,
    acorn_exam_exams.id AS model_id,
    'acorn_exam_exams'::text AS "table",
    'name'::text AS field,
    (acorn_exam_exams.name)::text AS content
   FROM public.acorn_exam_exams
UNION ALL
 SELECT 'Acorn\Exam\Models\Exam'::text AS model_type,
    acorn_exam_exams.id AS model_id,
    'acorn_exam_exams'::text AS "table",
    'description'::text AS field,
    acorn_exam_exams.description AS content
   FROM public.acorn_exam_exams
UNION ALL
 SELECT 'Acorn\Exam\Models\Centre'::text AS model_type,
    acorn_exam_centres.id AS model_id,
    'acorn_exam_centres'::text AS "table",
    'name'::text AS field,
    (acorn_exam_centres.name)::text AS content
   FROM public.acorn_exam_centres
UNION ALL
 SELECT 'Acorn\Exam\Models\Centre'::text AS model_type,
    acorn_exam_centres.id AS model_id,
    'acorn_exam_centres'::text AS "table",
    'description'::text AS field,
    acorn_exam_centres.description AS content
   FROM public.acorn_exam_centres
UNION ALL
 SELECT 'Acorn\University\Models\CourseSpecialization'::text AS model_type,
    acorn_university_course_specializations.id AS model_id,
    'acorn_university_course_specializations'::text AS "table",
    'name'::text AS field,
    (acorn_university_course_specializations.name)::text AS content
   FROM public.acorn_university_course_specializations
UNION ALL
 SELECT 'Acorn\University\Models\CourseSpecialization'::text AS model_type,
    acorn_university_course_specializations.id AS model_id,
    'acorn_university_course_specializations'::text AS "table",
    'description'::text AS field,
    acorn_university_course_specializations.description AS content
   FROM public.acorn_university_course_specializations
UNION ALL
 SELECT 'Acorn\University\Models\Material'::text AS model_type,
    acorn_university_materials.id AS model_id,
    'acorn_university_materials'::text AS "table",
    'name'::text AS field,
    (acorn_university_materials.name)::text AS content
   FROM public.acorn_university_materials
UNION ALL
 SELECT 'Acorn\University\Models\Material'::text AS model_type,
    acorn_university_materials.id AS model_id,
    'acorn_university_materials'::text AS "table",
    'description'::text AS field,
    acorn_university_materials.description AS content
   FROM public.acorn_university_materials
UNION ALL
 SELECT 'Acorn\University\Models\MaterialTopic'::text AS model_type,
    acorn_university_material_topics.id AS model_id,
    'acorn_university_material_topics'::text AS "table",
    'name'::text AS field,
    (acorn_university_material_topics.name)::text AS content
   FROM public.acorn_university_material_topics
UNION ALL
 SELECT 'Acorn\University\Models\MaterialTopic'::text AS model_type,
    acorn_university_material_topics.id AS model_id,
    'acorn_university_material_topics'::text AS "table",
    'description'::text AS field,
    acorn_university_material_topics.description AS content
   FROM public.acorn_university_material_topics
UNION ALL
 SELECT 'Acorn\Exam\Models\Instance'::text AS model_type,
    acorn_exam_instances.id AS model_id,
    'acorn_exam_instances'::text AS "table",
    'name'::text AS field,
    (acorn_exam_instances.name)::text AS content
   FROM public.acorn_exam_instances
UNION ALL
 SELECT 'Acorn\Exam\Models\Instance'::text AS model_type,
    acorn_exam_instances.id AS model_id,
    'acorn_exam_instances'::text AS "table",
    'description'::text AS field,
    acorn_exam_instances.description AS content
   FROM public.acorn_exam_instances
UNION ALL
 SELECT 'Acorn\Exam\Models\Interview'::text AS model_type,
    acorn_exam_interviews.id AS model_id,
    'acorn_exam_interviews'::text AS "table",
    'name'::text AS field,
    (acorn_exam_interviews.name)::text AS content
   FROM public.acorn_exam_interviews
UNION ALL
 SELECT 'Acorn\Exam\Models\Interview'::text AS model_type,
    acorn_exam_interviews.id AS model_id,
    'acorn_exam_interviews'::text AS "table",
    'description'::text AS field,
    acorn_exam_interviews.description AS content
   FROM public.acorn_exam_interviews
UNION ALL
 SELECT 'Acorn\Enrollment\Models\CourseEntryRequirement'::text AS model_type,
    acorn_enrollment_course_entry_requirements.id AS model_id,
    'acorn_enrollment_course_entry_requirements'::text AS "table",
    'description'::text AS field,
    acorn_enrollment_course_entry_requirements.description AS content
   FROM public.acorn_enrollment_course_entry_requirements
UNION ALL
 SELECT 'Acorn\University\Models\StudentStatus'::text AS model_type,
    acorn_university_student_statuses.id AS model_id,
    'acorn_university_student_statuses'::text AS "table",
    'name'::text AS field,
    (acorn_university_student_statuses.name)::text AS content
   FROM public.acorn_university_student_statuses
UNION ALL
 SELECT 'Acorn\University\Models\StudentStatus'::text AS model_type,
    acorn_university_student_statuses.id AS model_id,
    'acorn_university_student_statuses'::text AS "table",
    'description'::text AS field,
    acorn_university_student_statuses.description AS content
   FROM public.acorn_university_student_statuses
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Desire'::text AS model_type,
    acorn_enrollment_desires.id AS model_id,
    'acorn_enrollment_desires'::text AS "table",
    'description'::text AS field,
    acorn_enrollment_desires.description AS content
   FROM public.acorn_enrollment_desires
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYear'::text AS model_type,
    acorn_university_academic_years.id AS model_id,
    'acorn_university_academic_years'::text AS "table",
    'name'::text AS field,
    (acorn_university_academic_years.name)::text AS content
   FROM public.acorn_university_academic_years
UNION ALL
 SELECT 'Acorn\University\Models\AcademicYear'::text AS model_type,
    acorn_university_academic_years.id AS model_id,
    'acorn_university_academic_years'::text AS "table",
    'description'::text AS field,
    acorn_university_academic_years.description AS content
   FROM public.acorn_university_academic_years
UNION ALL
 SELECT 'Acorn\University\Models\CourseYear'::text AS model_type,
    acorn_university_course_years.id AS model_id,
    'acorn_university_course_years'::text AS "table",
    'name'::text AS field,
    (acorn_university_course_years.name)::text AS content
   FROM public.acorn_university_course_years
UNION ALL
 SELECT 'Acorn\University\Models\CourseYear'::text AS model_type,
    acorn_university_course_years.id AS model_id,
    'acorn_university_course_years'::text AS "table",
    'description'::text AS field,
    acorn_university_course_years.description AS content
   FROM public.acorn_university_course_years
UNION ALL
 SELECT 'Acorn\University\Models\SemesterGroup'::text AS model_type,
    acorn_university_semester_groups.id AS model_id,
    'acorn_university_semester_groups'::text AS "table",
    'name'::text AS field,
    (acorn_university_semester_groups.name)::text AS content
   FROM public.acorn_university_semester_groups
UNION ALL
 SELECT 'Acorn\University\Models\SemesterGroup'::text AS model_type,
    acorn_university_semester_groups.id AS model_id,
    'acorn_university_semester_groups'::text AS "table",
    'description'::text AS field,
    acorn_university_semester_groups.description AS content
   FROM public.acorn_university_semester_groups
UNION ALL
 SELECT 'Acorn\University\Models\Semester'::text AS model_type,
    acorn_university_semesters.id AS model_id,
    'acorn_university_semesters'::text AS "table",
    'name'::text AS field,
    (acorn_university_semesters.name)::text AS content
   FROM public.acorn_university_semesters
UNION ALL
 SELECT 'Acorn\University\Models\Semester'::text AS model_type,
    acorn_university_semesters.id AS model_id,
    'acorn_university_semesters'::text AS "table",
    'description'::text AS field,
    acorn_university_semesters.description AS content
   FROM public.acorn_university_semesters
UNION ALL
 SELECT 'Acorn\University\Models\DocumentType'::text AS model_type,
    acorn_university_document_types.id AS model_id,
    'acorn_university_document_types'::text AS "table",
    'name'::text AS field,
    (acorn_university_document_types.name)::text AS content
   FROM public.acorn_university_document_types
UNION ALL
 SELECT 'Acorn\University\Models\DocumentType'::text AS model_type,
    acorn_university_document_types.id AS model_id,
    'acorn_university_document_types'::text AS "table",
    'description'::text AS field,
    acorn_university_document_types.description AS content
   FROM public.acorn_university_document_types
UNION ALL
 SELECT 'Acorn\University\Models\CourseType'::text AS model_type,
    acorn_university_course_types.id AS model_id,
    'acorn_university_course_types'::text AS "table",
    'name'::text AS field,
    (acorn_university_course_types.name)::text AS content
   FROM public.acorn_university_course_types
UNION ALL
 SELECT 'Acorn\University\Models\CourseType'::text AS model_type,
    acorn_university_course_types.id AS model_id,
    'acorn_university_course_types'::text AS "table",
    'description'::text AS field,
    acorn_university_course_types.description AS content
   FROM public.acorn_university_course_types
UNION ALL
 SELECT 'Acorn\University\Models\MaterialType'::text AS model_type,
    acorn_university_material_types.id AS model_id,
    'acorn_university_material_types'::text AS "table",
    'name'::text AS field,
    (acorn_university_material_types.name)::text AS content
   FROM public.acorn_university_material_types
UNION ALL
 SELECT 'Acorn\University\Models\MaterialType'::text AS model_type,
    acorn_university_material_types.id AS model_id,
    'acorn_university_material_types'::text AS "table",
    'description'::text AS field,
    acorn_university_material_types.description AS content
   FROM public.acorn_university_material_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Type'::text AS model_type,
    acorn_exam_types.id AS model_id,
    'acorn_exam_types'::text AS "table",
    'name'::text AS field,
    (acorn_exam_types.name)::text AS content
   FROM public.acorn_exam_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Type'::text AS model_type,
    acorn_exam_types.id AS model_id,
    'acorn_exam_types'::text AS "table",
    'description'::text AS field,
    acorn_exam_types.description AS content
   FROM public.acorn_exam_types
UNION ALL
 SELECT 'Acorn\Exam\Models\Calculation'::text AS model_type,
    acorn_exam_calculations.id AS model_id,
    'acorn_exam_calculations'::text AS "table",
    'name'::text AS field,
    (acorn_exam_calculations.name)::text AS content
   FROM public.acorn_exam_calculations
UNION ALL
 SELECT 'Acorn\Exam\Models\Calculation'::text AS model_type,
    acorn_exam_calculations.id AS model_id,
    'acorn_exam_calculations'::text AS "table",
    'description'::text AS field,
    acorn_exam_calculations.description AS content
   FROM public.acorn_exam_calculations
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationType'::text AS model_type,
    acorn_exam_calculation_types.id AS model_id,
    'acorn_exam_calculation_types'::text AS "table",
    'name'::text AS field,
    (acorn_exam_calculation_types.name)::text AS content
   FROM public.acorn_exam_calculation_types
UNION ALL
 SELECT 'Acorn\Exam\Models\CalculationType'::text AS model_type,
    acorn_exam_calculation_types.id AS model_id,
    'acorn_exam_calculation_types'::text AS "table",
    'description'::text AS field,
    acorn_exam_calculation_types.description AS content
   FROM public.acorn_exam_calculation_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentIdentity'::text AS model_type,
    acorn_university_student_identities.id AS model_id,
    'acorn_university_student_identities'::text AS "table",
    'name'::text AS field,
    (acorn_university_student_identities.name)::text AS content
   FROM public.acorn_university_student_identities
UNION ALL
 SELECT 'Acorn\University\Models\StudentIdentity'::text AS model_type,
    acorn_university_student_identities.id AS model_id,
    'acorn_university_student_identities'::text AS "table",
    'description'::text AS field,
    acorn_university_student_identities.description AS content
   FROM public.acorn_university_student_identities
UNION ALL
 SELECT 'Acorn\University\Models\StudentDocument'::text AS model_type,
    acorn_university_student_documents.id AS model_id,
    'acorn_university_student_documents'::text AS "table",
    'name'::text AS field,
    (acorn_university_student_documents.name)::text AS content
   FROM public.acorn_university_student_documents
UNION ALL
 SELECT 'Acorn\University\Models\StudentDocument'::text AS model_type,
    acorn_university_student_documents.id AS model_id,
    'acorn_university_student_documents'::text AS "table",
    'description'::text AS field,
    acorn_university_student_documents.description AS content
   FROM public.acorn_university_student_documents
UNION ALL
 SELECT 'Acorn\University\Models\ProjectStudent'::text AS model_type,
    acorn_university_project_students.id AS model_id,
    'acorn_university_project_students'::text AS "table",
    'name'::text AS field,
    (acorn_university_project_students.name)::text AS content
   FROM public.acorn_university_project_students
UNION ALL
 SELECT 'Acorn\University\Models\ProjectStudent'::text AS model_type,
    acorn_university_project_students.id AS model_id,
    'acorn_university_project_students'::text AS "table",
    'description'::text AS field,
    acorn_university_project_students.description AS content
   FROM public.acorn_university_project_students
UNION ALL
 SELECT 'Acorn\University\Models\IdentityType'::text AS model_type,
    acorn_university_identity_types.id AS model_id,
    'acorn_university_identity_types'::text AS "table",
    'name'::text AS field,
    (acorn_university_identity_types.name)::text AS content
   FROM public.acorn_university_identity_types
UNION ALL
 SELECT 'Acorn\University\Models\IdentityType'::text AS model_type,
    acorn_university_identity_types.id AS model_id,
    'acorn_university_identity_types'::text AS "table",
    'description'::text AS field,
    acorn_university_identity_types.description AS content
   FROM public.acorn_university_identity_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentNote'::text AS model_type,
    acorn_university_student_notes.id AS model_id,
    'acorn_university_student_notes'::text AS "table",
    'name'::text AS field,
    (acorn_university_student_notes.name)::text AS content
   FROM public.acorn_university_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentNote'::text AS model_type,
    acorn_university_student_notes.id AS model_id,
    'acorn_university_student_notes'::text AS "table",
    'description'::text AS field,
    acorn_university_student_notes.description AS content
   FROM public.acorn_university_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentCode'::text AS model_type,
    acorn_university_student_codes.id AS model_id,
    'acorn_university_student_codes'::text AS "table",
    'name'::text AS field,
    (acorn_university_student_codes.name)::text AS content
   FROM public.acorn_university_student_codes
UNION ALL
 SELECT 'Acorn\University\Models\StudentCode'::text AS model_type,
    acorn_university_student_codes.id AS model_id,
    'acorn_university_student_codes'::text AS "table",
    'description'::text AS field,
    acorn_university_student_codes.description AS content
   FROM public.acorn_university_student_codes
UNION ALL
 SELECT 'Acorn\Enrollment\Models\StudentNote'::text AS model_type,
    acorn_enrollment_student_notes.id AS model_id,
    'acorn_enrollment_student_notes'::text AS "table",
    'name'::text AS field,
    (acorn_enrollment_student_notes.name)::text AS content
   FROM public.acorn_enrollment_student_notes
UNION ALL
 SELECT 'Acorn\Enrollment\Models\StudentNote'::text AS model_type,
    acorn_enrollment_student_notes.id AS model_id,
    'acorn_enrollment_student_notes'::text AS "table",
    'description'::text AS field,
    acorn_enrollment_student_notes.description AS content
   FROM public.acorn_enrollment_student_notes
UNION ALL
 SELECT 'Acorn\University\Models\StudentType'::text AS model_type,
    acorn_university_student_types.id AS model_id,
    'acorn_university_student_types'::text AS "table",
    'name'::text AS field,
    (acorn_university_student_types.name)::text AS content
   FROM public.acorn_university_student_types
UNION ALL
 SELECT 'Acorn\University\Models\StudentType'::text AS model_type,
    acorn_university_student_types.id AS model_id,
    'acorn_university_student_types'::text AS "table",
    'description'::text AS field,
    acorn_university_student_types.description AS content
   FROM public.acorn_university_student_types
UNION ALL
 SELECT 'Acorn\University\Models\Project'::text AS model_type,
    acorn_university_projects.id AS model_id,
    'acorn_university_projects'::text AS "table",
    'name'::text AS field,
    (acorn_university_projects.name)::text AS content
   FROM public.acorn_university_projects
UNION ALL
 SELECT 'Acorn\University\Models\Project'::text AS model_type,
    acorn_university_projects.id AS model_id,
    'acorn_university_projects'::text AS "table",
    'description'::text AS field,
    acorn_university_projects.description AS content
   FROM public.acorn_university_projects
UNION ALL
 SELECT 'Acorn\Exam\Models\ScoreName'::text AS model_type,
    acorn_exam_score_names.id AS model_id,
    'acorn_exam_score_names'::text AS "table",
    'name'::text AS field,
    (acorn_exam_score_names.name)::text AS content
   FROM public.acorn_exam_score_names
UNION ALL
 SELECT 'Acorn\Exam\Models\ScoreName'::text AS model_type,
    acorn_exam_score_names.id AS model_id,
    'acorn_exam_score_names'::text AS "table",
    'description'::text AS field,
    acorn_exam_score_names.description AS content
   FROM public.acorn_exam_score_names
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Run'::text AS model_type,
    acorn_enrollment_runs.id AS model_id,
    'acorn_enrollment_runs'::text AS "table",
    'name'::text AS field,
    (acorn_enrollment_runs.name)::text AS content
   FROM public.acorn_enrollment_runs
UNION ALL
 SELECT 'Acorn\Enrollment\Models\Run'::text AS model_type,
    acorn_enrollment_runs.id AS model_id,
    'acorn_enrollment_runs'::text AS "table",
    'description'::text AS field,
    acorn_enrollment_runs.description AS content
   FROM public.acorn_enrollment_runs
UNION ALL
 SELECT 'Acorn\Exam\Models\Question'::text AS model_type,
    acorn_exam_questions.id AS model_id,
    'acorn_exam_questions'::text AS "table",
    'name'::text AS field,
    (acorn_exam_questions.name)::text AS content
   FROM public.acorn_exam_questions
UNION ALL
 SELECT 'Acorn\Exam\Models\Question'::text AS model_type,
    acorn_exam_questions.id AS model_id,
    'acorn_exam_questions'::text AS "table",
    'description'::text AS field,
    acorn_exam_questions.description AS content
   FROM public.acorn_exam_questions
UNION ALL
 SELECT 'Acorn\Exam\Models\Section'::text AS model_type,
    acorn_exam_sections.id AS model_id,
    'acorn_exam_sections'::text AS "table",
    'name'::text AS field,
    (acorn_exam_sections.name)::text AS content
   FROM public.acorn_exam_sections
UNION ALL
 SELECT 'Acorn\Exam\Models\Section'::text AS model_type,
    acorn_exam_sections.id AS model_id,
    'acorn_exam_sections'::text AS "table",
    'description'::text AS field,
    acorn_exam_sections.description AS content
   FROM public.acorn_exam_sections
UNION ALL
 SELECT 'Acorn\Exam\Models\Answer'::text AS model_type,
    acorn_exam_answers.id AS model_id,
    'acorn_exam_answers'::text AS "table",
    'name'::text AS field,
    (acorn_exam_answers.name)::text AS content
   FROM public.acorn_exam_answers
UNION ALL
 SELECT 'Acorn\Exam\Models\Answer'::text AS model_type,
    acorn_exam_answers.id AS model_id,
    'acorn_exam_answers'::text AS "table",
    'description'::text AS field,
    acorn_exam_answers.description AS content
   FROM public.acorn_exam_answers;


ALTER VIEW public.acorn_names OWNER TO createsystem;

--
-- Name: acorn_reporting_reports; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_reporting_reports (
    id integer NOT NULL,
    settings text NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_reporting_reports OWNER TO university;

--
-- Name: acorn_reporting_reports_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.acorn_reporting_reports_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.acorn_reporting_reports_id_seq OWNER TO university;

--
-- Name: acorn_reporting_reports_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.acorn_reporting_reports_id_seq OWNED BY public.acorn_reporting_reports.id;


--
-- Name: acorn_university_course_language; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_course_language (
    course_id uuid NOT NULL,
    language_id uuid NOT NULL
);


ALTER TABLE public.acorn_university_course_language OWNER TO university;

--
-- Name: TABLE acorn_university_course_language; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_course_language IS 'labels:
  en: Course language
  ku: Zimane Kors
  ar: لغة الدورة
labels-plural:
  en: Course languages
  ku: Zimanên kors
  ar: لغات الدورة';


--
-- Name: acorn_university_departments; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_departments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    "parent_1[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL,
    "parent_2[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL
);


ALTER TABLE public.acorn_university_departments OWNER TO university;

--
-- Name: TABLE acorn_university_departments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_departments IS 'order: 50
labels:
  en: Department
  ku: Bêş
  ar: قسم
labels-plural:
  en: Departments
  ku: Bêşên
  ar: الأقسام';


--
-- Name: COLUMN acorn_university_departments."parent_1[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_departments."parent_1[entity]" IS 'labels: 
  en: Faculty
labels-plural:
  en: Faculties
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: COLUMN acorn_university_departments."parent_2[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_departments."parent_2[entity]" IS 'labels: 
  en: University
labels-plural:
  en: Universities
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: acorn_university_education_authorities; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_education_authorities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    "parent_1[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL
);


ALTER TABLE public.acorn_university_education_authorities OWNER TO university;

--
-- Name: TABLE acorn_university_education_authorities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_education_authorities IS 'order: 10
labels:
  en: Education Committee
  ku: Desteya Perwede
  ar: لجنة التعليم
labels-plural:
  en: Education Committees
  ku: Desteyên Perwede
  ar: لجان التعليم';


--
-- Name: COLUMN acorn_university_education_authorities."parent_1[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_education_authorities."parent_1[entity]" IS 'labels: 
  en: Owner Organisation
labels-plural:
  en: Owner Organisations
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: acorn_university_faculties; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_faculties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    "parent_1[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL,
    "parent_2[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL
);


ALTER TABLE public.acorn_university_faculties OWNER TO university;

--
-- Name: TABLE acorn_university_faculties; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_faculties IS 'order: 40
labels:
  en: Faculty
  ku: Fakultî
  ar: كلية
labels-plural:
  en: Faculties
  ku: Fakultîyên
  ar: الكليات';


--
-- Name: COLUMN acorn_university_faculties."parent_1[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_faculties."parent_1[entity]" IS 'labels: 
  en: University
labels-plural:
  en: Universities
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: COLUMN acorn_university_faculties."parent_2[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_faculties."parent_2[entity]" IS 'labels: 
  en: Region/Education Authority
labels-plural:
  en: Regions/Education Authorities
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: acorn_university_legacy_scores; Type: VIEW; Schema: public; Owner: sz
--

CREATE VIEW public.acorn_university_legacy_scores AS
 SELECT s.id AS student_id,
    ays.academic_year_id,
    sum(
        CASE
            WHEN ((m.name)::text = 'Arabic'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS arabic_language,
    sum(
        CASE
            WHEN ((m.name)::text = 'Year 10'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS year_10,
    sum(
        CASE
            WHEN ((m.name)::text = 'Year 11'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS year_11,
    sum(
        CASE
            WHEN ((m.name)::text = 'Physics and Chemistry'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS physics_and_chemistry,
    sum(
        CASE
            WHEN ((m.name)::text = 'Anatomy'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS anatomy,
    sum(
        CASE
            WHEN ((m.name)::text = 'Nursing'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS nursing,
    sum(
        CASE
            WHEN ((m.name)::text = 'Rays'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS rays,
    sum(
        CASE
            WHEN ((m.name)::text = 'Anesthetization'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS anesthetization,
    sum(
        CASE
            WHEN ((m.name)::text = 'Physical therapy'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS physical_therapy,
    sum(
        CASE
            WHEN ((m.name)::text = 'Pharmacy'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS pharmacy,
    sum(
        CASE
            WHEN ((m.name)::text = 'Lab'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS lab,
    sum(
        CASE
            WHEN ((m.name)::text = 'Internal Combustion Engines'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS internal_combustion_engines,
    sum(
        CASE
            WHEN ((m.name)::text = 'Mechanical Engineering Drawing 3'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS mechanical_engineering_drawing_3,
    sum(
        CASE
            WHEN ((m.name)::text = 'Vehicle control systems'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS vehicle_control_systems,
    sum(
        CASE
            WHEN ((m.name)::text = 'Diesel fuel injection systems'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS diesel_fuel_injection_systems,
    sum(
        CASE
            WHEN ((m.name)::text = 'Electrical appliances 2'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS electrical_appliances_2,
    sum(
        CASE
            WHEN ((m.name)::text = 'Automated command and control'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS automated_command_and_control,
    sum(
        CASE
            WHEN ((m.name)::text = 'Electrical Engineering Drawing 3'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS electrical_engineering_drawing_3,
    sum(
        CASE
            WHEN ((m.name)::text = 'Hardware and software maintenance 2'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS hardware_and_software_maintenance_2,
    sum(
        CASE
            WHEN ((m.name)::text = 'Programming 3'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS programming_3,
    sum(
        CASE
            WHEN ((m.name)::text = 'Network management'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS network_management,
    sum(
        CASE
            WHEN ((m.name)::text = 'Computer applications'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS computer_applications,
    sum(
        CASE
            WHEN ((m.name)::text = 'Marketing'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS marketing,
    sum(
        CASE
            WHEN ((m.name)::text = 'Bank accounting'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS bank_accounting,
    sum(
        CASE
            WHEN ((m.name)::text = 'Financial Institutions Accounting'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS financial_institutions_accounting,
    sum(
        CASE
            WHEN ((m.name)::text = 'Private accounting'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS private_accounting,
    sum(
        CASE
            WHEN ((m.name)::text = 'Computer'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS computer,
    sum(
        CASE
            WHEN ((m.name)::text = 'Financial Mathematics'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS financial_mathematics,
    sum(
        CASE
            WHEN ((m.name)::text = 'Statistics'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS statistics,
    sum(
        CASE
            WHEN ((m.name)::text = 'Food industries'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS food_industries,
    sum(
        CASE
            WHEN ((m.name)::text = 'Dairy'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS dairy,
    sum(
        CASE
            WHEN ((m.name)::text = 'Gardening'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS gardening,
    sum(
        CASE
            WHEN ((m.name)::text = 'Farm animal'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS farm_animal,
    sum(
        CASE
            WHEN ((m.name)::text = 'Agricultural pests'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS agricultural_pests,
    sum(
        CASE
            WHEN ((m.name)::text = 'Sport'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS sport,
    sum(
        CASE
            WHEN ((m.name)::text = 'Art'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS art,
    sum(
        CASE
            WHEN ((m.name)::text = 'Electronics 3'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS electronics_3,
    sum(
        CASE
            WHEN ((m.name)::text = 'Web Design'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS web_design,
    sum(
        CASE
            WHEN ((m.name)::text = 'Micro Organisms'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS micro_organisms,
    sum(
        CASE
            WHEN ((m.name)::text = 'Televison'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS televison,
    sum(
        CASE
            WHEN ((m.name)::text = 'Protection and Alarm Systems'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS protection_and_alarm_systems,
    sum(
        CASE
            WHEN ((m.name)::text = 'Antennas'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS antennas,
    sum(
        CASE
            WHEN ((m.name)::text = 'Electronic Device Maintenance'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS electronic_device_maintenance,
    sum(
        CASE
            WHEN ((m.name)::text = 'Community Language'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS community_language,
    sum(
        CASE
            WHEN ((m.name)::text = 'Maths'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS math,
    sum(
        CASE
            WHEN ((m.name)::text = 'History'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS history,
    sum(
        CASE
            WHEN ((m.name)::text = 'Biology'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS biology,
    sum(
        CASE
            WHEN ((m.name)::text = 'Philosophy'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS philosophy,
    sum(
        CASE
            WHEN ((m.name)::text = 'Sociology'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS sociology,
    sum(
        CASE
            WHEN ((m.name)::text = 'Jineologi'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS science_of_woman,
    sum(
        CASE
            WHEN ((m.name)::text = 'Physics'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS physics,
    sum(
        CASE
            WHEN ((m.name)::text = 'Geography'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS geography,
    sum(
        CASE
            WHEN ((m.name)::text = 'Chemistry'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS chemistry,
    sum(
        CASE
            WHEN ((m.name)::text = 'Year 9'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS year_9,
    sum(
        CASE
            WHEN ((m.name)::text = 'Kurdish'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS kurdish_language,
    sum(
        CASE
            WHEN ((m.name)::text = 'English'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS english_language,
    sum(
        CASE
            WHEN ((m.name)::text = 'Turning'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS turning,
    sum(
        CASE
            WHEN ((m.name)::text = 'Industrial Drawing'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS industrial_drawing,
    sum(
        CASE
            WHEN ((m.name)::text = 'Cnc'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS cnc,
    sum(
        CASE
            WHEN ((m.name)::text = 'Separator'::text) THEN sc.score
            ELSE NULL::double precision
        END) AS separator
   FROM ((((((public.acorn_university_students s
     JOIN public.acorn_exam_scores sc ON ((sc.student_id = s.id)))
     JOIN public.acorn_exam_exam_materials em ON ((sc.exam_material_id = em.id)))
     JOIN public.acorn_university_course_materials cm ON ((em.course_material_id = cm.id)))
     JOIN public.acorn_university_materials m ON ((cm.material_id = m.id)))
     JOIN public.acorn_university_course_year_semesters cys ON ((cm.course_year_semester_id = cys.id)))
     JOIN public.acorn_university_academic_year_semesters ays ON ((ays.id = cys.academic_year_semester_id)))
  GROUP BY s.id, ays.academic_year_id;


ALTER VIEW public.acorn_university_legacy_scores OWNER TO sz;

--
-- Name: VIEW acorn_university_legacy_scores; Type: COMMENT; Schema: public; Owner: sz
--

COMMENT ON VIEW public.acorn_university_legacy_scores IS 'menu: false
labels:
  en: Legacy scores
labels-plural:
  en: Legacy scores
';


--
-- Name: COLUMN acorn_university_legacy_scores.student_id; Type: COMMENT; Schema: public; Owner: sz
--

COMMENT ON COLUMN public.acorn_university_legacy_scores.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    tab-location: 2
    column-exclude: true
    field-exclude: true
    name-object: true
    labels:
      en: Legacy score
    labels-plural:
      en: Legacy scores
labels:
  en: Student
labels-plural:
  en: Students';


--
-- Name: COLUMN acorn_university_legacy_scores.academic_year_id; Type: COMMENT; Schema: public; Owner: sz
--

COMMENT ON COLUMN public.acorn_university_legacy_scores.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    tab-location: 2
    field-exclude: true
    column-exclude: true
labels:
  en: Academic Year
labels-plural:
  en: Academic Years';


--
-- Name: acorn_user_ethnicities; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_ethnicities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL
);


ALTER TABLE public.acorn_user_ethnicities OWNER TO university;

--
-- Name: acorn_user_religions; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_religions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(1024) NOT NULL
);


ALTER TABLE public.acorn_user_religions OWNER TO university;

--
-- Name: acorn_university_legacy_fulls; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_university_legacy_fulls AS
 SELECT s.legacy_import_id,
    ugs_cs.name AS certificate,
    ul.name AS certificate_language,
    sid.name AS national_id,
    ugsp.name AS county,
    ugsp.id AS county_user_group_id,
    co.code,
        CASE
            WHEN (NOT (st.id IS NULL)) THEN lower(replace((st.name)::text, 'Families Of Martyrs '::text, ''::text))
            ELSE 'No'::text
        END AS family_of_martyrs,
    u.fathers_name AS father_name,
    u.mothers_name AS mother_name,
    u.name AS full_name,
    u.surname,
        CASE
            WHEN (u.gender = 'F'::"char") THEN 'Mêr'::text
            WHEN (u.gender = 'M'::"char") THEN 'Nêr'::text
            ELSE NULL::text
        END AS gender,
    u.marital_status,
    r.name AS religion,
    eth.name AS ethnicity,
    s.legacy_import_birth_place AS place_and_date_of_birth,
    ltrim(to_char(((u.birth_date)::date)::timestamp with time zone, 'DD-Mon-YY'::text), '0'::text) AS birth_date,
    sc.student_id,
    sc.academic_year_id,
    sc.arabic_language,
    sc.year_10,
    sc.year_11,
    sc.physics_and_chemistry,
    sc.anatomy,
    sc.nursing,
    sc.rays,
    sc.anesthetization,
    sc.physical_therapy,
    sc.pharmacy,
    sc.lab,
    sc.internal_combustion_engines,
    sc.mechanical_engineering_drawing_3,
    sc.vehicle_control_systems,
    sc.diesel_fuel_injection_systems,
    sc.electrical_appliances_2,
    sc.automated_command_and_control,
    sc.electrical_engineering_drawing_3,
    sc.hardware_and_software_maintenance_2,
    sc.programming_3,
    sc.network_management,
    sc.computer_applications,
    sc.marketing,
    sc.bank_accounting,
    sc.financial_institutions_accounting,
    sc.private_accounting,
    sc.computer,
    sc.financial_mathematics,
    sc.statistics,
    sc.food_industries,
    sc.dairy,
    sc.gardening,
    sc.farm_animal,
    sc.agricultural_pests,
    sc.sport,
    sc.art,
    sc.electronics_3,
    sc.web_design,
    sc.micro_organisms,
    sc.televison,
    sc.protection_and_alarm_systems,
    sc.antennas,
    sc.electronic_device_maintenance,
    sc.community_language,
    sc.math,
    sc.history,
    sc.biology,
    sc.philosophy,
    sc.sociology,
    sc.science_of_woman,
    sc.physics,
    sc.geography,
    sc.chemistry,
    sc.year_9,
    sc.kurdish_language,
    sc.english_language,
    sc.turning,
    sc.industrial_drawing,
    sc.cnc,
    sc.separator,
    ( SELECT sum(sc_1.score) AS sum
           FROM ((((public.acorn_exam_scores sc_1
             JOIN public.acorn_exam_exam_materials em ON ((sc_1.exam_material_id = em.id)))
             JOIN public.acorn_university_course_materials cm ON ((em.course_material_id = cm.id)))
             JOIN public.acorn_university_course_year_semesters cys_1 ON ((cm.course_year_semester_id = cys_1.id)))
             JOIN public.acorn_university_courses c ON ((cys_1.course_id = c.id)))
          WHERE ((sc_1.student_id = s.id) AND (c.course_type_id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid))) AS total_mark,
    ( SELECT avg(sc_1.score) AS avg
           FROM ((((public.acorn_exam_scores sc_1
             JOIN public.acorn_exam_exam_materials em ON ((sc_1.exam_material_id = em.id)))
             JOIN public.acorn_university_course_materials cm ON ((em.course_material_id = cm.id)))
             JOIN public.acorn_university_course_year_semesters cys_1 ON ((cm.course_year_semester_id = cys_1.id)))
             JOIN public.acorn_university_courses c ON ((cys_1.course_id = c.id)))
          WHERE ((sc_1.student_id = s.id) AND (c.course_type_id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid))) AS avg,
    xrfa.result AS final_avg,
        CASE
            WHEN xrp.passed THEN 'P'::text
            ELSE 'F'::text
        END AS result,
    u.created_at,
    u.updated_at
   FROM ((((((((((((((((((((((public.acorn_university_legacy_scores sc
     JOIN public.acorn_university_students s ON ((sc.student_id = s.id)))
     LEFT JOIN public.acorn_university_student_codes co ON (((co.student_id = s.id) AND co.current)))
     JOIN public.acorn_user_users u ON ((s.user_id = u.id)))
     LEFT JOIN public.acorn_university_student_status sst ON ((sst.student_id = s.id)))
     LEFT JOIN public.acorn_university_student_statuses st ON (((sst.student_status_id = st.id) AND ((st.name)::text ~~ 'Families Of Martyrs%'::text))))
     LEFT JOIN public.acorn_exam_results xrp ON (((xrp.student_id = sc.student_id) AND (xrp.academic_year_id = sc.academic_year_id) AND (xrp.calculation_id = '9ee52f50-d22a-471e-bdeb-b13d81b1afb2'::uuid))))
     LEFT JOIN public.acorn_exam_results xrfa ON (((xrfa.student_id = sc.student_id) AND (xrfa.academic_year_id = sc.academic_year_id) AND (xrfa.calculation_id = '958b952c-2e7f-11f0-b4b6-0f8c2c07f33e'::uuid))))
     LEFT JOIN public.acorn_university_student_identities sid ON (((s.id = sid.student_id) AND sid.current)))
     JOIN public.acorn_user_user_group_version ugv ON ((ugv.user_id = u.id)))
     JOIN public.acorn_user_user_group_versions ugvs ON (((ugv.user_group_version_id = ugvs.id) AND ugvs.current)))
     JOIN public.acorn_user_user_groups ugs_cs ON ((ugvs.user_group_id = ugs_cs.id)))
     JOIN public.acorn_university_entities en_cs ON ((en_cs.user_group_id = ugs_cs.id)))
     JOIN public.acorn_university_course_year_semesters cys ON ((cys.entity_id = en_cs.id)))
     JOIN public.acorn_university_courses cs ON (((cs.id = cys.course_id) AND (cs.course_type_id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid))))
     JOIN public.acorn_user_user_languages uul ON (((u.id = uul.user_id) AND uul.current)))
     JOIN public.acorn_user_languages ul ON ((uul.language_id = ul.id)))
     JOIN public.acorn_university_hierarchies hi ON (((hi.user_group_version_id = ugvs.id) AND (hi.academic_year_id = '529bd45a-1b6c-11f0-99b6-b7f647885dbc'::uuid))))
     JOIN public.acorn_university_hierarchies hip ON ((hi.parent_id = hip.id)))
     JOIN public.acorn_user_user_group_versions ugvsp ON (((ugvsp.id = hip.user_group_version_id) AND ugvs.current)))
     JOIN public.acorn_user_user_groups ugsp ON ((ugvsp.user_group_id = ugsp.id)))
     LEFT JOIN public.acorn_user_religions r ON ((u.religion_id = r.id)))
     LEFT JOIN public.acorn_user_ethnicities eth ON ((u.ethnicity_id = eth.id)));


ALTER VIEW public.acorn_university_legacy_fulls OWNER TO university;

--
-- Name: VIEW acorn_university_legacy_fulls; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_university_legacy_fulls IS 'menu: false
labels:
  en: Legacy full
labels-plural:
  en: Legacy fulls
';


--
-- Name: COLUMN acorn_university_legacy_fulls.legacy_import_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_fulls.legacy_import_id IS 'columnClass: normal';


--
-- Name: COLUMN acorn_university_legacy_fulls.national_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_fulls.national_id IS 'column-class: normal';


--
-- Name: COLUMN acorn_university_legacy_fulls.county_user_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_fulls.county_user_group_id IS 'extra-foreign-key: 
  table: acorn_user_user_groups
  comment:
    tab-location: 2
	can-filter: true
labels:
  en: County
labels-plural:
  en: Counties';


--
-- Name: COLUMN acorn_university_legacy_fulls.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_fulls.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    tab-location: 2
    column-exclude: true
    field-exclude: true
    name-object: true
    labels:
      en: Legacy full
    labels-plural:
      en: Legacy fulls
labels:
  en: Student
labels-plural:
  en: Students';


--
-- Name: COLUMN acorn_university_legacy_fulls.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_fulls.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    tab-location: 1
    advanced: true
    column-exclude: true
labels:
  en: Academic Year
labels-plural:
  en: Academic Years';


--
-- Name: university_mofadala_baccalaureate_marks; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_baccalaureate_marks (
    id integer NOT NULL,
    county character varying(255) NOT NULL,
    code text,
    certificate character varying(255) NOT NULL,
    full_name character varying(255) NOT NULL,
    father_name character varying(255),
    mother_name character varying(255),
    place_and_date_of_birth text,
    total_mark double precision NOT NULL,
    avg double precision NOT NULL,
    certificate_language character varying(255) NOT NULL,
    kurdish_language double precision,
    english_language double precision,
    arabic_language double precision,
    science_of_woman double precision,
    history double precision,
    geography double precision,
    philosophy double precision,
    sociology double precision,
    math double precision,
    biology double precision,
    chemistry double precision,
    physics double precision,
    result character varying(255) NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    community_language double precision,
    birth_date character varying(1024),
    year_9 double precision,
    year_10 double precision,
    year_11 double precision,
    family_of_martyrs character varying(1024),
    final_avg double precision,
    passed_primaries "char",
    passed_secondaries "char",
    attendance integer,
    national_id character varying(1024),
    other_language character varying(1024),
    school character varying(1024),
    qeyd character varying(1024),
    gender character varying(1024),
    religion character varying(1024),
    ethnicity character varying(1024),
    surname character varying(1024),
    number integer NOT NULL,
    marital_status character varying(1024),
    student_type character varying(1024),
    physics_and_chemistry double precision,
    anatomy double precision,
    nursing double precision,
    rays double precision,
    anesthetization double precision,
    physical_therapy double precision,
    pharmacy double precision,
    lab double precision,
    internal_combustion_engines double precision,
    mechanical_engineering_drawing_3 double precision,
    vehicle_control_systems double precision,
    diesel_fuel_injection_systems double precision,
    electrical_appliances_2 double precision,
    automated_command_and_control double precision,
    electrical_engineering_drawing_3 double precision,
    electronics_3 double precision,
    hardware_and_software_maintenance_2 double precision,
    programming_3 double precision,
    network_management double precision,
    computer_applications double precision,
    marketing double precision,
    bank_accounting double precision,
    financial_institutions_accounting double precision,
    private_accounting double precision,
    computer double precision,
    financial_mathematics double precision,
    statistics double precision,
    food_industries double precision,
    dairy double precision,
    gardening double precision,
    farm_animal double precision,
    agricultural_pests double precision,
    sport double precision,
    art double precision,
    certificate_date timestamp without time zone NOT NULL,
    micro_organisms double precision,
    web_design double precision,
    department character varying(2048),
    televison double precision,
    electronic_device_maintenance double precision,
    antennas double precision,
    protection_and_alarm_systems double precision,
    import_irregularity character varying(1024),
    turning double precision,
    industrial_drawing double precision,
    cnc double precision,
    separator double precision
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_baccalaureate_marks'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN county OPTIONS (
    column_name 'county'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN certificate OPTIONS (
    column_name 'certificate'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN full_name OPTIONS (
    column_name 'full_name'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN father_name OPTIONS (
    column_name 'father_name'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN mother_name OPTIONS (
    column_name 'mother_name'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN place_and_date_of_birth OPTIONS (
    column_name 'place_and_date_of_birth'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN total_mark OPTIONS (
    column_name 'total_mark'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN avg OPTIONS (
    column_name 'avg'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN certificate_language OPTIONS (
    column_name 'certificate_language'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN kurdish_language OPTIONS (
    column_name 'kurdish_language'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN english_language OPTIONS (
    column_name 'english_language'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN arabic_language OPTIONS (
    column_name 'arabic_language'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN science_of_woman OPTIONS (
    column_name 'science_of_woman'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN history OPTIONS (
    column_name 'history'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN geography OPTIONS (
    column_name 'geography'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN philosophy OPTIONS (
    column_name 'philosophy'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN sociology OPTIONS (
    column_name 'sociology'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN math OPTIONS (
    column_name 'math'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN biology OPTIONS (
    column_name 'biology'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN chemistry OPTIONS (
    column_name 'chemistry'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN physics OPTIONS (
    column_name 'physics'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN result OPTIONS (
    column_name 'result'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN community_language OPTIONS (
    column_name 'community_language'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN birth_date OPTIONS (
    column_name 'birth_date'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN year_9 OPTIONS (
    column_name 'year_9'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN year_10 OPTIONS (
    column_name 'year_10'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN year_11 OPTIONS (
    column_name 'year_11'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN family_of_martyrs OPTIONS (
    column_name 'family_of_martyrs'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN final_avg OPTIONS (
    column_name 'final_avg'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN passed_primaries OPTIONS (
    column_name 'passed_primaries'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN passed_secondaries OPTIONS (
    column_name 'passed_secondaries'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN attendance OPTIONS (
    column_name 'attendance'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN national_id OPTIONS (
    column_name 'national_id'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN other_language OPTIONS (
    column_name 'other_language'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN school OPTIONS (
    column_name 'school'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN qeyd OPTIONS (
    column_name 'qeyd'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN gender OPTIONS (
    column_name 'gender'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN religion OPTIONS (
    column_name 'religion'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN ethnicity OPTIONS (
    column_name 'ethnicity'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN surname OPTIONS (
    column_name 'surname'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN number OPTIONS (
    column_name 'number'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN marital_status OPTIONS (
    column_name 'marital_status'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN student_type OPTIONS (
    column_name 'student_type'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN physics_and_chemistry OPTIONS (
    column_name 'physics_and_chemistry'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN anatomy OPTIONS (
    column_name 'anatomy'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN nursing OPTIONS (
    column_name 'nursing'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN rays OPTIONS (
    column_name 'rays'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN anesthetization OPTIONS (
    column_name 'anesthetization'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN physical_therapy OPTIONS (
    column_name 'physical_therapy'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN pharmacy OPTIONS (
    column_name 'pharmacy'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN lab OPTIONS (
    column_name 'lab'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN internal_combustion_engines OPTIONS (
    column_name 'internal_combustion_engines'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN mechanical_engineering_drawing_3 OPTIONS (
    column_name 'mechanical_engineering_drawing_3'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN vehicle_control_systems OPTIONS (
    column_name 'vehicle_control_systems'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN diesel_fuel_injection_systems OPTIONS (
    column_name 'diesel_fuel_injection_systems'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN electrical_appliances_2 OPTIONS (
    column_name 'electrical_appliances_2'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN automated_command_and_control OPTIONS (
    column_name 'automated_command_and_control'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN electrical_engineering_drawing_3 OPTIONS (
    column_name 'electrical_engineering_drawing_3'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN electronics_3 OPTIONS (
    column_name 'electronics_3'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN hardware_and_software_maintenance_2 OPTIONS (
    column_name 'hardware_and_software_maintenance_2'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN programming_3 OPTIONS (
    column_name 'programming_3'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN network_management OPTIONS (
    column_name 'network_management'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN computer_applications OPTIONS (
    column_name 'computer_applications'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN marketing OPTIONS (
    column_name 'marketing'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN bank_accounting OPTIONS (
    column_name 'bank_accounting'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN financial_institutions_accounting OPTIONS (
    column_name 'financial_institutions_accounting'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN private_accounting OPTIONS (
    column_name 'private_accounting'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN computer OPTIONS (
    column_name 'computer'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN financial_mathematics OPTIONS (
    column_name 'financial_mathematics'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN statistics OPTIONS (
    column_name 'statistics'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN food_industries OPTIONS (
    column_name 'food_industries'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN dairy OPTIONS (
    column_name 'dairy'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN gardening OPTIONS (
    column_name 'gardening'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN farm_animal OPTIONS (
    column_name 'farm_animal'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN agricultural_pests OPTIONS (
    column_name 'agricultural_pests'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN sport OPTIONS (
    column_name 'sport'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN art OPTIONS (
    column_name 'art'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN certificate_date OPTIONS (
    column_name 'certificate_date'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN micro_organisms OPTIONS (
    column_name 'micro_organisms'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN web_design OPTIONS (
    column_name 'web_design'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN department OPTIONS (
    column_name 'department'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN televison OPTIONS (
    column_name 'televison'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN electronic_device_maintenance OPTIONS (
    column_name 'electronic_device_maintenance'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN antennas OPTIONS (
    column_name 'antennas'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN protection_and_alarm_systems OPTIONS (
    column_name 'protection_and_alarm_systems'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN import_irregularity OPTIONS (
    column_name 'import_irregularity'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN turning OPTIONS (
    column_name 'turning'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN industrial_drawing OPTIONS (
    column_name 'industrial_drawing'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN cnc OPTIONS (
    column_name 'cnc'
);
ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks ALTER COLUMN separator OPTIONS (
    column_name 'separator'
);


ALTER FOREIGN TABLE public.university_mofadala_baccalaureate_marks OWNER TO sz;

--
-- Name: acorn_university_legacy_updates; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_university_legacy_updates AS
 SELECT s.id,
    NULL::integer AS legacy_import_id,
    s.id AS student_id,
    (ls.county)::text AS nabu_county,
    ls.county_user_group_id,
    (ls.certificate)::text AS nabu_certificate,
    'created_in_nabu'::text AS cause,
    ls.created_at,
    ls.updated_at,
    2025 AS certificate_date,
    'all'::text AS fields_changed,
    ('=> '::text || (ls.final_avg)::text) AS final_avg,
    ('=> '::text || ls.result) AS result,
    ('=> '::text || (ls.code)::text) AS code,
    ('=> '::text || (ls.certificate)::text) AS certificate,
    ('=> '::text || (ls.certificate_language)::text) AS certificate_language,
    ('=> '::text || (ls.national_id)::text) AS national_id,
    ('=> '::text || ls.family_of_martyrs) AS family_of_martyrs,
    ('=> '::text || (ls.father_name)::text) AS father_name,
    ('=> '::text || (ls.mother_name)::text) AS mother_name,
    ('=> '::text || (ls.full_name)::text) AS full_name,
    ('=> '::text || (ls.surname)::text) AS surname,
    ('=> '::text || ls.gender) AS gender,
    ('=> '::text || (ls.marital_status)::text) AS marital_status,
    ('=> '::text || (ls.religion)::text) AS religion,
    ('=> '::text || (ls.ethnicity)::text) AS ethnicity,
    ('=> '::text || (ls.place_and_date_of_birth)::text) AS place_and_date_of_birth,
    ('=> '::text || ls.birth_date) AS birth_date,
    ('=> '::text || (ls.arabic_language)::text) AS arabic_language,
    ('=> '::text || (ls.year_10)::text) AS year_10,
    ('=> '::text || (ls.year_11)::text) AS year_11,
    ('=> '::text || (ls.physics_and_chemistry)::text) AS physics_and_chemistry,
    ('=> '::text || (ls.anatomy)::text) AS anatomy,
    ('=> '::text || (ls.nursing)::text) AS nursing,
    ('=> '::text || (ls.rays)::text) AS rays,
    ('=> '::text || (ls.anesthetization)::text) AS anesthetization,
    ('=> '::text || (ls.physical_therapy)::text) AS physical_therapy,
    ('=> '::text || (ls.pharmacy)::text) AS pharmacy,
    ('=> '::text || (ls.lab)::text) AS lab,
    ('=> '::text || (ls.internal_combustion_engines)::text) AS internal_combustion_engines,
    ('=> '::text || (ls.mechanical_engineering_drawing_3)::text) AS mechanical_engineering_drawing_3,
    ('=> '::text || (ls.vehicle_control_systems)::text) AS vehicle_control_systems,
    ('=> '::text || (ls.diesel_fuel_injection_systems)::text) AS diesel_fuel_injection_systems,
    ('=> '::text || (ls.electrical_appliances_2)::text) AS electrical_appliances_2,
    ('=> '::text || (ls.automated_command_and_control)::text) AS automated_command_and_control,
    ('=> '::text || (ls.electrical_engineering_drawing_3)::text) AS electrical_engineering_drawing_3,
    ('=> '::text || (ls.hardware_and_software_maintenance_2)::text) AS hardware_and_software_maintenance_2,
    ('=> '::text || (ls.programming_3)::text) AS programming_3,
    ('=> '::text || (ls.network_management)::text) AS network_management,
    ('=> '::text || (ls.computer_applications)::text) AS computer_applications,
    ('=> '::text || (ls.marketing)::text) AS marketing,
    ('=> '::text || (ls.bank_accounting)::text) AS bank_accounting,
    ('=> '::text || (ls.financial_institutions_accounting)::text) AS financial_institutions_accounting,
    ('=> '::text || (ls.private_accounting)::text) AS private_accounting,
    ('=> '::text || (ls.computer)::text) AS computer,
    ('=> '::text || (ls.financial_mathematics)::text) AS financial_mathematics,
    ('=> '::text || (ls.statistics)::text) AS statistics,
    ('=> '::text || (ls.food_industries)::text) AS food_industries,
    ('=> '::text || (ls.dairy)::text) AS dairy,
    ('=> '::text || (ls.gardening)::text) AS gardening,
    ('=> '::text || (ls.farm_animal)::text) AS farm_animal,
    ('=> '::text || (ls.agricultural_pests)::text) AS agricultural_pests,
    ('=> '::text || (ls.sport)::text) AS sport,
    ('=> '::text || (ls.art)::text) AS art,
    ('=> '::text || (ls.electronics_3)::text) AS electronics_3,
    ('=> '::text || (ls.web_design)::text) AS web_design,
    ('=> '::text || (ls.micro_organisms)::text) AS micro_organisms,
    ('=> '::text || (ls.televison)::text) AS televison,
    ('=> '::text || (ls.protection_and_alarm_systems)::text) AS protection_and_alarm_systems,
    ('=> '::text || (ls.antennas)::text) AS antennas,
    ('=> '::text || (ls.electronic_device_maintenance)::text) AS electronic_device_maintenance,
    ('=> '::text || (ls.community_language)::text) AS community_language,
    ('=> '::text || (ls.math)::text) AS math,
    ('=> '::text || (ls.history)::text) AS history,
    ('=> '::text || (ls.biology)::text) AS biology,
    ('=> '::text || (ls.philosophy)::text) AS philosophy,
    ('=> '::text || (ls.sociology)::text) AS sociology,
    ('=> '::text || (ls.science_of_woman)::text) AS science_of_woman,
    ('=> '::text || (ls.physics)::text) AS physics,
    ('=> '::text || (ls.geography)::text) AS geography,
    ('=> '::text || (ls.chemistry)::text) AS chemistry,
    ('=> '::text || (ls.year_9)::text) AS year_9,
    ('=> '::text || (ls.kurdish_language)::text) AS kurdish_language,
    ('=> '::text || (ls.english_language)::text) AS english_language,
    ('=> '::text || (ls.turning)::text) AS turning,
    ('=> '::text || (ls.industrial_drawing)::text) AS industrial_drawing,
    ('=> '::text || (ls.cnc)::text) AS cnc,
    ('=> '::text || (ls.separator)::text) AS separator
   FROM (public.acorn_university_students s
     JOIN public.acorn_university_legacy_fulls ls ON ((ls.student_id = s.id)))
  WHERE (s.legacy_import_id IS NULL)
UNION ALL
 SELECT s.id,
    bm.id AS legacy_import_id,
    s.id AS student_id,
    ls.county AS nabu_county,
    ls.county_user_group_id,
    ls.certificate AS nabu_certificate,
    'updated_in_nabu'::text AS cause,
    ls.created_at,
    ls.updated_at,
    EXTRACT(year FROM bm.certificate_date) AS certificate_date,
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
        CASE
            WHEN (COALESCE(bm.code, '<NULL>'::text) <> COALESCE((ls.code)::text, '<NULL>'::text)) THEN 'code, '::text
            ELSE ''::text
        END ||
        CASE
            WHEN (COALESCE((bm.certificate)::text, '<NULL>'::text) <> COALESCE((ls.certificate)::text, '<NULL>'::text)) THEN 'certificate, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.certificate_language)::text, '<NULL>'::text) <> COALESCE((ls.certificate_language)::text, '<NULL>'::text)) THEN 'certificate_language, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.national_id)::text, '<NULL>'::text) <> COALESCE((ls.national_id)::text, '<NULL>'::text)) THEN 'national_id, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN ((bm.family_of_martyrs)::text <> ls.family_of_martyrs) THEN 'family_of_martyrs, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.father_name)::text, '<NULL>'::text) <> COALESCE((ls.father_name)::text, '<NULL>'::text)) THEN 'father_name, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.mother_name)::text, '<NULL>'::text) <> COALESCE((ls.mother_name)::text, '<NULL>'::text)) THEN 'mother_name, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.full_name)::text, '<NULL>'::text) <> COALESCE((ls.full_name)::text, '<NULL>'::text)) THEN 'full_name, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.surname)::text, '<NULL>'::text) <> COALESCE((ls.surname)::text, '<NULL>'::text)) THEN 'surname, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.gender)::text, '<NULL>'::text) <> COALESCE(ls.gender, '<NULL>'::text)) THEN 'gender, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.marital_status)::text, '<NULL>'::text) <> COALESCE((ls.marital_status)::text, '<NULL>'::text)) THEN 'marital_status, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.religion)::text, '<NULL>'::text) <> COALESCE((ls.religion)::text, '<NULL>'::text)) THEN 'religion, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.ethnicity)::text, '<NULL>'::text) <> COALESCE((ls.ethnicity)::text, '<NULL>'::text)) THEN 'ethnicity, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.place_and_date_of_birth, '<NULL>'::text) <> (COALESCE(ls.place_and_date_of_birth, '<NULL>'::character varying))::text) THEN 'place_and_date_of_birth, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.birth_date)::date, '3000-01-01'::date) <> COALESCE(((ls.birth_date)::date)::timestamp without time zone, ('3000-01-01'::date)::timestamp without time zone)) THEN 'birth_date, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.arabic_language, ('-1'::integer)::double precision) <> COALESCE(ls.arabic_language, ('-1'::integer)::double precision)) THEN 'arabic_language, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.year_10, ('-1'::integer)::double precision) <> COALESCE(ls.year_10, ('-1'::integer)::double precision)) THEN 'year_10, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.year_11, ('-1'::integer)::double precision) <> COALESCE(ls.year_11, ('-1'::integer)::double precision)) THEN 'year_11, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.physics_and_chemistry, ('-1'::integer)::double precision) <> COALESCE(ls.physics_and_chemistry, ('-1'::integer)::double precision)) THEN 'physics_and_chemistry, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.anatomy, ('-1'::integer)::double precision) <> COALESCE(ls.anatomy, ('-1'::integer)::double precision)) THEN 'anatomy, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.nursing, ('-1'::integer)::double precision) <> COALESCE(ls.nursing, ('-1'::integer)::double precision)) THEN 'nursing, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.rays, ('-1'::integer)::double precision) <> COALESCE(ls.rays, ('-1'::integer)::double precision)) THEN 'rays, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.anesthetization, ('-1'::integer)::double precision) <> COALESCE(ls.anesthetization, ('-1'::integer)::double precision)) THEN 'anesthetization, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.physical_therapy, ('-1'::integer)::double precision) <> COALESCE(ls.physical_therapy, ('-1'::integer)::double precision)) THEN 'physical_therapy, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.pharmacy, ('-1'::integer)::double precision) <> COALESCE(ls.pharmacy, ('-1'::integer)::double precision)) THEN 'pharmacy, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.lab, ('-1'::integer)::double precision) <> COALESCE(ls.lab, ('-1'::integer)::double precision)) THEN 'lab, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.internal_combustion_engines, ('-1'::integer)::double precision) <> COALESCE(ls.internal_combustion_engines, ('-1'::integer)::double precision)) THEN 'internal_combustion_engines, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.mechanical_engineering_drawing_3, ('-1'::integer)::double precision) <> COALESCE(ls.mechanical_engineering_drawing_3, ('-1'::integer)::double precision)) THEN 'mechanical_engineering_drawing_3, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.vehicle_control_systems, ('-1'::integer)::double precision) <> COALESCE(ls.vehicle_control_systems, ('-1'::integer)::double precision)) THEN 'vehicle_control_systems, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.diesel_fuel_injection_systems, ('-1'::integer)::double precision) <> COALESCE(ls.diesel_fuel_injection_systems, ('-1'::integer)::double precision)) THEN 'diesel_fuel_injection_systems, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.electrical_appliances_2, ('-1'::integer)::double precision) <> COALESCE(ls.electrical_appliances_2, ('-1'::integer)::double precision)) THEN 'electrical_appliances_2, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.automated_command_and_control, ('-1'::integer)::double precision) <> COALESCE(ls.automated_command_and_control, ('-1'::integer)::double precision)) THEN 'automated_command_and_control, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.electrical_engineering_drawing_3, ('-1'::integer)::double precision) <> COALESCE(ls.electrical_engineering_drawing_3, ('-1'::integer)::double precision)) THEN 'electrical_engineering_drawing_3, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.hardware_and_software_maintenance_2, ('-1'::integer)::double precision) <> COALESCE(ls.hardware_and_software_maintenance_2, ('-1'::integer)::double precision)) THEN 'hardware_and_software_maintenance_2, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.programming_3, ('-1'::integer)::double precision) <> COALESCE(ls.programming_3, ('-1'::integer)::double precision)) THEN 'programming_3, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.network_management, ('-1'::integer)::double precision) <> COALESCE(ls.network_management, ('-1'::integer)::double precision)) THEN 'network_management, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.computer_applications, ('-1'::integer)::double precision) <> COALESCE(ls.computer_applications, ('-1'::integer)::double precision)) THEN 'computer_applications, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.marketing, ('-1'::integer)::double precision) <> COALESCE(ls.marketing, ('-1'::integer)::double precision)) THEN 'marketing, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.bank_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.bank_accounting, ('-1'::integer)::double precision)) THEN 'bank_accounting, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.financial_institutions_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.financial_institutions_accounting, ('-1'::integer)::double precision)) THEN 'financial_institutions_accounting, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.private_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.private_accounting, ('-1'::integer)::double precision)) THEN 'private_accounting, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.computer, ('-1'::integer)::double precision) <> COALESCE(ls.computer, ('-1'::integer)::double precision)) THEN 'computer, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.financial_mathematics, ('-1'::integer)::double precision) <> COALESCE(ls.financial_mathematics, ('-1'::integer)::double precision)) THEN 'financial_mathematics, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.statistics, ('-1'::integer)::double precision) <> COALESCE(ls.statistics, ('-1'::integer)::double precision)) THEN 'statistics, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.food_industries, ('-1'::integer)::double precision) <> COALESCE(ls.food_industries, ('-1'::integer)::double precision)) THEN 'food_industries, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.dairy, ('-1'::integer)::double precision) <> COALESCE(ls.dairy, ('-1'::integer)::double precision)) THEN 'dairy, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.gardening, ('-1'::integer)::double precision) <> COALESCE(ls.gardening, ('-1'::integer)::double precision)) THEN 'gardening, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.farm_animal, ('-1'::integer)::double precision) <> COALESCE(ls.farm_animal, ('-1'::integer)::double precision)) THEN 'farm_animal, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.agricultural_pests, ('-1'::integer)::double precision) <> COALESCE(ls.agricultural_pests, ('-1'::integer)::double precision)) THEN 'agricultural_pests, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.sport, ('-1'::integer)::double precision) <> COALESCE(ls.sport, ('-1'::integer)::double precision)) THEN 'sport, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.art, ('-1'::integer)::double precision) <> COALESCE(ls.art, ('-1'::integer)::double precision)) THEN 'art, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.electronics_3, ('-1'::integer)::double precision) <> COALESCE(ls.electronics_3, ('-1'::integer)::double precision)) THEN 'electronics_3, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.web_design, ('-1'::integer)::double precision) <> COALESCE(ls.web_design, ('-1'::integer)::double precision)) THEN 'web_design, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.micro_organisms, ('-1'::integer)::double precision) <> COALESCE(ls.micro_organisms, ('-1'::integer)::double precision)) THEN 'micro_organisms, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.televison, ('-1'::integer)::double precision) <> COALESCE(ls.televison, ('-1'::integer)::double precision)) THEN 'televison, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.protection_and_alarm_systems, ('-1'::integer)::double precision) <> COALESCE(ls.protection_and_alarm_systems, ('-1'::integer)::double precision)) THEN 'protection_and_alarm_systems, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.antennas, ('-1'::integer)::double precision) <> COALESCE(ls.antennas, ('-1'::integer)::double precision)) THEN 'antennas, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.electronic_device_maintenance, ('-1'::integer)::double precision) <> COALESCE(ls.electronic_device_maintenance, ('-1'::integer)::double precision)) THEN 'electronic_device_maintenance, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.community_language, ('-1'::integer)::double precision) <> COALESCE(ls.community_language, ('-1'::integer)::double precision)) THEN 'community_language, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.math, ('-1'::integer)::double precision) <> COALESCE(ls.math, ('-1'::integer)::double precision)) THEN 'math, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.history, ('-1'::integer)::double precision) <> COALESCE(ls.history, ('-1'::integer)::double precision)) THEN 'history, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.biology, ('-1'::integer)::double precision) <> COALESCE(ls.biology, ('-1'::integer)::double precision)) THEN 'biology, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.philosophy, ('-1'::integer)::double precision) <> COALESCE(ls.philosophy, ('-1'::integer)::double precision)) THEN 'philosophy, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.sociology, ('-1'::integer)::double precision) <> COALESCE(ls.sociology, ('-1'::integer)::double precision)) THEN 'sociology, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.science_of_woman, ('-1'::integer)::double precision) <> COALESCE(ls.science_of_woman, ('-1'::integer)::double precision)) THEN 'science_of_woman, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.physics, ('-1'::integer)::double precision) <> COALESCE(ls.physics, ('-1'::integer)::double precision)) THEN 'physics, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.geography, ('-1'::integer)::double precision) <> COALESCE(ls.geography, ('-1'::integer)::double precision)) THEN 'geography, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.chemistry, ('-1'::integer)::double precision) <> COALESCE(ls.chemistry, ('-1'::integer)::double precision)) THEN 'chemistry, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.year_9, ('-1'::integer)::double precision) <> COALESCE(ls.year_9, ('-1'::integer)::double precision)) THEN 'year_9, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.kurdish_language, ('-1'::integer)::double precision) <> COALESCE(ls.kurdish_language, ('-1'::integer)::double precision)) THEN 'kurdish_language, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.english_language, ('-1'::integer)::double precision) <> COALESCE(ls.english_language, ('-1'::integer)::double precision)) THEN 'english_language, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN ((COALESCE((floor((bm.final_avg)::numeric))::double precision, ('-1'::integer)::double precision) <> COALESCE((floor((ls.final_avg)::numeric))::double precision, ('-1'::integer)::double precision)) AND (COALESCE((round((bm.final_avg)::numeric, 1))::double precision, ('-1'::integer)::double precision) <> COALESCE((round((ls.final_avg)::numeric, 1))::double precision, ('-1'::integer)::double precision))) THEN 'final_avg, '::text
            WHEN (abs((bm.final_avg - ls.final_avg)) > (0.3)::double precision) THEN 'final_avg, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE((bm.result)::text, '<NULL>'::text) <> COALESCE(ls.result, '<NULL>'::text)) THEN 'result, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.turning, ('-1'::integer)::double precision) <> COALESCE(ls.turning, ('-1'::integer)::double precision)) THEN 'turning, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.industrial_drawing, ('-1'::integer)::double precision) <> COALESCE(ls.industrial_drawing, ('-1'::integer)::double precision)) THEN 'industrial_drawing, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.cnc, ('-1'::integer)::double precision) <> COALESCE(ls.cnc, ('-1'::integer)::double precision)) THEN 'cnc, '::text
            ELSE ''::text
        END) ||
        CASE
            WHEN (COALESCE(bm.separator, ('-1'::integer)::double precision) <> COALESCE(ls.separator, ('-1'::integer)::double precision)) THEN 'separator, '::text
            ELSE ''::text
        END) AS fields_changed,
        CASE
            WHEN ((COALESCE((floor((bm.final_avg)::numeric))::double precision, ('-1'::integer)::double precision) <> COALESCE((floor((ls.final_avg)::numeric))::double precision, ('-1'::integer)::double precision)) AND (COALESCE((round((bm.final_avg)::numeric, 1))::double precision, ('-1'::integer)::double precision) <> COALESCE((round((ls.final_avg)::numeric, 1))::double precision, ('-1'::integer)::double precision))) THEN ((COALESCE((bm.final_avg)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.final_avg)::text))
            WHEN (abs((bm.final_avg - ls.final_avg)) > (0.3)::double precision) THEN ((COALESCE((bm.final_avg)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.final_avg)::text))
            ELSE NULL::text
        END AS final_avg,
        CASE
            WHEN (COALESCE((bm.result)::text, '<NULL>'::text) <> COALESCE(ls.result, '<NULL>'::text)) THEN ((COALESCE((bm.result)::text, '<NULL>'::text) || ' => '::text) || COALESCE(ls.result, '<NULL>'::text))
            ELSE NULL::text
        END AS result,
        CASE
            WHEN (COALESCE(bm.code, '<NULL>'::text) <> COALESCE((ls.code)::text, '<NULL>'::text)) THEN ((COALESCE(bm.code, '<NULL>'::text) || ' => '::text) || COALESCE((ls.code)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS code,
        CASE
            WHEN (COALESCE((bm.certificate)::text, '<NULL>'::text) <> COALESCE((ls.certificate)::text, '<NULL>'::text)) THEN ((COALESCE((bm.certificate)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.certificate)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS certificate,
        CASE
            WHEN (COALESCE((bm.certificate_language)::text, '<NULL>'::text) <> COALESCE((ls.certificate_language)::text, '<NULL>'::text)) THEN ((COALESCE((bm.certificate_language)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.certificate_language)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS certificate_language,
        CASE
            WHEN (COALESCE((bm.national_id)::text, '<NULL>'::text) <> COALESCE((ls.national_id)::text, '<NULL>'::text)) THEN ((COALESCE((bm.national_id)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.national_id)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS national_id,
        CASE
            WHEN ((bm.family_of_martyrs)::text <> ls.family_of_martyrs) THEN ((COALESCE((bm.family_of_martyrs)::text, '<NULL>'::text) || ' => '::text) || COALESCE(ls.family_of_martyrs, '<NULL>'::text))
            ELSE NULL::text
        END AS family_of_martyrs,
        CASE
            WHEN (COALESCE((bm.father_name)::text, '<NULL>'::text) <> COALESCE((ls.father_name)::text, '<NULL>'::text)) THEN ((COALESCE((bm.father_name)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.father_name)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS father_name,
        CASE
            WHEN (COALESCE((bm.mother_name)::text, '<NULL>'::text) <> COALESCE((ls.mother_name)::text, '<NULL>'::text)) THEN ((COALESCE((bm.mother_name)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.mother_name)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS mother_name,
        CASE
            WHEN (COALESCE((bm.full_name)::text, '<NULL>'::text) <> COALESCE((ls.full_name)::text, '<NULL>'::text)) THEN ((COALESCE((bm.full_name)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.full_name)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS full_name,
        CASE
            WHEN (COALESCE((bm.surname)::text, '<NULL>'::text) <> COALESCE((ls.surname)::text, '<NULL>'::text)) THEN ((COALESCE((bm.surname)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.surname)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS surname,
        CASE
            WHEN (COALESCE((bm.gender)::text, '<NULL>'::text) <> COALESCE(ls.gender, '<NULL>'::text)) THEN ((COALESCE((bm.gender)::text, '<NULL>'::text) || ' => '::text) || COALESCE(ls.gender, '<NULL>'::text))
            ELSE NULL::text
        END AS gender,
        CASE
            WHEN (COALESCE((bm.marital_status)::text, '<NULL>'::text) <> COALESCE((ls.marital_status)::text, '<NULL>'::text)) THEN ((COALESCE((bm.marital_status)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.marital_status)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS marital_status,
        CASE
            WHEN (COALESCE((bm.religion)::text, '<NULL>'::text) <> COALESCE((ls.religion)::text, '<NULL>'::text)) THEN ((COALESCE((bm.religion)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.religion)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS religion,
        CASE
            WHEN (COALESCE((bm.ethnicity)::text, '<NULL>'::text) <> COALESCE((ls.ethnicity)::text, '<NULL>'::text)) THEN ((COALESCE((bm.ethnicity)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.ethnicity)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS ethnicity,
        CASE
            WHEN (COALESCE(bm.place_and_date_of_birth, '<NULL>'::text) <> (COALESCE(ls.place_and_date_of_birth, '<NULL>'::character varying))::text) THEN ((COALESCE(bm.place_and_date_of_birth, '<NULL>'::text) || ' => '::text) || COALESCE((ls.place_and_date_of_birth)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS place_and_date_of_birth,
        CASE
            WHEN (COALESCE((bm.birth_date)::date, '3000-01-01'::date) <> COALESCE(((ls.birth_date)::date)::timestamp without time zone, ('3000-01-01'::date)::timestamp without time zone)) THEN ((COALESCE((bm.birth_date)::text, '<NULL>'::text) || ' => '::text) || COALESCE(ls.birth_date, '<NULL>'::text))
            ELSE NULL::text
        END AS birth_date,
        CASE
            WHEN (COALESCE(bm.arabic_language, ('-1'::integer)::double precision) <> COALESCE(ls.arabic_language, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.arabic_language)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.arabic_language)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS arabic_language,
        CASE
            WHEN (COALESCE(bm.year_10, ('-1'::integer)::double precision) <> COALESCE(ls.year_10, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.year_10)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.year_10)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS year_10,
        CASE
            WHEN (COALESCE(bm.year_11, ('-1'::integer)::double precision) <> COALESCE(ls.year_11, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.year_11)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.year_11)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS year_11,
        CASE
            WHEN (COALESCE(bm.physics_and_chemistry, ('-1'::integer)::double precision) <> COALESCE(ls.physics_and_chemistry, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.physics_and_chemistry)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.physics_and_chemistry)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS physics_and_chemistry,
        CASE
            WHEN (COALESCE(bm.anatomy, ('-1'::integer)::double precision) <> COALESCE(ls.anatomy, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.anatomy)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.anatomy)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS anatomy,
        CASE
            WHEN (COALESCE(bm.nursing, ('-1'::integer)::double precision) <> COALESCE(ls.nursing, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.nursing)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.nursing)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS nursing,
        CASE
            WHEN (COALESCE(bm.rays, ('-1'::integer)::double precision) <> COALESCE(ls.rays, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.rays)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.rays)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS rays,
        CASE
            WHEN (COALESCE(bm.anesthetization, ('-1'::integer)::double precision) <> COALESCE(ls.anesthetization, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.anesthetization)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.anesthetization)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS anesthetization,
        CASE
            WHEN (COALESCE(bm.physical_therapy, ('-1'::integer)::double precision) <> COALESCE(ls.physical_therapy, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.physical_therapy)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.physical_therapy)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS physical_therapy,
        CASE
            WHEN (COALESCE(bm.pharmacy, ('-1'::integer)::double precision) <> COALESCE(ls.pharmacy, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.pharmacy)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.pharmacy)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS pharmacy,
        CASE
            WHEN (COALESCE(bm.lab, ('-1'::integer)::double precision) <> COALESCE(ls.lab, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.lab)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.lab)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS lab,
        CASE
            WHEN (COALESCE(bm.internal_combustion_engines, ('-1'::integer)::double precision) <> COALESCE(ls.internal_combustion_engines, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.internal_combustion_engines)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.internal_combustion_engines)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS internal_combustion_engines,
        CASE
            WHEN (COALESCE(bm.mechanical_engineering_drawing_3, ('-1'::integer)::double precision) <> COALESCE(ls.mechanical_engineering_drawing_3, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.mechanical_engineering_drawing_3)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.mechanical_engineering_drawing_3)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS mechanical_engineering_drawing_3,
        CASE
            WHEN (COALESCE(bm.vehicle_control_systems, ('-1'::integer)::double precision) <> COALESCE(ls.vehicle_control_systems, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.vehicle_control_systems)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.vehicle_control_systems)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS vehicle_control_systems,
        CASE
            WHEN (COALESCE(bm.diesel_fuel_injection_systems, ('-1'::integer)::double precision) <> COALESCE(ls.diesel_fuel_injection_systems, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.diesel_fuel_injection_systems)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.diesel_fuel_injection_systems)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS diesel_fuel_injection_systems,
        CASE
            WHEN (COALESCE(bm.electrical_appliances_2, ('-1'::integer)::double precision) <> COALESCE(ls.electrical_appliances_2, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.electrical_appliances_2)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.electrical_appliances_2)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS electrical_appliances_2,
        CASE
            WHEN (COALESCE(bm.automated_command_and_control, ('-1'::integer)::double precision) <> COALESCE(ls.automated_command_and_control, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.automated_command_and_control)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.automated_command_and_control)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS automated_command_and_control,
        CASE
            WHEN (COALESCE(bm.electrical_engineering_drawing_3, ('-1'::integer)::double precision) <> COALESCE(ls.electrical_engineering_drawing_3, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.electrical_engineering_drawing_3)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.electrical_engineering_drawing_3)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS electrical_engineering_drawing_3,
        CASE
            WHEN (COALESCE(bm.hardware_and_software_maintenance_2, ('-1'::integer)::double precision) <> COALESCE(ls.hardware_and_software_maintenance_2, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.hardware_and_software_maintenance_2)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.hardware_and_software_maintenance_2)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS hardware_and_software_maintenance_2,
        CASE
            WHEN (COALESCE(bm.programming_3, ('-1'::integer)::double precision) <> COALESCE(ls.programming_3, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.programming_3)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.programming_3)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS programming_3,
        CASE
            WHEN (COALESCE(bm.network_management, ('-1'::integer)::double precision) <> COALESCE(ls.network_management, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.network_management)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.network_management)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS network_management,
        CASE
            WHEN (COALESCE(bm.computer_applications, ('-1'::integer)::double precision) <> COALESCE(ls.computer_applications, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.computer_applications)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.computer_applications)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS computer_applications,
        CASE
            WHEN (COALESCE(bm.marketing, ('-1'::integer)::double precision) <> COALESCE(ls.marketing, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.marketing)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.marketing)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS marketing,
        CASE
            WHEN (COALESCE(bm.bank_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.bank_accounting, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.bank_accounting)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.bank_accounting)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS bank_accounting,
        CASE
            WHEN (COALESCE(bm.financial_institutions_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.financial_institutions_accounting, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.financial_institutions_accounting)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.financial_institutions_accounting)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS financial_institutions_accounting,
        CASE
            WHEN (COALESCE(bm.private_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.private_accounting, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.private_accounting)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.private_accounting)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS private_accounting,
        CASE
            WHEN (COALESCE(bm.computer, ('-1'::integer)::double precision) <> COALESCE(ls.computer, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.computer)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.computer)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS computer,
        CASE
            WHEN (COALESCE(bm.financial_mathematics, ('-1'::integer)::double precision) <> COALESCE(ls.financial_mathematics, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.financial_mathematics)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.financial_mathematics)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS financial_mathematics,
        CASE
            WHEN (COALESCE(bm.statistics, ('-1'::integer)::double precision) <> COALESCE(ls.statistics, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.statistics)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.statistics)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS statistics,
        CASE
            WHEN (COALESCE(bm.food_industries, ('-1'::integer)::double precision) <> COALESCE(ls.food_industries, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.food_industries)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.food_industries)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS food_industries,
        CASE
            WHEN (COALESCE(bm.dairy, ('-1'::integer)::double precision) <> COALESCE(ls.dairy, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.dairy)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.dairy)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS dairy,
        CASE
            WHEN (COALESCE(bm.gardening, ('-1'::integer)::double precision) <> COALESCE(ls.gardening, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.gardening)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.gardening)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS gardening,
        CASE
            WHEN (COALESCE(bm.farm_animal, ('-1'::integer)::double precision) <> COALESCE(ls.farm_animal, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.farm_animal)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.farm_animal)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS farm_animal,
        CASE
            WHEN (COALESCE(bm.agricultural_pests, ('-1'::integer)::double precision) <> COALESCE(ls.agricultural_pests, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.agricultural_pests)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.agricultural_pests)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS agricultural_pests,
        CASE
            WHEN (COALESCE(bm.sport, ('-1'::integer)::double precision) <> COALESCE(ls.sport, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.sport)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.sport)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS sport,
        CASE
            WHEN (COALESCE(bm.art, ('-1'::integer)::double precision) <> COALESCE(ls.art, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.art)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.art)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS art,
        CASE
            WHEN (COALESCE(bm.electronics_3, ('-1'::integer)::double precision) <> COALESCE(ls.electronics_3, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.electronics_3)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.electronics_3)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS electronics_3,
        CASE
            WHEN (COALESCE(bm.web_design, ('-1'::integer)::double precision) <> COALESCE(ls.web_design, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.web_design)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.web_design)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS web_design,
        CASE
            WHEN (COALESCE(bm.micro_organisms, ('-1'::integer)::double precision) <> COALESCE(ls.micro_organisms, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.micro_organisms)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.micro_organisms)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS micro_organisms,
        CASE
            WHEN (COALESCE(bm.televison, ('-1'::integer)::double precision) <> COALESCE(ls.televison, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.televison)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.televison)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS televison,
        CASE
            WHEN (COALESCE(bm.protection_and_alarm_systems, ('-1'::integer)::double precision) <> COALESCE(ls.protection_and_alarm_systems, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.protection_and_alarm_systems)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.protection_and_alarm_systems)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS protection_and_alarm_systems,
        CASE
            WHEN (COALESCE(bm.antennas, ('-1'::integer)::double precision) <> COALESCE(ls.antennas, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.antennas)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.antennas)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS antennas,
        CASE
            WHEN (COALESCE(bm.electronic_device_maintenance, ('-1'::integer)::double precision) <> COALESCE(ls.electronic_device_maintenance, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.electronic_device_maintenance)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.electronic_device_maintenance)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS electronic_device_maintenance,
        CASE
            WHEN (COALESCE(bm.community_language, ('-1'::integer)::double precision) <> COALESCE(ls.community_language, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.community_language)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.community_language)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS community_language,
        CASE
            WHEN (COALESCE(bm.math, ('-1'::integer)::double precision) <> COALESCE(ls.math, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.math)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.math)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS math,
        CASE
            WHEN (COALESCE(bm.history, ('-1'::integer)::double precision) <> COALESCE(ls.history, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.history)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.history)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS history,
        CASE
            WHEN (COALESCE(bm.biology, ('-1'::integer)::double precision) <> COALESCE(ls.biology, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.biology)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.biology)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS biology,
        CASE
            WHEN (COALESCE(bm.philosophy, ('-1'::integer)::double precision) <> COALESCE(ls.philosophy, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.philosophy)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.philosophy)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS philosophy,
        CASE
            WHEN (COALESCE(bm.sociology, ('-1'::integer)::double precision) <> COALESCE(ls.sociology, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.sociology)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.sociology)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS sociology,
        CASE
            WHEN (COALESCE(bm.science_of_woman, ('-1'::integer)::double precision) <> COALESCE(ls.science_of_woman, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.science_of_woman)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.science_of_woman)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS science_of_woman,
        CASE
            WHEN (COALESCE(bm.physics, ('-1'::integer)::double precision) <> COALESCE(ls.physics, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.physics)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.physics)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS physics,
        CASE
            WHEN (COALESCE(bm.geography, ('-1'::integer)::double precision) <> COALESCE(ls.geography, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.geography)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.geography)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS geography,
        CASE
            WHEN (COALESCE(bm.chemistry, ('-1'::integer)::double precision) <> COALESCE(ls.chemistry, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.chemistry)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.chemistry)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS chemistry,
        CASE
            WHEN (COALESCE(bm.year_9, ('-1'::integer)::double precision) <> COALESCE(ls.year_9, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.year_9)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.year_9)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS year_9,
        CASE
            WHEN (COALESCE(bm.kurdish_language, ('-1'::integer)::double precision) <> COALESCE(ls.kurdish_language, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.kurdish_language)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.kurdish_language)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS kurdish_language,
        CASE
            WHEN (COALESCE(bm.english_language, ('-1'::integer)::double precision) <> COALESCE(ls.english_language, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.english_language)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.english_language)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS english_language,
        CASE
            WHEN (COALESCE(bm.turning, ('-1'::integer)::double precision) <> COALESCE(ls.turning, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.turning)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.turning)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS turning,
        CASE
            WHEN (COALESCE(bm.industrial_drawing, ('-1'::integer)::double precision) <> COALESCE(ls.industrial_drawing, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.industrial_drawing)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.industrial_drawing)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS industrial_drawing,
        CASE
            WHEN (COALESCE(bm.cnc, ('-1'::integer)::double precision) <> COALESCE(ls.cnc, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.cnc)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.cnc)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS cnc,
        CASE
            WHEN (COALESCE(bm.separator, ('-1'::integer)::double precision) <> COALESCE(ls.separator, ('-1'::integer)::double precision)) THEN ((COALESCE((bm.separator)::text, '<NULL>'::text) || ' => '::text) || COALESCE((ls.separator)::text, '<NULL>'::text))
            ELSE NULL::text
        END AS separator
   FROM ((public.university_mofadala_baccalaureate_marks bm
     JOIN public.acorn_university_students s ON ((s.legacy_import_id = bm.id)))
     JOIN public.acorn_university_legacy_fulls ls ON ((ls.student_id = s.id)))
  WHERE ((EXTRACT(year FROM bm.certificate_date) = (2025)::numeric) AND (((COALESCE(bm.gender, ('<NULL>'::text)::character varying))::text <> COALESCE(ls.gender, '<NULL>'::text)) OR ((COALESCE(bm.ethnicity, ('<NULL>'::text)::character varying))::text <> (COALESCE(ls.ethnicity, ('<NULL>'::text)::character varying))::text) OR ((COALESCE(bm.marital_status, ('<NULL>'::text)::character varying))::text <> COALESCE((ls.marital_status)::text, '<NULL>'::text)) OR ((COALESCE(bm.religion, ('<NULL>'::text)::character varying))::text <> COALESCE((ls.religion)::text, '<NULL>'::text)) OR (COALESCE(bm.code, '<NULL>'::text) <> COALESCE((ls.code)::text, '<NULL>'::text)) OR (COALESCE((bm.father_name)::text, '<NULL>'::text) <> COALESCE((ls.father_name)::text, '<NULL>'::text)) OR (COALESCE((bm.mother_name)::text, '<NULL>'::text) <> COALESCE((ls.mother_name)::text, '<NULL>'::text)) OR (COALESCE((bm.full_name)::text, '<NULL>'::text) <> COALESCE((ls.full_name)::text, '<NULL>'::text)) OR (COALESCE((bm.surname)::text, '<NULL>'::text) <> COALESCE((ls.surname)::text, '<NULL>'::text)) OR (COALESCE((bm.birth_date)::date, '3000-01-01'::date) <> COALESCE(((ls.birth_date)::date)::timestamp without time zone, ('3000-01-01'::date)::timestamp without time zone)) OR (COALESCE((bm.certificate)::text, '<NULL>'::text) <> COALESCE((ls.certificate)::text, '<NULL>'::text)) OR (COALESCE((bm.certificate_language)::text, '<NULL>'::text) <> COALESCE((ls.certificate_language)::text, '<NULL>'::text)) OR (COALESCE((bm.national_id)::text, '<NULL>'::text) <> COALESCE((ls.national_id)::text, '<NULL>'::text)) OR (COALESCE(bm.place_and_date_of_birth, '<NULL>'::text) <> (COALESCE(ls.place_and_date_of_birth, '<NULL>'::character varying))::text) OR (COALESCE(bm.arabic_language, ('-1'::integer)::double precision) <> COALESCE(ls.arabic_language, ('-1'::integer)::double precision)) OR (COALESCE(bm.year_10, ('-1'::integer)::double precision) <> COALESCE(ls.year_10, ('-1'::integer)::double precision)) OR (COALESCE(bm.year_11, ('-1'::integer)::double precision) <> COALESCE(ls.year_11, ('-1'::integer)::double precision)) OR (COALESCE(bm.physics_and_chemistry, ('-1'::integer)::double precision) <> COALESCE(ls.physics_and_chemistry, ('-1'::integer)::double precision)) OR (COALESCE(bm.anatomy, ('-1'::integer)::double precision) <> COALESCE(ls.anatomy, ('-1'::integer)::double precision)) OR (COALESCE(bm.nursing, ('-1'::integer)::double precision) <> COALESCE(ls.nursing, ('-1'::integer)::double precision)) OR (COALESCE(bm.rays, ('-1'::integer)::double precision) <> COALESCE(ls.rays, ('-1'::integer)::double precision)) OR (COALESCE(bm.anesthetization, ('-1'::integer)::double precision) <> COALESCE(ls.anesthetization, ('-1'::integer)::double precision)) OR (COALESCE(bm.physical_therapy, ('-1'::integer)::double precision) <> COALESCE(ls.physical_therapy, ('-1'::integer)::double precision)) OR (COALESCE(bm.pharmacy, ('-1'::integer)::double precision) <> COALESCE(ls.pharmacy, ('-1'::integer)::double precision)) OR (COALESCE(bm.lab, ('-1'::integer)::double precision) <> COALESCE(ls.lab, ('-1'::integer)::double precision)) OR (COALESCE(bm.internal_combustion_engines, ('-1'::integer)::double precision) <> COALESCE(ls.internal_combustion_engines, ('-1'::integer)::double precision)) OR (COALESCE(bm.mechanical_engineering_drawing_3, ('-1'::integer)::double precision) <> COALESCE(ls.mechanical_engineering_drawing_3, ('-1'::integer)::double precision)) OR (COALESCE(bm.vehicle_control_systems, ('-1'::integer)::double precision) <> COALESCE(ls.vehicle_control_systems, ('-1'::integer)::double precision)) OR (COALESCE(bm.diesel_fuel_injection_systems, ('-1'::integer)::double precision) <> COALESCE(ls.diesel_fuel_injection_systems, ('-1'::integer)::double precision)) OR (COALESCE(bm.electrical_appliances_2, ('-1'::integer)::double precision) <> COALESCE(ls.electrical_appliances_2, ('-1'::integer)::double precision)) OR (COALESCE(bm.automated_command_and_control, ('-1'::integer)::double precision) <> COALESCE(ls.automated_command_and_control, ('-1'::integer)::double precision)) OR (COALESCE(bm.electrical_engineering_drawing_3, ('-1'::integer)::double precision) <> COALESCE(ls.electrical_engineering_drawing_3, ('-1'::integer)::double precision)) OR (COALESCE(bm.hardware_and_software_maintenance_2, ('-1'::integer)::double precision) <> COALESCE(ls.hardware_and_software_maintenance_2, ('-1'::integer)::double precision)) OR (COALESCE(bm.programming_3, ('-1'::integer)::double precision) <> COALESCE(ls.programming_3, ('-1'::integer)::double precision)) OR (COALESCE(bm.network_management, ('-1'::integer)::double precision) <> COALESCE(ls.network_management, ('-1'::integer)::double precision)) OR (COALESCE(bm.computer_applications, ('-1'::integer)::double precision) <> COALESCE(ls.computer_applications, ('-1'::integer)::double precision)) OR (COALESCE(bm.marketing, ('-1'::integer)::double precision) <> COALESCE(ls.marketing, ('-1'::integer)::double precision)) OR (COALESCE(bm.bank_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.bank_accounting, ('-1'::integer)::double precision)) OR (COALESCE(bm.financial_institutions_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.financial_institutions_accounting, ('-1'::integer)::double precision)) OR (COALESCE(bm.private_accounting, ('-1'::integer)::double precision) <> COALESCE(ls.private_accounting, ('-1'::integer)::double precision)) OR (COALESCE(bm.computer, ('-1'::integer)::double precision) <> COALESCE(ls.computer, ('-1'::integer)::double precision)) OR (COALESCE(bm.financial_mathematics, ('-1'::integer)::double precision) <> COALESCE(ls.financial_mathematics, ('-1'::integer)::double precision)) OR (COALESCE(bm.statistics, ('-1'::integer)::double precision) <> COALESCE(ls.statistics, ('-1'::integer)::double precision)) OR (COALESCE(bm.food_industries, ('-1'::integer)::double precision) <> COALESCE(ls.food_industries, ('-1'::integer)::double precision)) OR (COALESCE(bm.dairy, ('-1'::integer)::double precision) <> COALESCE(ls.dairy, ('-1'::integer)::double precision)) OR (COALESCE(bm.gardening, ('-1'::integer)::double precision) <> COALESCE(ls.gardening, ('-1'::integer)::double precision)) OR (COALESCE(bm.farm_animal, ('-1'::integer)::double precision) <> COALESCE(ls.farm_animal, ('-1'::integer)::double precision)) OR (COALESCE(bm.agricultural_pests, ('-1'::integer)::double precision) <> COALESCE(ls.agricultural_pests, ('-1'::integer)::double precision)) OR (COALESCE(bm.sport, ('-1'::integer)::double precision) <> COALESCE(ls.sport, ('-1'::integer)::double precision)) OR (COALESCE(bm.art, ('-1'::integer)::double precision) <> COALESCE(ls.art, ('-1'::integer)::double precision)) OR (COALESCE(bm.electronics_3, ('-1'::integer)::double precision) <> COALESCE(ls.electronics_3, ('-1'::integer)::double precision)) OR (COALESCE(bm.web_design, ('-1'::integer)::double precision) <> COALESCE(ls.web_design, ('-1'::integer)::double precision)) OR (COALESCE(bm.micro_organisms, ('-1'::integer)::double precision) <> COALESCE(ls.micro_organisms, ('-1'::integer)::double precision)) OR (COALESCE(bm.televison, ('-1'::integer)::double precision) <> COALESCE(ls.televison, ('-1'::integer)::double precision)) OR (COALESCE(bm.protection_and_alarm_systems, ('-1'::integer)::double precision) <> COALESCE(ls.protection_and_alarm_systems, ('-1'::integer)::double precision)) OR (COALESCE(bm.antennas, ('-1'::integer)::double precision) <> COALESCE(ls.antennas, ('-1'::integer)::double precision)) OR (COALESCE(bm.electronic_device_maintenance, ('-1'::integer)::double precision) <> COALESCE(ls.electronic_device_maintenance, ('-1'::integer)::double precision)) OR (COALESCE(bm.community_language, ('-1'::integer)::double precision) <> COALESCE(ls.community_language, ('-1'::integer)::double precision)) OR (COALESCE(bm.math, ('-1'::integer)::double precision) <> COALESCE(ls.math, ('-1'::integer)::double precision)) OR (COALESCE(bm.history, ('-1'::integer)::double precision) <> COALESCE(ls.history, ('-1'::integer)::double precision)) OR (COALESCE(bm.biology, ('-1'::integer)::double precision) <> COALESCE(ls.biology, ('-1'::integer)::double precision)) OR (COALESCE(bm.philosophy, ('-1'::integer)::double precision) <> COALESCE(ls.philosophy, ('-1'::integer)::double precision)) OR (COALESCE(bm.sociology, ('-1'::integer)::double precision) <> COALESCE(ls.sociology, ('-1'::integer)::double precision)) OR (COALESCE(bm.science_of_woman, ('-1'::integer)::double precision) <> COALESCE(ls.science_of_woman, ('-1'::integer)::double precision)) OR (COALESCE(bm.physics, ('-1'::integer)::double precision) <> COALESCE(ls.physics, ('-1'::integer)::double precision)) OR (COALESCE(bm.geography, ('-1'::integer)::double precision) <> COALESCE(ls.geography, ('-1'::integer)::double precision)) OR (COALESCE(bm.chemistry, ('-1'::integer)::double precision) <> COALESCE(ls.chemistry, ('-1'::integer)::double precision)) OR (COALESCE(bm.year_9, ('-1'::integer)::double precision) <> COALESCE(ls.year_9, ('-1'::integer)::double precision)) OR (COALESCE(bm.kurdish_language, ('-1'::integer)::double precision) <> COALESCE(ls.kurdish_language, ('-1'::integer)::double precision)) OR (COALESCE(bm.english_language, ('-1'::integer)::double precision) <> COALESCE(ls.english_language, ('-1'::integer)::double precision)) OR (COALESCE(bm.turning, ('-1'::integer)::double precision) <> COALESCE(ls.turning, ('-1'::integer)::double precision)) OR (COALESCE(bm.industrial_drawing, ('-1'::integer)::double precision) <> COALESCE(ls.industrial_drawing, ('-1'::integer)::double precision)) OR (COALESCE(bm.cnc, ('-1'::integer)::double precision) <> COALESCE(ls.cnc, ('-1'::integer)::double precision)) OR (COALESCE(bm.separator, ('-1'::integer)::double precision) <> COALESCE(ls.separator, ('-1'::integer)::double precision)) OR ((COALESCE((floor((bm.final_avg)::numeric))::double precision, ('-1'::integer)::double precision) <> COALESCE((floor((ls.final_avg)::numeric))::double precision, ('-1'::integer)::double precision)) AND (COALESCE((round((bm.final_avg)::numeric, 1))::double precision, ('-1'::integer)::double precision) <> COALESCE((round((ls.final_avg)::numeric, 1))::double precision, ('-1'::integer)::double precision))) OR (abs((bm.final_avg - ls.final_avg)) > (0.3)::double precision) OR (COALESCE((bm.result)::text, '<NULL>'::text) <> COALESCE(ls.result, '<NULL>'::text))));


ALTER VIEW public.acorn_university_legacy_updates OWNER TO university;

--
-- Name: VIEW acorn_university_legacy_updates; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_university_legacy_updates IS 'menu: false
labels:
  en: Legacy update
labels-plural:
  en: Legacy updates
list-record-url: acorn/university/students/update/:id';


--
-- Name: COLUMN acorn_university_legacy_updates.legacy_import_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_updates.legacy_import_id IS 'columnClass: normal';


--
-- Name: COLUMN acorn_university_legacy_updates.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_updates.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    tab-location: 2
    column-exclude: true
    field-exclude: true
    name-object: true
    labels:
      en: Legacy diff
    labels-plural:
      en: Legacy diffs
labels:
  en: Student
labels-plural:
  en: Students';


--
-- Name: COLUMN acorn_university_legacy_updates.nabu_county; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_updates.nabu_county IS 'invisible: true';


--
-- Name: COLUMN acorn_university_legacy_updates.county_user_group_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_updates.county_user_group_id IS 'extra-foreign-key: 
  table: acorn_user_user_groups
  comment:
    tab-location: 2
	can-filter: true
labels:
  en: County
labels-plural:
  en: Counties';


--
-- Name: COLUMN acorn_university_legacy_updates.national_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_legacy_updates.national_id IS 'columnClass: normal';


--
-- Name: acorn_university_olapcube; Type: MATERIALIZED VIEW; Schema: public; Owner: university
--

CREATE MATERIALIZED VIEW public.acorn_university_olapcube AS
 SELECT s.id,
    s.id AS student_id,
    (((u.name)::text || ' '::text) || (u.surname)::text) AS student_name,
    cys.course_id,
    ugs_c.name AS course_name,
    ays.academic_year_id,
    ay.name AS academic_year_name,
    ays.semester_id,
    sem.name AS semester_name,
    cys.course_year_id,
    cy.name AS course_year_name,
    cm.material_id,
    m.name AS material_name,
    c_s.course_type_id,
    ct.name AS course_type_name,
    u.ethnicity_id,
    COALESCE(eth.name, '-'::character varying) AS ethnicity_name,
    u.religion_id,
    COALESCE(rel.name, '-'::character varying) AS religion_name,
    ss.student_status_id,
    COALESCE(sts.name, '-'::character varying) AS student_status_name
   FROM ((((((((((((((((((public.acorn_university_students s
     JOIN public.acorn_user_users u ON ((s.user_id = u.id)))
     JOIN public.acorn_user_user_group_version ugv ON ((u.id = ugv.user_id)))
     JOIN public.acorn_university_hierarchies hi_s ON ((hi_s.user_group_version_id = ugv.user_group_version_id)))
     JOIN public.acorn_university_entities en_c ON ((en_c.id = hi_s.entity_id)))
     JOIN public.acorn_university_course_year_semesters cys ON ((cys.entity_id = en_c.id)))
     JOIN public.acorn_university_courses c_s ON ((cys.course_id = c_s.id)))
     JOIN public.acorn_user_user_groups ugs_c ON ((ugs_c.id = en_c.user_group_id)))
     JOIN public.acorn_university_academic_year_semesters ays ON ((ays.id = cys.academic_year_semester_id)))
     JOIN public.acorn_university_academic_years ay ON ((ays.academic_year_id = ay.id)))
     JOIN public.acorn_university_semesters sem ON ((ays.semester_id = sem.id)))
     JOIN public.acorn_university_course_years cy ON ((cy.id = cys.course_year_id)))
     JOIN public.acorn_university_course_materials cm ON ((cm.course_year_semester_id = cys.id)))
     JOIN public.acorn_university_materials m ON ((cm.material_id = m.id)))
     LEFT JOIN public.acorn_university_course_types ct ON ((c_s.course_type_id = ct.id)))
     LEFT JOIN public.acorn_user_ethnicities eth ON ((u.ethnicity_id = eth.id)))
     LEFT JOIN public.acorn_user_religions rel ON ((u.religion_id = rel.id)))
     LEFT JOIN public.acorn_university_student_status ss ON ((ss.student_id = s.id)))
     LEFT JOIN public.acorn_university_student_statuses sts ON ((ss.student_status_id = sts.id)))
  WITH NO DATA;


ALTER MATERIALIZED VIEW public.acorn_university_olapcube OWNER TO university;

--
-- Name: MATERIALIZED VIEW acorn_university_olapcube; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON MATERIALIZED VIEW public.acorn_university_olapcube IS 'menu: false';


--
-- Name: COLUMN acorn_university_olapcube.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.course_id IS 'extra-foreign-key: 
  table: acorn_university_courses
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.semester_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.semester_id IS 'extra-foreign-key: 
  table: acorn_university_semesters
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.course_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.course_year_id IS 'extra-foreign-key: 
  table: acorn_university_course_years
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.material_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.material_id IS 'extra-foreign-key: 
  table: acorn_university_materials
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.course_type_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.course_type_id IS 'extra-foreign-key: 
  table: acorn_university_course_types
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.ethnicity_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.ethnicity_id IS 'extra-foreign-key: 
  table: acorn_user_ethnicities
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.religion_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.religion_id IS 'extra-foreign-key: 
  table: acorn_user_religions
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: COLUMN acorn_university_olapcube.student_status_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_olapcube.student_status_id IS 'extra-foreign-key: 
  table: acorn_university_student_statuses
  comment:
    field-exclude: true
    column-exclude: true';


--
-- Name: acorn_university_schools; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_schools (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    "parent_1[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL,
    "parent_2[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL
);


ALTER TABLE public.acorn_university_schools OWNER TO university;

--
-- Name: TABLE acorn_university_schools; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_schools IS 'order: 14
labels:
  en: School
  ku: Dibistan
  ar: مدرسة
labels-plural:
  en: Schools
  ku: Dibistanên
  ar: مدرسة';


--
-- Name: COLUMN acorn_university_schools."parent_1[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_schools."parent_1[entity]" IS 'labels: 
  en: Region/Education Authority
labels-plural:
  en: Regions/Education Authorities
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: COLUMN acorn_university_schools."parent_2[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_schools."parent_2[entity]" IS 'labels: 
  en: Ancestor 2
labels-plural:
  en: Ancestors 2
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: acorn_university_student_course_material_addition; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_course_material_addition (
    student_id uuid NOT NULL,
    course_material_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_student_course_material_addition OWNER TO university;

--
-- Name: TABLE acorn_university_student_course_material_addition; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_course_material_addition IS 'menu: false
labels:
  en: Student Addition
  ku: Xwendekar zedekirin
  ar: ملحوظة
labels-plural:
  en: Student Additions
  ku: Xwendekar zedekirinên
  ar: ملحوظة
';


--
-- Name: acorn_university_student_course_material_removal; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_course_material_removal (
    student_id uuid NOT NULL,
    course_material_id uuid NOT NULL,
    created_by_user_id uuid NOT NULL,
    updated_by_user_id uuid,
    server_id uuid NOT NULL,
    created_at timestamp(0) without time zone DEFAULT now() NOT NULL,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_university_student_course_material_removal OWNER TO university;

--
-- Name: TABLE acorn_university_student_course_material_removal; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_course_material_removal IS 'menu: false
labels:
  en: Student Removal
  ku: Xwendekar kemkirin
  ar: ملحوظة
labels-plural:
  en: Student Removals
  ku: Xwendekar kemkirinên
  ar: ملحوظة
';


--
-- Name: acorn_university_student_lookups; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_university_student_lookups AS
SELECT
    NULL::uuid AS id,
    NULL::uuid AS student_id,
    NULL::uuid AS school_id,
    NULL::uuid AS course_id,
    NULL::json AS course_year_ids,
    NULL::character varying(1024) AS legacy_import_student_type,
    NULL::character varying(1024) AS code,
    NULL::uuid AS academic_year_id,
    NULL::character varying(255) AS name,
    NULL::character varying(255) AS surname,
    NULL::text AS full_name,
    NULL::character varying(1024) AS fathers_name;


ALTER VIEW public.acorn_university_student_lookups OWNER TO university;

--
-- Name: VIEW acorn_university_student_lookups; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON VIEW public.acorn_university_student_lookups IS 'menu: false
list-record-url: acorn/university/students/update/:id
labels:
  en: Student Lookup
  ku: Lêgerîna Xwendekaran
  ar: عمليات البحث عن الطلاب
labels-plural:
  en: Student Lookups
  ku: Lêgerînan Xwendekaran
  ar: عمليات البحث عن الطلاب
labels-from:
  - acorn_university_students
  - acorn_user_users';


--
-- Name: COLUMN acorn_university_student_lookups.student_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_lookups.student_id IS 'extra-foreign-key: 
  table: acorn_university_students
  comment:
    global-scope: from
    tab-location: 2
    invisible: true
    advanced: true
    labels:
      en: Student Lookup
      ku: Lêgerîna Xwendekaran
      ar: عمليات البحث عن الطلاب
    labels-plural:
      en: Student Lookups
      ku: Lêgerînan Xwendekaran
      ar: عمليات البحث عن الطلاب
can-filter: false';


--
-- Name: COLUMN acorn_university_student_lookups.school_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_lookups.school_id IS 'extra-foreign-key: 
  table: acorn_university_schools
  comment:
    global-scope: to
    tab-location: 2
    invisible: true
no-relation-manager: true';


--
-- Name: COLUMN acorn_university_student_lookups.course_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_lookups.course_id IS 'extra-foreign-key: 
  table: acorn_university_courses
  comment:
    tab-location: 2
    invisible: true
    hidden: true
    filter-search-name-select: select ugs.name from acorn_user_user_groups ugs where ugs.id = acorn_university_entities.user_group_id
no-relation-manager: true
';


--
-- Name: COLUMN acorn_university_student_lookups.course_year_ids; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_lookups.course_year_ids IS 'column-type: partial
column-partial: multi
multi:
  model: Acorn\University\Models\Course
';


--
-- Name: COLUMN acorn_university_student_lookups.academic_year_id; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_student_lookups.academic_year_id IS 'extra-foreign-key: 
  table: acorn_university_academic_years
  comment:
    global-scope: to
    tab-location: 1
    invisible: true';


--
-- Name: acorn_university_student_type; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_student_type (
    student_id uuid NOT NULL,
    student_type_id uuid NOT NULL
);


ALTER TABLE public.acorn_university_student_type OWNER TO university;

--
-- Name: TABLE acorn_university_student_type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_student_type IS 'labels:
  en: Type
  ku: Cura
  ar: يكتب
labels-plural:
  en: Types
  ku: Curên
  ar: أنواع';


--
-- Name: acorn_university_teachers; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_teachers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL
);


ALTER TABLE public.acorn_university_teachers OWNER TO university;

--
-- Name: TABLE acorn_university_teachers; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_teachers IS 'order: 510
labels:
  en: Teacher
  ku: Mamoste
  ar: مدرس
labels-plural:
  en: Teachers
  ku: Mamostên
  ar: مدرس
';


--
-- Name: acorn_university_universities; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_university_universities (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    "parent_1[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL,
    "parent_2[entity]" character varying(1024) GENERATED ALWAYS AS (id) STORED NOT NULL
);


ALTER TABLE public.acorn_university_universities OWNER TO university;

--
-- Name: TABLE acorn_university_universities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON TABLE public.acorn_university_universities IS 'plugin-icon: book
plugin-url: acorn/university/students
plugin-names:
  en: Universities
  ku: Zaningehên
  ar: الجامعات
order: 20
labels:
  en: University
  ku: Zaningeh
  ar: الجامعات
labels-plural:
  en: Universities
  ku: Zaningehên
  ar: الجامعات
';


--
-- Name: COLUMN acorn_university_universities."parent_1[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_universities."parent_1[entity]" IS 'labels: 
  en: Education Authority/Region
labels-plural:
  en: Education Authorities/Regions
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: COLUMN acorn_university_universities."parent_2[entity]"; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON COLUMN public.acorn_university_universities."parent_2[entity]" IS 'labels: 
  en: Ancestor 2
labels-plural:
  en: Ancestors 2
column-type: partial
field-exclude: true
partial: parent
relation: entity_university_hierarchies__entity';


--
-- Name: acorn_user_mail_blockers; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_mail_blockers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    email character varying(255),
    template character varying(255),
    user_id uuid,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_user_mail_blockers OWNER TO university;

--
-- Name: acorn_user_role_user; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_role_user (
    user_id uuid NOT NULL,
    role_id uuid NOT NULL
);


ALTER TABLE public.acorn_user_role_user OWNER TO university;

--
-- Name: acorn_user_roles; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255),
    permissions text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_user_roles OWNER TO university;

--
-- Name: acorn_user_throttle; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_throttle (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    ip_address character varying(255),
    attempts integer DEFAULT 0 NOT NULL,
    last_attempt_at timestamp(0) without time zone,
    is_suspended boolean DEFAULT false NOT NULL,
    suspended_at timestamp(0) without time zone,
    is_banned boolean DEFAULT false NOT NULL,
    banned_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_user_throttle OWNER TO university;

--
-- Name: acorn_user_user_group; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_user_group (
    user_id uuid NOT NULL,
    user_group_id uuid NOT NULL
);


ALTER TABLE public.acorn_user_user_group OWNER TO university;

--
-- Name: acorn_user_user_group_types; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.acorn_user_user_group_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255),
    description character varying(255),
    colour character varying(1024),
    image character varying(1024),
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.acorn_user_user_group_types OWNER TO university;

--
-- Name: acorn_user_user_group_version_usages; Type: VIEW; Schema: public; Owner: university
--

CREATE VIEW public.acorn_user_user_group_version_usages AS
 SELECT NULL::uuid AS user_group_version_id,
    NULL::character varying(1024) AS "table",
    NULL::uuid AS id;


ALTER VIEW public.acorn_user_user_group_version_usages OWNER TO university;

--
-- Name: backend_access_log; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.backend_access_log (
    id integer NOT NULL,
    user_id integer NOT NULL,
    ip_address character varying(255),
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.backend_access_log OWNER TO university;

--
-- Name: backend_access_log_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.backend_access_log_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_access_log_id_seq OWNER TO university;

--
-- Name: backend_access_log_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.backend_access_log_id_seq OWNED BY public.backend_access_log.id;


--
-- Name: backend_user_groups; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.backend_user_groups (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    code character varying(255),
    description text,
    is_new_user_default boolean DEFAULT false NOT NULL
);


ALTER TABLE public.backend_user_groups OWNER TO university;

--
-- Name: backend_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.backend_user_groups_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_user_groups_id_seq OWNER TO university;

--
-- Name: backend_user_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.backend_user_groups_id_seq OWNED BY public.backend_user_groups.id;


--
-- Name: backend_user_preferences; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.backend_user_preferences (
    id integer NOT NULL,
    user_id integer NOT NULL,
    namespace character varying(100) NOT NULL,
    "group" character varying(50) NOT NULL,
    item character varying(150) NOT NULL,
    value text
);


ALTER TABLE public.backend_user_preferences OWNER TO university;

--
-- Name: backend_user_preferences_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.backend_user_preferences_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_user_preferences_id_seq OWNER TO university;

--
-- Name: backend_user_preferences_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.backend_user_preferences_id_seq OWNED BY public.backend_user_preferences.id;


--
-- Name: backend_user_roles; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.backend_user_roles (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    code character varying(255),
    description text,
    permissions text,
    is_system boolean DEFAULT false NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.backend_user_roles OWNER TO university;

--
-- Name: backend_user_roles_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.backend_user_roles_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_user_roles_id_seq OWNER TO university;

--
-- Name: backend_user_roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.backend_user_roles_id_seq OWNED BY public.backend_user_roles.id;


--
-- Name: backend_user_throttle; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.backend_user_throttle (
    id integer NOT NULL,
    user_id integer,
    ip_address character varying(255),
    attempts integer DEFAULT 0 NOT NULL,
    last_attempt_at timestamp(0) without time zone,
    is_suspended boolean DEFAULT false NOT NULL,
    suspended_at timestamp(0) without time zone,
    is_banned boolean DEFAULT false NOT NULL,
    banned_at timestamp(0) without time zone
);


ALTER TABLE public.backend_user_throttle OWNER TO university;

--
-- Name: backend_user_throttle_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.backend_user_throttle_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_user_throttle_id_seq OWNER TO university;

--
-- Name: backend_user_throttle_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.backend_user_throttle_id_seq OWNED BY public.backend_user_throttle.id;


--
-- Name: backend_users_groups; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.backend_users_groups (
    user_id integer NOT NULL,
    user_group_id integer NOT NULL,
    deleted_at timestamp(0) without time zone
);


ALTER TABLE public.backend_users_groups OWNER TO university;

--
-- Name: backend_users_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.backend_users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_users_id_seq OWNER TO university;

--
-- Name: backend_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.backend_users_id_seq OWNED BY public.backend_users.id;


--
-- Name: cache; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.cache (
    key character varying(255) NOT NULL,
    value text NOT NULL,
    expiration integer NOT NULL
);


ALTER TABLE public.cache OWNER TO university;

--
-- Name: cms_theme_data; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.cms_theme_data (
    id integer NOT NULL,
    theme character varying(255),
    data text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.cms_theme_data OWNER TO university;

--
-- Name: cms_theme_data_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.cms_theme_data_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.cms_theme_data_id_seq OWNER TO university;

--
-- Name: cms_theme_data_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.cms_theme_data_id_seq OWNED BY public.cms_theme_data.id;


--
-- Name: cms_theme_logs; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.cms_theme_logs (
    id integer NOT NULL,
    type character varying(20) NOT NULL,
    theme character varying(255),
    template character varying(255),
    old_template character varying(255),
    content text,
    old_content text,
    user_id integer,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.cms_theme_logs OWNER TO university;

--
-- Name: cms_theme_logs_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.cms_theme_logs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.cms_theme_logs_id_seq OWNER TO university;

--
-- Name: cms_theme_logs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.cms_theme_logs_id_seq OWNED BY public.cms_theme_logs.id;


--
-- Name: cms_theme_templates; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.cms_theme_templates (
    id integer NOT NULL,
    source character varying(255) NOT NULL,
    path character varying(255) NOT NULL,
    content text NOT NULL,
    file_size integer NOT NULL,
    updated_at timestamp(0) without time zone,
    deleted_at timestamp(0) without time zone
);


ALTER TABLE public.cms_theme_templates OWNER TO university;

--
-- Name: cms_theme_templates_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.cms_theme_templates_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.cms_theme_templates_id_seq OWNER TO university;

--
-- Name: cms_theme_templates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.cms_theme_templates_id_seq OWNED BY public.cms_theme_templates.id;


--
-- Name: deferred_bindings; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.deferred_bindings (
    id integer NOT NULL,
    master_type character varying(255) NOT NULL,
    master_field character varying(255) NOT NULL,
    slave_type character varying(255) NOT NULL,
    slave_id character varying(255) NOT NULL,
    session_key character varying(255) NOT NULL,
    is_bind boolean DEFAULT true NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    pivot_data text
);


ALTER TABLE public.deferred_bindings OWNER TO university;

--
-- Name: deferred_bindings_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.deferred_bindings_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.deferred_bindings_id_seq OWNER TO university;

--
-- Name: deferred_bindings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.deferred_bindings_id_seq OWNED BY public.deferred_bindings.id;


--
-- Name: failed_jobs; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.failed_jobs (
    id integer NOT NULL,
    connection text NOT NULL,
    queue text NOT NULL,
    payload text NOT NULL,
    failed_at timestamp(0) without time zone,
    exception text,
    uuid character varying(255)
);


ALTER TABLE public.failed_jobs OWNER TO university;

--
-- Name: failed_jobs_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.failed_jobs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.failed_jobs_id_seq OWNER TO university;

--
-- Name: failed_jobs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.failed_jobs_id_seq OWNED BY public.failed_jobs.id;


--
-- Name: job_batches; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.job_batches (
    id character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    total_jobs integer NOT NULL,
    pending_jobs integer NOT NULL,
    failed_jobs integer NOT NULL,
    failed_job_ids text NOT NULL,
    options text,
    cancelled_at integer,
    created_at integer NOT NULL,
    finished_at integer
);


ALTER TABLE public.job_batches OWNER TO university;

--
-- Name: jobs; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.jobs (
    id bigint NOT NULL,
    queue character varying(255) NOT NULL,
    payload text NOT NULL,
    attempts smallint NOT NULL,
    reserved_at integer,
    available_at integer NOT NULL,
    created_at integer NOT NULL
);


ALTER TABLE public.jobs OWNER TO university;

--
-- Name: jobs_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.jobs_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.jobs_id_seq OWNER TO university;

--
-- Name: jobs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.jobs_id_seq OWNED BY public.jobs.id;


--
-- Name: migrations; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.migrations (
    id integer NOT NULL,
    migration character varying(255) NOT NULL,
    batch integer NOT NULL
);


ALTER TABLE public.migrations OWNER TO university;

--
-- Name: migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.migrations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.migrations_id_seq OWNER TO university;

--
-- Name: migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.migrations_id_seq OWNED BY public.migrations.id;


--
-- Name: winter_location_countries; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.winter_location_countries (
    id integer NOT NULL,
    is_enabled boolean DEFAULT false NOT NULL,
    name character varying(255) NOT NULL,
    code character varying(255) NOT NULL,
    is_pinned boolean DEFAULT false NOT NULL
);


ALTER TABLE public.winter_location_countries OWNER TO university;

--
-- Name: rainlab_location_countries_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.rainlab_location_countries_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.rainlab_location_countries_id_seq OWNER TO university;

--
-- Name: rainlab_location_countries_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.rainlab_location_countries_id_seq OWNED BY public.winter_location_countries.id;


--
-- Name: winter_location_states; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.winter_location_states (
    id integer NOT NULL,
    country_id integer NOT NULL,
    name character varying(255) NOT NULL,
    code character varying(255) NOT NULL,
    is_enabled boolean DEFAULT true NOT NULL
);


ALTER TABLE public.winter_location_states OWNER TO university;

--
-- Name: rainlab_location_states_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.rainlab_location_states_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.rainlab_location_states_id_seq OWNER TO university;

--
-- Name: rainlab_location_states_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.rainlab_location_states_id_seq OWNED BY public.winter_location_states.id;


--
-- Name: winter_translate_attributes; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.winter_translate_attributes (
    id integer NOT NULL,
    locale character varying(255) NOT NULL,
    model_id character varying(255),
    model_type character varying(255),
    attribute_data text
);


ALTER TABLE public.winter_translate_attributes OWNER TO university;

--
-- Name: rainlab_translate_attributes_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.rainlab_translate_attributes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.rainlab_translate_attributes_id_seq OWNER TO university;

--
-- Name: rainlab_translate_attributes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.rainlab_translate_attributes_id_seq OWNED BY public.winter_translate_attributes.id;


--
-- Name: winter_translate_indexes; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.winter_translate_indexes (
    id integer NOT NULL,
    locale character varying(255) NOT NULL,
    model_id character varying(255),
    model_type character varying(255),
    item character varying(255),
    value text
);


ALTER TABLE public.winter_translate_indexes OWNER TO university;

--
-- Name: rainlab_translate_indexes_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.rainlab_translate_indexes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.rainlab_translate_indexes_id_seq OWNER TO university;

--
-- Name: rainlab_translate_indexes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.rainlab_translate_indexes_id_seq OWNED BY public.winter_translate_indexes.id;


--
-- Name: winter_translate_locales; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.winter_translate_locales (
    id integer NOT NULL,
    code character varying(255) NOT NULL,
    name character varying(255),
    is_default boolean DEFAULT false NOT NULL,
    is_enabled boolean DEFAULT false NOT NULL,
    sort_order integer DEFAULT 0 NOT NULL
);


ALTER TABLE public.winter_translate_locales OWNER TO university;

--
-- Name: rainlab_translate_locales_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.rainlab_translate_locales_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.rainlab_translate_locales_id_seq OWNER TO university;

--
-- Name: rainlab_translate_locales_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.rainlab_translate_locales_id_seq OWNED BY public.winter_translate_locales.id;


--
-- Name: winter_translate_messages; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.winter_translate_messages (
    id integer NOT NULL,
    code character varying(255),
    message_data text,
    found boolean DEFAULT true NOT NULL,
    code_pre_2_1_0 character varying(255)
);


ALTER TABLE public.winter_translate_messages OWNER TO university;

--
-- Name: rainlab_translate_messages_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.rainlab_translate_messages_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.rainlab_translate_messages_id_seq OWNER TO university;

--
-- Name: rainlab_translate_messages_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.rainlab_translate_messages_id_seq OWNED BY public.winter_translate_messages.id;


--
-- Name: sessions; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.sessions (
    id character varying(255) NOT NULL,
    payload text,
    last_activity integer,
    user_id integer,
    ip_address character varying(45),
    user_agent text
);


ALTER TABLE public.sessions OWNER TO university;

--
-- Name: system_event_logs; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_event_logs (
    id integer NOT NULL,
    level character varying(255),
    message text,
    details text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.system_event_logs OWNER TO university;

--
-- Name: system_event_logs_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_event_logs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_event_logs_id_seq OWNER TO university;

--
-- Name: system_event_logs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_event_logs_id_seq OWNED BY public.system_event_logs.id;


--
-- Name: system_files; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_files (
    id integer NOT NULL,
    disk_name character varying(255) NOT NULL,
    file_name character varying(255) NOT NULL,
    file_size integer NOT NULL,
    content_type character varying(255) NOT NULL,
    title character varying(255),
    description text,
    field character varying(255),
    attachment_id character varying(255),
    attachment_type character varying(255),
    is_public boolean DEFAULT true NOT NULL,
    sort_order integer,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.system_files OWNER TO university;

--
-- Name: system_files_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_files_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_files_id_seq OWNER TO university;

--
-- Name: system_files_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_files_id_seq OWNED BY public.system_files.id;


--
-- Name: system_mail_layouts; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_mail_layouts (
    id integer NOT NULL,
    name character varying(255),
    code character varying(255),
    content_html text,
    content_text text,
    content_css text,
    is_locked boolean DEFAULT false NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    options text
);


ALTER TABLE public.system_mail_layouts OWNER TO university;

--
-- Name: system_mail_layouts_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_mail_layouts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_mail_layouts_id_seq OWNER TO university;

--
-- Name: system_mail_layouts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_mail_layouts_id_seq OWNED BY public.system_mail_layouts.id;


--
-- Name: system_mail_partials; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_mail_partials (
    id integer NOT NULL,
    name character varying(255),
    code character varying(255),
    content_html text,
    content_text text,
    is_custom boolean DEFAULT false NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.system_mail_partials OWNER TO university;

--
-- Name: system_mail_partials_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_mail_partials_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_mail_partials_id_seq OWNER TO university;

--
-- Name: system_mail_partials_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_mail_partials_id_seq OWNED BY public.system_mail_partials.id;


--
-- Name: system_mail_templates; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_mail_templates (
    id integer NOT NULL,
    code character varying(255),
    subject character varying(255),
    description text,
    content_html text,
    content_text text,
    layout_id integer,
    is_custom boolean DEFAULT false NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.system_mail_templates OWNER TO university;

--
-- Name: system_mail_templates_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_mail_templates_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_mail_templates_id_seq OWNER TO university;

--
-- Name: system_mail_templates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_mail_templates_id_seq OWNED BY public.system_mail_templates.id;


--
-- Name: system_parameters; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_parameters (
    id integer NOT NULL,
    namespace character varying(100) NOT NULL,
    "group" character varying(50) NOT NULL,
    item character varying(150) NOT NULL,
    value text
);


ALTER TABLE public.system_parameters OWNER TO university;

--
-- Name: system_parameters_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_parameters_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_parameters_id_seq OWNER TO university;

--
-- Name: system_parameters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_parameters_id_seq OWNED BY public.system_parameters.id;


--
-- Name: system_plugin_history; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_plugin_history (
    id integer NOT NULL,
    code character varying(255) NOT NULL,
    type character varying(20) NOT NULL,
    version character varying(50) NOT NULL,
    detail text,
    created_at timestamp(0) without time zone
);


ALTER TABLE public.system_plugin_history OWNER TO university;

--
-- Name: system_plugin_history_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_plugin_history_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_plugin_history_id_seq OWNER TO university;

--
-- Name: system_plugin_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_plugin_history_id_seq OWNED BY public.system_plugin_history.id;


--
-- Name: system_plugin_versions; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_plugin_versions (
    id integer NOT NULL,
    code character varying(255) NOT NULL,
    version character varying(50) NOT NULL,
    created_at timestamp(0) without time zone,
    is_disabled boolean DEFAULT false NOT NULL,
    is_frozen boolean DEFAULT false NOT NULL,
    acorn_infrastructure boolean DEFAULT false NOT NULL
);


ALTER TABLE public.system_plugin_versions OWNER TO university;

--
-- Name: system_plugin_versions_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_plugin_versions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_plugin_versions_id_seq OWNER TO university;

--
-- Name: system_plugin_versions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_plugin_versions_id_seq OWNED BY public.system_plugin_versions.id;


--
-- Name: system_request_logs; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_request_logs (
    id integer NOT NULL,
    status_code integer,
    url character varying(255),
    referer text,
    count integer DEFAULT 0 NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
);


ALTER TABLE public.system_request_logs OWNER TO university;

--
-- Name: system_request_logs_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_request_logs_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_request_logs_id_seq OWNER TO university;

--
-- Name: system_request_logs_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_request_logs_id_seq OWNED BY public.system_request_logs.id;


--
-- Name: system_revisions; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_revisions (
    id integer NOT NULL,
    user_id integer,
    field character varying(255),
    "cast" character varying(255),
    old_value text,
    new_value text,
    revisionable_type character varying(255) NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    revisionable_id uuid NOT NULL
);


ALTER TABLE public.system_revisions OWNER TO university;

--
-- Name: system_revisions_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_revisions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_revisions_id_seq OWNER TO university;

--
-- Name: system_revisions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_revisions_id_seq OWNED BY public.system_revisions.id;


--
-- Name: system_settings; Type: TABLE; Schema: public; Owner: university
--

CREATE TABLE public.system_settings (
    id integer NOT NULL,
    item character varying(255),
    value text
);


ALTER TABLE public.system_settings OWNER TO university;

--
-- Name: system_settings_id_seq; Type: SEQUENCE; Schema: public; Owner: university
--

CREATE SEQUENCE public.system_settings_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.system_settings_id_seq OWNER TO university;

--
-- Name: system_settings_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: university
--

ALTER SEQUENCE public.system_settings_id_seq OWNED BY public.system_settings.id;


--
-- Name: university_mofadala_branches; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_branches (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    type character varying(255) NOT NULL,
    phone character varying(255),
    email character varying(255),
    notes text,
    university_id integer NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_branches'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN type OPTIONS (
    column_name 'type'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN phone OPTIONS (
    column_name 'phone'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN email OPTIONS (
    column_name 'email'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN university_id OPTIONS (
    column_name 'university_id'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_branches ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_branches OWNER TO sz;

--
-- Name: university_mofadala_candidate_exam_material_marks; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks (
    id integer NOT NULL,
    student_id integer NOT NULL,
    candidate_exam_material_id integer NOT NULL,
    mark double precision NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_candidate_exam_material_marks'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks ALTER COLUMN student_id OPTIONS (
    column_name 'student_id'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks ALTER COLUMN candidate_exam_material_id OPTIONS (
    column_name 'candidate_exam_material_id'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks ALTER COLUMN mark OPTIONS (
    column_name 'mark'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_material_marks OWNER TO sz;

--
-- Name: university_mofadala_candidate_exam_materials; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_candidate_exam_materials (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    notes text,
    candidate_exam_id integer NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_candidate_exam_materials'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_materials ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_materials ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_materials ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_materials ALTER COLUMN candidate_exam_id OPTIONS (
    column_name 'candidate_exam_id'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_materials ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_materials ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_candidate_exam_materials OWNER TO sz;

--
-- Name: university_mofadala_candidate_exams; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_candidate_exams (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    notes text,
    mofadala_year_id integer NOT NULL,
    minimum double precision NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_candidate_exams'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exams ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exams ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exams ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exams ALTER COLUMN mofadala_year_id OPTIONS (
    column_name 'mofadala_year_id'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exams ALTER COLUMN minimum OPTIONS (
    column_name 'minimum'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exams ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_candidate_exams ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_candidate_exams OWNER TO sz;

--
-- Name: university_mofadala_certificate_languages; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_certificate_languages (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    dialect character varying(255),
    notes text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_certificate_languages'
);
ALTER FOREIGN TABLE public.university_mofadala_certificate_languages ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_certificate_languages ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_certificate_languages ALTER COLUMN dialect OPTIONS (
    column_name 'dialect'
);
ALTER FOREIGN TABLE public.university_mofadala_certificate_languages ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_certificate_languages ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_certificate_languages ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_certificate_languages OWNER TO sz;

--
-- Name: university_mofadala_cities; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_cities (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    notes text,
    country_id integer NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_cities'
);
ALTER FOREIGN TABLE public.university_mofadala_cities ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_cities ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_cities ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_cities ALTER COLUMN country_id OPTIONS (
    column_name 'country_id'
);
ALTER FOREIGN TABLE public.university_mofadala_cities ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_cities ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_cities OWNER TO sz;

--
-- Name: university_mofadala_department_details; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_department_details (
    id integer NOT NULL,
    mofadala_year_id integer NOT NULL,
    name character varying(255) NOT NULL,
    minimum double precision NOT NULL,
    department_id integer NOT NULL,
    notes text,
    there_is_an_interview boolean NOT NULL,
    type_certificate_id integer NOT NULL,
    there_is_a_candidacy_exam boolean NOT NULL,
    this_is_the_primary_hs_specialization boolean NOT NULL,
    n_maximum integer NOT NULL,
    candidate_exam_id integer,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    failed boolean
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_department_details'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN mofadala_year_id OPTIONS (
    column_name 'mofadala_year_id'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN minimum OPTIONS (
    column_name 'minimum'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN department_id OPTIONS (
    column_name 'department_id'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN there_is_an_interview OPTIONS (
    column_name 'there_is_an_interview'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN type_certificate_id OPTIONS (
    column_name 'type_certificate_id'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN there_is_a_candidacy_exam OPTIONS (
    column_name 'there_is_a_candidacy_exam'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN this_is_the_primary_hs_specialization OPTIONS (
    column_name 'this_is_the_primary_hs_specialization'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN n_maximum OPTIONS (
    column_name 'n_maximum'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN candidate_exam_id OPTIONS (
    column_name 'candidate_exam_id'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);
ALTER FOREIGN TABLE public.university_mofadala_department_details ALTER COLUMN failed OPTIONS (
    column_name 'failed'
);


ALTER FOREIGN TABLE public.university_mofadala_department_details OWNER TO sz;

--
-- Name: university_mofadala_departments; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_departments (
    id integer NOT NULL,
    name character varying(255),
    women_only boolean NOT NULL,
    n_minimum integer NOT NULL,
    notes text,
    branche_id integer NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_departments'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN women_only OPTIONS (
    column_name 'women_only'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN n_minimum OPTIONS (
    column_name 'n_minimum'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN branche_id OPTIONS (
    column_name 'branche_id'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_departments ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_departments OWNER TO sz;

--
-- Name: university_mofadala_exam_centers; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_exam_centers (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    capacity integer NOT NULL,
    address character varying(255),
    email character varying(255),
    phone character varying(255),
    notes text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    mofadala_year_id integer NOT NULL
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_exam_centers'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN capacity OPTIONS (
    column_name 'capacity'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN address OPTIONS (
    column_name 'address'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN email OPTIONS (
    column_name 'email'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN phone OPTIONS (
    column_name 'phone'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);
ALTER FOREIGN TABLE public.university_mofadala_exam_centers ALTER COLUMN mofadala_year_id OPTIONS (
    column_name 'mofadala_year_id'
);


ALTER FOREIGN TABLE public.university_mofadala_exam_centers OWNER TO sz;

--
-- Name: university_mofadala_mofadala_years; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_mofadala_years (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    from_the_occupied_territories double precision NOT NULL,
    families_of_martyrs double precision NOT NULL,
    is_active boolean NOT NULL,
    notes text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_mofadala_years'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN from_the_occupied_territories OPTIONS (
    column_name 'from_the_occupied_territories'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN families_of_martyrs OPTIONS (
    column_name 'families_of_martyrs'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN is_active OPTIONS (
    column_name 'is_active'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_mofadala_years ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_mofadala_years OWNER TO sz;

--
-- Name: university_mofadala_student_desire_details; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_student_desire_details (
    id integer NOT NULL,
    mofadala_year_id integer NOT NULL,
    student_id integer NOT NULL,
    student_desire_id integer,
    number_list integer NOT NULL,
    department_detail_id integer NOT NULL,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    interview_status character(1)
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_student_desire_details'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN mofadala_year_id OPTIONS (
    column_name 'mofadala_year_id'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN student_id OPTIONS (
    column_name 'student_id'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN student_desire_id OPTIONS (
    column_name 'student_desire_id'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN number_list OPTIONS (
    column_name 'number_list'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN department_detail_id OPTIONS (
    column_name 'department_detail_id'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);
ALTER FOREIGN TABLE public.university_mofadala_student_desire_details ALTER COLUMN interview_status OPTIONS (
    column_name 'interview_status'
);


ALTER FOREIGN TABLE public.university_mofadala_student_desire_details OWNER TO sz;

--
-- Name: university_mofadala_students; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_students (
    id integer NOT NULL,
    user_id integer NOT NULL,
    center_id integer NOT NULL,
    baccalaureate_mark_id integer,
    code character varying(255) NOT NULL,
    first_name character varying(255) NOT NULL,
    last_name character varying(255) NOT NULL,
    father_name character varying(255) NOT NULL,
    mother_name character varying(255) NOT NULL,
    self_image text,
    image text,
    place_of_birth character varying(255) NOT NULL,
    birth_date date NOT NULL,
    family_place text,
    national_id text,
    national_id_type integer NOT NULL,
    cumin text,
    city_id integer NOT NULL,
    address text,
    cell_phone character varying(255),
    tell_phone character varying(255),
    email character varying(255),
    emergency_number character varying(255),
    hs_certificate_image text,
    type_certificate_id integer NOT NULL,
    certificate_date date NOT NULL,
    certificate_language_id integer NOT NULL,
    certificate_source character varying(255) NOT NULL,
    attending_the_nomination_examination boolean NOT NULL,
    there_is_a_candidacy_exam boolean NOT NULL,
    candidate_exam_id integer,
    exam_center_id integer,
    candidacy_examination_score double precision,
    need_housing boolean NOT NULL,
    from_the_occupied_territories boolean NOT NULL,
    families_of_martyrs boolean NOT NULL,
    he_served_in_the_army boolean NOT NULL,
    gender character varying(255) NOT NULL,
    marital_status character varying(255) NOT NULL,
    notes text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone,
    mofadala_year_id integer NOT NULL,
    information text,
    the_total double precision,
    "constraint" character varying(255),
    department_id integer,
    current_desire integer,
    enrollment_conflict boolean,
    secondary_reallocation boolean,
    enrollment_process_notes text
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_students'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN user_id OPTIONS (
    column_name 'user_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN center_id OPTIONS (
    column_name 'center_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN baccalaureate_mark_id OPTIONS (
    column_name 'baccalaureate_mark_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN first_name OPTIONS (
    column_name 'first_name'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN last_name OPTIONS (
    column_name 'last_name'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN father_name OPTIONS (
    column_name 'father_name'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN mother_name OPTIONS (
    column_name 'mother_name'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN self_image OPTIONS (
    column_name 'self_image'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN image OPTIONS (
    column_name 'image'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN place_of_birth OPTIONS (
    column_name 'place_of_birth'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN birth_date OPTIONS (
    column_name 'birth_date'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN family_place OPTIONS (
    column_name 'family_place'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN national_id OPTIONS (
    column_name 'national_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN national_id_type OPTIONS (
    column_name 'national_id_type'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN cumin OPTIONS (
    column_name 'cumin'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN city_id OPTIONS (
    column_name 'city_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN address OPTIONS (
    column_name 'address'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN cell_phone OPTIONS (
    column_name 'cell_phone'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN tell_phone OPTIONS (
    column_name 'tell_phone'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN email OPTIONS (
    column_name 'email'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN emergency_number OPTIONS (
    column_name 'emergency_number'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN hs_certificate_image OPTIONS (
    column_name 'hs_certificate_image'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN type_certificate_id OPTIONS (
    column_name 'type_certificate_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN certificate_date OPTIONS (
    column_name 'certificate_date'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN certificate_language_id OPTIONS (
    column_name 'certificate_language_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN certificate_source OPTIONS (
    column_name 'certificate_source'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN attending_the_nomination_examination OPTIONS (
    column_name 'attending_the_nomination_examination'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN there_is_a_candidacy_exam OPTIONS (
    column_name 'there_is_a_candidacy_exam'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN candidate_exam_id OPTIONS (
    column_name 'candidate_exam_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN exam_center_id OPTIONS (
    column_name 'exam_center_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN candidacy_examination_score OPTIONS (
    column_name 'candidacy_examination_score'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN need_housing OPTIONS (
    column_name 'need_housing'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN from_the_occupied_territories OPTIONS (
    column_name 'from_the_occupied_territories'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN families_of_martyrs OPTIONS (
    column_name 'families_of_martyrs'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN he_served_in_the_army OPTIONS (
    column_name 'he_served_in_the_army'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN gender OPTIONS (
    column_name 'gender'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN marital_status OPTIONS (
    column_name 'marital_status'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN mofadala_year_id OPTIONS (
    column_name 'mofadala_year_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN information OPTIONS (
    column_name 'information'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN the_total OPTIONS (
    column_name 'the_total'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN "constraint" OPTIONS (
    column_name 'constraint'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN department_id OPTIONS (
    column_name 'department_id'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN current_desire OPTIONS (
    column_name 'current_desire'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN enrollment_conflict OPTIONS (
    column_name 'enrollment_conflict'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN secondary_reallocation OPTIONS (
    column_name 'secondary_reallocation'
);
ALTER FOREIGN TABLE public.university_mofadala_students ALTER COLUMN enrollment_process_notes OPTIONS (
    column_name 'enrollment_process_notes'
);


ALTER FOREIGN TABLE public.university_mofadala_students OWNER TO sz;

--
-- Name: university_mofadala_type_certificates; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_type_certificates (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    notes text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_type_certificates'
);
ALTER FOREIGN TABLE public.university_mofadala_type_certificates ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_type_certificates ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_type_certificates ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_type_certificates ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_type_certificates ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_type_certificates OWNER TO sz;

--
-- Name: university_mofadala_universities; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_universities (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    code character varying(255) NOT NULL,
    city_id integer NOT NULL,
    university_category_id integer NOT NULL,
    phone character varying(255),
    email character varying(255),
    notes text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_universities'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN code OPTIONS (
    column_name 'code'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN city_id OPTIONS (
    column_name 'city_id'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN university_category_id OPTIONS (
    column_name 'university_category_id'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN phone OPTIONS (
    column_name 'phone'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN email OPTIONS (
    column_name 'email'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_universities ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_universities OWNER TO sz;

--
-- Name: university_mofadala_university_categories; Type: FOREIGN TABLE; Schema: public; Owner: sz
--

CREATE FOREIGN TABLE public.university_mofadala_university_categories (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    notes text,
    created_at timestamp(0) without time zone,
    updated_at timestamp(0) without time zone
)
SERVER localserver_universityacceptance
OPTIONS (
    schema_name 'public',
    table_name 'university_mofadala_university_categories'
);
ALTER FOREIGN TABLE public.university_mofadala_university_categories ALTER COLUMN id OPTIONS (
    column_name 'id'
);
ALTER FOREIGN TABLE public.university_mofadala_university_categories ALTER COLUMN name OPTIONS (
    column_name 'name'
);
ALTER FOREIGN TABLE public.university_mofadala_university_categories ALTER COLUMN notes OPTIONS (
    column_name 'notes'
);
ALTER FOREIGN TABLE public.university_mofadala_university_categories ALTER COLUMN created_at OPTIONS (
    column_name 'created_at'
);
ALTER FOREIGN TABLE public.university_mofadala_university_categories ALTER COLUMN updated_at OPTIONS (
    column_name 'updated_at'
);


ALTER FOREIGN TABLE public.university_mofadala_university_categories OWNER TO sz;

--
-- Name: acorn_reporting_reports id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_reporting_reports ALTER COLUMN id SET DEFAULT nextval('public.acorn_reporting_reports_id_seq'::regclass);


--
-- Name: backend_access_log id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_access_log ALTER COLUMN id SET DEFAULT nextval('public.backend_access_log_id_seq'::regclass);


--
-- Name: backend_user_groups id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_groups ALTER COLUMN id SET DEFAULT nextval('public.backend_user_groups_id_seq'::regclass);


--
-- Name: backend_user_preferences id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_preferences ALTER COLUMN id SET DEFAULT nextval('public.backend_user_preferences_id_seq'::regclass);


--
-- Name: backend_user_roles id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_roles ALTER COLUMN id SET DEFAULT nextval('public.backend_user_roles_id_seq'::regclass);


--
-- Name: backend_user_throttle id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_throttle ALTER COLUMN id SET DEFAULT nextval('public.backend_user_throttle_id_seq'::regclass);


--
-- Name: backend_users id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_users ALTER COLUMN id SET DEFAULT nextval('public.backend_users_id_seq'::regclass);


--
-- Name: cms_theme_data id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.cms_theme_data ALTER COLUMN id SET DEFAULT nextval('public.cms_theme_data_id_seq'::regclass);


--
-- Name: cms_theme_logs id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.cms_theme_logs ALTER COLUMN id SET DEFAULT nextval('public.cms_theme_logs_id_seq'::regclass);


--
-- Name: cms_theme_templates id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.cms_theme_templates ALTER COLUMN id SET DEFAULT nextval('public.cms_theme_templates_id_seq'::regclass);


--
-- Name: deferred_bindings id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.deferred_bindings ALTER COLUMN id SET DEFAULT nextval('public.deferred_bindings_id_seq'::regclass);


--
-- Name: failed_jobs id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.failed_jobs ALTER COLUMN id SET DEFAULT nextval('public.failed_jobs_id_seq'::regclass);


--
-- Name: jobs id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.jobs ALTER COLUMN id SET DEFAULT nextval('public.jobs_id_seq'::regclass);


--
-- Name: migrations id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.migrations ALTER COLUMN id SET DEFAULT nextval('public.migrations_id_seq'::regclass);


--
-- Name: system_event_logs id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_event_logs ALTER COLUMN id SET DEFAULT nextval('public.system_event_logs_id_seq'::regclass);


--
-- Name: system_files id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_files ALTER COLUMN id SET DEFAULT nextval('public.system_files_id_seq'::regclass);


--
-- Name: system_mail_layouts id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_mail_layouts ALTER COLUMN id SET DEFAULT nextval('public.system_mail_layouts_id_seq'::regclass);


--
-- Name: system_mail_partials id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_mail_partials ALTER COLUMN id SET DEFAULT nextval('public.system_mail_partials_id_seq'::regclass);


--
-- Name: system_mail_templates id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_mail_templates ALTER COLUMN id SET DEFAULT nextval('public.system_mail_templates_id_seq'::regclass);


--
-- Name: system_parameters id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_parameters ALTER COLUMN id SET DEFAULT nextval('public.system_parameters_id_seq'::regclass);


--
-- Name: system_plugin_history id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_plugin_history ALTER COLUMN id SET DEFAULT nextval('public.system_plugin_history_id_seq'::regclass);


--
-- Name: system_plugin_versions id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_plugin_versions ALTER COLUMN id SET DEFAULT nextval('public.system_plugin_versions_id_seq'::regclass);


--
-- Name: system_request_logs id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_request_logs ALTER COLUMN id SET DEFAULT nextval('public.system_request_logs_id_seq'::regclass);


--
-- Name: system_revisions id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_revisions ALTER COLUMN id SET DEFAULT nextval('public.system_revisions_id_seq'::regclass);


--
-- Name: system_settings id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_settings ALTER COLUMN id SET DEFAULT nextval('public.system_settings_id_seq'::regclass);


--
-- Name: winter_location_countries id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_location_countries ALTER COLUMN id SET DEFAULT nextval('public.rainlab_location_countries_id_seq'::regclass);


--
-- Name: winter_location_states id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_location_states ALTER COLUMN id SET DEFAULT nextval('public.rainlab_location_states_id_seq'::regclass);


--
-- Name: winter_translate_attributes id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_attributes ALTER COLUMN id SET DEFAULT nextval('public.rainlab_translate_attributes_id_seq'::regclass);


--
-- Name: winter_translate_indexes id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_indexes ALTER COLUMN id SET DEFAULT nextval('public.rainlab_translate_indexes_id_seq'::regclass);


--
-- Name: winter_translate_locales id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_locales ALTER COLUMN id SET DEFAULT nextval('public.rainlab_translate_locales_id_seq'::regclass);


--
-- Name: winter_translate_messages id; Type: DEFAULT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_messages ALTER COLUMN id SET DEFAULT nextval('public.rainlab_translate_messages_id_seq'::regclass);


--
-- Name: acorn_calendar_calendars acorn_calendar_calendars_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_calendars
    ADD CONSTRAINT acorn_calendar_calendars_pkey PRIMARY KEY (id);


--
-- Name: acorn_calendar_event_part_user_group acorn_calendar_event_part_user_group_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_part_user_group
    ADD CONSTRAINT acorn_calendar_event_part_user_group_pkey PRIMARY KEY (event_part_id, user_group_id);


--
-- Name: acorn_calendar_event_part_user acorn_calendar_event_part_user_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_part_user
    ADD CONSTRAINT acorn_calendar_event_part_user_pkey PRIMARY KEY (event_part_id, user_id, role_id);


--
-- Name: acorn_calendar_event_parts acorn_calendar_event_parts_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_parts
    ADD CONSTRAINT acorn_calendar_event_parts_pkey PRIMARY KEY (id);


--
-- Name: acorn_calendar_event_statuses acorn_calendar_event_statuses_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_statuses
    ADD CONSTRAINT acorn_calendar_event_statuses_pkey PRIMARY KEY (id);


--
-- Name: acorn_calendar_event_types acorn_calendar_event_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_types
    ADD CONSTRAINT acorn_calendar_event_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_calendar_events acorn_calendar_events_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_events
    ADD CONSTRAINT acorn_calendar_events_pkey PRIMARY KEY (id);


--
-- Name: acorn_calendar_instances acorn_calendar_instances_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_instances
    ADD CONSTRAINT acorn_calendar_instances_pkey PRIMARY KEY (id);


--
-- Name: acorn_enrollment_courses acorn_enrollment_enrollment_entities_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_courses
    ADD CONSTRAINT acorn_enrollment_enrollment_entities_pkey PRIMARY KEY (id);


--
-- Name: acorn_enrollment_enrollments acorn_enrollment_enrollments_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT acorn_enrollment_enrollments_pkey PRIMARY KEY (id);


--
-- Name: acorn_enrollment_runs acorn_enrollment_runs_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_runs
    ADD CONSTRAINT acorn_enrollment_runs_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_answers acorn_exam_answers_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_answers
    ADD CONSTRAINT acorn_exam_answers_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_calculation_course_materials acorn_exam_calculation_course_material_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_materials
    ADD CONSTRAINT acorn_exam_calculation_course_material_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_calculation_courses acorn_exam_calculation_course_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_courses
    ADD CONSTRAINT acorn_exam_calculation_course_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_calculation_course_types acorn_exam_calculation_course_type_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT acorn_exam_calculation_course_type_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_calculation_material_types acorn_exam_calculation_material_type_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_material_types
    ADD CONSTRAINT acorn_exam_calculation_material_type_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_calculation_types acorn_exam_calculation_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_types
    ADD CONSTRAINT acorn_exam_calculation_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_calculations acorn_exam_calculations_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT acorn_exam_calculations_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_centres acorn_exam_centres_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_centres
    ADD CONSTRAINT acorn_exam_centres_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_course_types acorn_exam_course_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_types
    ADD CONSTRAINT acorn_exam_course_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_exam_materials acorn_exam_exam_material_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT acorn_exam_exam_material_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_exams acorn_exam_exams_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exams
    ADD CONSTRAINT acorn_exam_exams_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_instances acorn_exam_instances_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_instances
    ADD CONSTRAINT acorn_exam_instances_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_interview_students acorn_exam_interview_student_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT acorn_exam_interview_student_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_interviews acorn_exam_interviews_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interviews
    ADD CONSTRAINT acorn_exam_interviews_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_material_types acorn_exam_material_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_types
    ADD CONSTRAINT acorn_exam_material_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_materials acorn_exam_materials_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_materials
    ADD CONSTRAINT acorn_exam_materials_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_questions acorn_exam_questions_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_questions
    ADD CONSTRAINT acorn_exam_questions_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_result_internal2s acorn_exam_result_internal2s_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT acorn_exam_result_internal2s_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_scores acorn_exam_results_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_scores
    ADD CONSTRAINT acorn_exam_results_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_score_names acorn_exam_score_names_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_score_names
    ADD CONSTRAINT acorn_exam_score_names_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_sections acorn_exam_sections_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_sections
    ADD CONSTRAINT acorn_exam_sections_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_types acorn_exam_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_types
    ADD CONSTRAINT acorn_exam_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_lookup acorn_location_location_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_lookup
    ADD CONSTRAINT acorn_location_location_pkey PRIMARY KEY (id);


--
-- Name: acorn_messaging_label acorn_messaging_label_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_label
    ADD CONSTRAINT acorn_messaging_label_pkey PRIMARY KEY (id);


--
-- Name: acorn_messaging_message acorn_messaging_message_externalid_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message
    ADD CONSTRAINT acorn_messaging_message_externalid_unique UNIQUE ("externalID");


--
-- Name: acorn_messaging_message_instance acorn_messaging_message_instance_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_instance
    ADD CONSTRAINT acorn_messaging_message_instance_pkey PRIMARY KEY (message_id, instance_id);


--
-- Name: acorn_messaging_message_message acorn_messaging_message_message_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_message
    ADD CONSTRAINT acorn_messaging_message_message_pkey PRIMARY KEY (message1_id, message2_id, relationship);


--
-- Name: acorn_messaging_message acorn_messaging_message_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message
    ADD CONSTRAINT acorn_messaging_message_pkey PRIMARY KEY (id);


--
-- Name: acorn_messaging_message_user_group acorn_messaging_message_user_group_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_user_group
    ADD CONSTRAINT acorn_messaging_message_user_group_pkey PRIMARY KEY (message_id, user_group_id);


--
-- Name: acorn_messaging_message_user acorn_messaging_message_user_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_user
    ADD CONSTRAINT acorn_messaging_message_user_pkey PRIMARY KEY (message_id, user_id);


--
-- Name: acorn_messaging_status acorn_messaging_status_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_status
    ADD CONSTRAINT acorn_messaging_status_pkey PRIMARY KEY (id);


--
-- Name: acorn_messaging_user_message_status acorn_messaging_user_message_status_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_user_message_status
    ADD CONSTRAINT acorn_messaging_user_message_status_pkey PRIMARY KEY (message_id, status_id);


--
-- Name: acorn_enrollment_course_entry_requirements acorn_mofadala_course_entry_requirements_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT acorn_mofadala_course_entry_requirements_pkey PRIMARY KEY (id);


--
-- Name: acorn_enrollment_desires acorn_mofadala_desires_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_desires
    ADD CONSTRAINT acorn_mofadala_desires_pkey PRIMARY KEY (id);


--
-- Name: acorn_reporting_reports acorn_reporting_reports_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_reporting_reports
    ADD CONSTRAINT acorn_reporting_reports_pkey PRIMARY KEY (id);


--
-- Name: acorn_servers acorn_servers_hostname_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_servers
    ADD CONSTRAINT acorn_servers_hostname_unique UNIQUE (hostname);


--
-- Name: acorn_servers acorn_servers_id_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_servers
    ADD CONSTRAINT acorn_servers_id_unique UNIQUE (id);


--
-- Name: acorn_university_course_years acorn_university_academic_years_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_years
    ADD CONSTRAINT acorn_university_academic_years_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_course_language acorn_university_course_language_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_language
    ADD CONSTRAINT acorn_university_course_language_pkey PRIMARY KEY (course_id, language_id);


--
-- Name: acorn_university_course_materials acorn_university_course_material_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT acorn_university_course_material_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_course_specializations acorn_university_course_specializations_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_specializations
    ADD CONSTRAINT acorn_university_course_specializations_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_course_year_semesters acorn_university_course_year_semesters_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT acorn_university_course_year_semesters_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_course_plans acorn_university_course_year_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_plans
    ADD CONSTRAINT acorn_university_course_year_settings_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_courses acorn_university_courses_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_courses
    ADD CONSTRAINT acorn_university_courses_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_departments acorn_university_departments_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_departments
    ADD CONSTRAINT acorn_university_departments_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_document_types acorn_university_document_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_document_types
    ADD CONSTRAINT acorn_university_document_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_education_authorities acorn_university_education_authorities_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_education_authorities
    ADD CONSTRAINT acorn_university_education_authorities_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_entities acorn_university_entities_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT acorn_university_entities_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_hierarchy_event acorn_university_entity_event_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchy_event
    ADD CONSTRAINT acorn_university_entity_event_pkey PRIMARY KEY (hierarchy_id, event_id);


--
-- Name: acorn_university_faculties acorn_university_faculties_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_faculties
    ADD CONSTRAINT acorn_university_faculties_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_hierarchies acorn_university_hierarchies_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT acorn_university_hierarchies_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_identity_types acorn_university_identity_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_identity_types
    ADD CONSTRAINT acorn_university_identity_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_lectures acorn_university_lectures_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_lectures
    ADD CONSTRAINT acorn_university_lectures_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_material_topics acorn_university_material_topics_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_topics
    ADD CONSTRAINT acorn_university_material_topics_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_project_students acorn_university_project_students_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT acorn_university_project_students_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_projects acorn_university_projects_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_projects
    ADD CONSTRAINT acorn_university_projects_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_schools acorn_university_schools_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_schools
    ADD CONSTRAINT acorn_university_schools_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_semester_groups acorn_university_semester_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semester_groups
    ADD CONSTRAINT acorn_university_semester_groups_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_academic_year_semesters acorn_university_semester_year_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_year_semesters
    ADD CONSTRAINT acorn_university_semester_year_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_semesters acorn_university_semesters_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semesters
    ADD CONSTRAINT acorn_university_semesters_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_student_codes acorn_university_student_codes_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_codes
    ADD CONSTRAINT acorn_university_student_codes_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_student_course_material_addition acorn_university_student_course_material_addition_pk; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_addition
    ADD CONSTRAINT acorn_university_student_course_material_addition_pk PRIMARY KEY (student_id, course_material_id);


--
-- Name: acorn_university_student_course_material_removal acorn_university_student_course_material_removal_pk; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_removal
    ADD CONSTRAINT acorn_university_student_course_material_removal_pk PRIMARY KEY (student_id, course_material_id);


--
-- Name: acorn_university_student_documents acorn_university_student_documents_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_documents
    ADD CONSTRAINT acorn_university_student_documents_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_student_identities acorn_university_student_identities_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT acorn_university_student_identities_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_student_notes acorn_university_student_notes_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_notes
    ADD CONSTRAINT acorn_university_student_notes_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_student_statuses acorn_university_student_statuses_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_statuses
    ADD CONSTRAINT acorn_university_student_statuses_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_student_type acorn_university_student_type_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_type
    ADD CONSTRAINT acorn_university_student_type_pkey PRIMARY KEY (student_id, student_type_id);


--
-- Name: acorn_university_student_types acorn_university_student_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_types
    ADD CONSTRAINT acorn_university_student_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_students acorn_university_students_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_students
    ADD CONSTRAINT acorn_university_students_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_teachers acorn_university_teachers_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_teachers
    ADD CONSTRAINT acorn_university_teachers_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_universities acorn_university_universities_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_universities
    ADD CONSTRAINT acorn_university_universities_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_academic_years acorn_university_years_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_years
    ADD CONSTRAINT acorn_university_years_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_ethnicities acorn_user_ethnicities_pk; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_ethnicities
    ADD CONSTRAINT acorn_user_ethnicities_pk PRIMARY KEY (id);


--
-- Name: acorn_user_ethnicities acorn_user_ethnicitiess_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_ethnicities
    ADD CONSTRAINT acorn_user_ethnicitiess_unique UNIQUE (name);


--
-- Name: acorn_user_user_languages acorn_user_language_user_pk; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_languages
    ADD CONSTRAINT acorn_user_language_user_pk PRIMARY KEY (id);


--
-- Name: acorn_user_languages acorn_user_languages_name_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_languages
    ADD CONSTRAINT acorn_user_languages_name_unique UNIQUE (name);


--
-- Name: acorn_user_languages acorn_user_languages_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_languages
    ADD CONSTRAINT acorn_user_languages_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_religions acorn_user_religions_pk; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_religions
    ADD CONSTRAINT acorn_user_religions_pk PRIMARY KEY (id);


--
-- Name: acorn_user_religions acorn_user_religions_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_religions
    ADD CONSTRAINT acorn_user_religions_unique UNIQUE (name);


--
-- Name: acorn_user_role_user acorn_user_role_user_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_role_user
    ADD CONSTRAINT acorn_user_role_user_pkey PRIMARY KEY (user_id, role_id);


--
-- Name: acorn_user_roles acorn_user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_roles
    ADD CONSTRAINT acorn_user_roles_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_throttle acorn_user_throttle_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_throttle
    ADD CONSTRAINT acorn_user_throttle_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_user_group acorn_user_user_group_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group
    ADD CONSTRAINT acorn_user_user_group_pkey PRIMARY KEY (user_id, user_group_id);


--
-- Name: acorn_user_user_group_types acorn_user_user_group_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group_types
    ADD CONSTRAINT acorn_user_user_group_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_user_group_version acorn_user_user_group_version_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group_version
    ADD CONSTRAINT acorn_user_user_group_version_pkey PRIMARY KEY (user_id, user_group_version_id);


--
-- Name: acorn_user_user_group_versions acorn_user_user_group_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group_versions
    ADD CONSTRAINT acorn_user_user_group_versions_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_user_groups acorn_user_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_groups
    ADD CONSTRAINT acorn_user_user_groups_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_users acorn_user_users_email_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT acorn_user_users_email_unique UNIQUE (email);


--
-- Name: acorn_user_users acorn_user_users_login_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT acorn_user_users_login_unique UNIQUE (username);


--
-- Name: acorn_user_users acorn_user_users_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT acorn_user_users_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_areas area_area_type; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_areas
    ADD CONSTRAINT area_area_type UNIQUE (name, area_type_id);


--
-- Name: backend_access_log backend_access_log_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_access_log
    ADD CONSTRAINT backend_access_log_pkey PRIMARY KEY (id);


--
-- Name: backend_user_groups backend_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_groups
    ADD CONSTRAINT backend_user_groups_pkey PRIMARY KEY (id);


--
-- Name: backend_user_preferences backend_user_preferences_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_preferences
    ADD CONSTRAINT backend_user_preferences_pkey PRIMARY KEY (id);


--
-- Name: backend_user_roles backend_user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_roles
    ADD CONSTRAINT backend_user_roles_pkey PRIMARY KEY (id);


--
-- Name: backend_user_throttle backend_user_throttle_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_throttle
    ADD CONSTRAINT backend_user_throttle_pkey PRIMARY KEY (id);


--
-- Name: backend_users_groups backend_users_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_users_groups
    ADD CONSTRAINT backend_users_groups_pkey PRIMARY KEY (user_id, user_group_id);


--
-- Name: backend_users backend_users_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_users
    ADD CONSTRAINT backend_users_pkey PRIMARY KEY (id);


--
-- Name: cache cache_key_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.cache
    ADD CONSTRAINT cache_key_unique UNIQUE (key);


--
-- Name: acorn_exam_calculations calculation_code; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT calculation_code UNIQUE (code);


--
-- Name: cms_theme_data cms_theme_data_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.cms_theme_data
    ADD CONSTRAINT cms_theme_data_pkey PRIMARY KEY (id);


--
-- Name: cms_theme_logs cms_theme_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.cms_theme_logs
    ADD CONSTRAINT cms_theme_logs_pkey PRIMARY KEY (id);


--
-- Name: cms_theme_templates cms_theme_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.cms_theme_templates
    ADD CONSTRAINT cms_theme_templates_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_user_groups code; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_groups
    ADD CONSTRAINT code UNIQUE (code);


--
-- Name: acorn_university_student_codes code_owner_entity; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_codes
    ADD CONSTRAINT code_owner_entity UNIQUE (code, entity_id, student_id);


--
-- Name: acorn_university_course_plans course_academic_year_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_plans
    ADD CONSTRAINT course_academic_year_unique UNIQUE (course_id, enrollment_academic_year_id);


--
-- Name: acorn_exam_calculation_course_types course_type-calculation-academic_year; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT "course_type-calculation-academic_year" UNIQUE NULLS NOT DISTINCT (course_type_id, calculation_id, academic_year_id);


--
-- Name: acorn_university_course_types course_type_name; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_types
    ADD CONSTRAINT course_type_name UNIQUE (name);


--
-- Name: acorn_university_course_materials cys_material_topic; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT cys_material_topic UNIQUE NULLS NOT DISTINCT (material_id, course_year_semester_id, material_topic_id);


--
-- Name: deferred_bindings deferred_bindings_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.deferred_bindings
    ADD CONSTRAINT deferred_bindings_pkey PRIMARY KEY (id);


--
-- Name: backend_users email_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_users
    ADD CONSTRAINT email_unique UNIQUE (email);


--
-- Name: acorn_exam_exam_materials exam_course_material; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT exam_course_material UNIQUE (exam_id, course_material_id);


--
-- Name: failed_jobs failed_jobs_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.failed_jobs
    ADD CONSTRAINT failed_jobs_pkey PRIMARY KEY (id);


--
-- Name: failed_jobs failed_jobs_uuid_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.failed_jobs
    ADD CONSTRAINT failed_jobs_uuid_unique UNIQUE (uuid);


--
-- Name: acorn_university_student_identities id_type_value; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT id_type_value UNIQUE NULLS NOT DISTINCT (identity_type_id, number);


--
-- Name: acorn_university_entities import_source; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT import_source UNIQUE (import_source);


--
-- Name: acorn_university_hierarchies import_source_hierarchies; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT import_source_hierarchies UNIQUE (import_source);


--
-- Name: acorn_user_user_groups import_source_user_groups; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_groups
    ADD CONSTRAINT import_source_user_groups UNIQUE (import_source);


--
-- Name: acorn_user_users import_source_users; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT import_source_users UNIQUE (import_source);


--
-- Name: job_batches job_batches_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.job_batches
    ADD CONSTRAINT job_batches_pkey PRIMARY KEY (id);


--
-- Name: jobs jobs_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.jobs
    ADD CONSTRAINT jobs_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_address_types location_address_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_address_types
    ADD CONSTRAINT location_address_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_addresses location_addresses_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_addresses
    ADD CONSTRAINT location_addresses_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_area_types location_area_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_area_types
    ADD CONSTRAINT location_area_types_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_areas location_areas_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_areas
    ADD CONSTRAINT location_areas_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_gps location_gps_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_gps
    ADD CONSTRAINT location_gps_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_locations location_locations_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_locations
    ADD CONSTRAINT location_locations_pkey PRIMARY KEY (id);


--
-- Name: acorn_location_types location_type_name_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_types
    ADD CONSTRAINT location_type_name_unique UNIQUE (name);


--
-- Name: acorn_location_types location_types_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_types
    ADD CONSTRAINT location_types_pkey PRIMARY KEY (id);


--
-- Name: backend_users login_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_users
    ADD CONSTRAINT login_unique UNIQUE (login);


--
-- Name: acorn_university_materials material_name; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_materials
    ADD CONSTRAINT material_name UNIQUE (name);


--
-- Name: winter_translate_messages messages_code; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_messages
    ADD CONSTRAINT messages_code UNIQUE (code);


--
-- Name: winter_translate_messages messages_data; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_messages
    ADD CONSTRAINT messages_data UNIQUE (message_data);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: winter_translate_attributes model_locale; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_attributes
    ADD CONSTRAINT model_locale UNIQUE NULLS NOT DISTINCT (model_id, model_type, locale);


--
-- Name: acorn_location_area_types name; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_area_types
    ADD CONSTRAINT name UNIQUE (name);


--
-- Name: backend_user_groups name_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_groups
    ADD CONSTRAINT name_unique UNIQUE (name);


--
-- Name: acorn_enrollment_students pk_acorn_enrollment_enrollment_students; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT pk_acorn_enrollment_enrollment_students PRIMARY KEY (id);


--
-- Name: acorn_enrollment_student_notes pk_acorn_enrollment_student_notes; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_student_notes
    ADD CONSTRAINT pk_acorn_enrollment_student_notes PRIMARY KEY (id);


--
-- Name: winter_location_countries rainlab_location_countries_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_location_countries
    ADD CONSTRAINT rainlab_location_countries_pkey PRIMARY KEY (id);


--
-- Name: winter_location_states rainlab_location_states_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_location_states
    ADD CONSTRAINT rainlab_location_states_pkey PRIMARY KEY (id);


--
-- Name: winter_translate_attributes rainlab_translate_attributes_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_attributes
    ADD CONSTRAINT rainlab_translate_attributes_pkey PRIMARY KEY (id);


--
-- Name: winter_translate_indexes rainlab_translate_indexes_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_indexes
    ADD CONSTRAINT rainlab_translate_indexes_pkey PRIMARY KEY (id);


--
-- Name: winter_translate_locales rainlab_translate_locales_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_locales
    ADD CONSTRAINT rainlab_translate_locales_pkey PRIMARY KEY (id);


--
-- Name: winter_translate_messages rainlab_translate_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.winter_translate_messages
    ADD CONSTRAINT rainlab_translate_messages_pkey PRIMARY KEY (id);


--
-- Name: acorn_user_mail_blockers rainlab_user_mail_blockers_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_mail_blockers
    ADD CONSTRAINT rainlab_user_mail_blockers_pkey PRIMARY KEY (id);


--
-- Name: acorn_exam_result_internal2s result_name; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT result_name UNIQUE NULLS NOT DISTINCT (name);


--
-- Name: backend_user_roles role_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_user_roles
    ADD CONSTRAINT role_unique UNIQUE (name);


--
-- Name: sessions sessions_id_unique; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.sessions
    ADD CONSTRAINT sessions_id_unique UNIQUE (id);


--
-- Name: acorn_exam_scores student_exam_material; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_scores
    ADD CONSTRAINT student_exam_material UNIQUE (student_id, exam_material_id);


--
-- Name: acorn_university_student_identities student_id_type; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT student_id_type UNIQUE NULLS NOT DISTINCT (student_id, identity_type_id);


--
-- Name: acorn_university_student_status student_status; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_status
    ADD CONSTRAINT student_status UNIQUE NULLS NOT DISTINCT (student_id, student_status_id);


--
-- Name: acorn_university_students students_import_source; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_students
    ADD CONSTRAINT students_import_source UNIQUE (import_source);


--
-- Name: acorn_university_students students_number; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_students
    ADD CONSTRAINT students_number UNIQUE NULLS NOT DISTINCT (number);


--
-- Name: system_event_logs system_event_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_event_logs
    ADD CONSTRAINT system_event_logs_pkey PRIMARY KEY (id);


--
-- Name: system_files system_files_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_files
    ADD CONSTRAINT system_files_pkey PRIMARY KEY (id);


--
-- Name: system_mail_layouts system_mail_layouts_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_mail_layouts
    ADD CONSTRAINT system_mail_layouts_pkey PRIMARY KEY (id);


--
-- Name: system_mail_partials system_mail_partials_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_mail_partials
    ADD CONSTRAINT system_mail_partials_pkey PRIMARY KEY (id);


--
-- Name: system_mail_templates system_mail_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_mail_templates
    ADD CONSTRAINT system_mail_templates_pkey PRIMARY KEY (id);


--
-- Name: system_parameters system_parameters_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_parameters
    ADD CONSTRAINT system_parameters_pkey PRIMARY KEY (id);


--
-- Name: system_plugin_history system_plugin_history_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_plugin_history
    ADD CONSTRAINT system_plugin_history_pkey PRIMARY KEY (id);


--
-- Name: system_plugin_versions system_plugin_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_plugin_versions
    ADD CONSTRAINT system_plugin_versions_pkey PRIMARY KEY (id);


--
-- Name: system_request_logs system_request_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_request_logs
    ADD CONSTRAINT system_request_logs_pkey PRIMARY KEY (id);


--
-- Name: system_revisions system_revisions_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_revisions
    ADD CONSTRAINT system_revisions_pkey PRIMARY KEY (id);


--
-- Name: system_settings system_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.system_settings
    ADD CONSTRAINT system_settings_pkey PRIMARY KEY (id);


--
-- Name: acorn_university_material_topics topic_name; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_topics
    ADD CONSTRAINT topic_name UNIQUE (name);


--
-- Name: acorn_university_departments unique2_entity_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_departments
    ADD CONSTRAINT unique2_entity_id UNIQUE (entity_id);


--
-- Name: acorn_university_education_authorities unique3_entity_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_education_authorities
    ADD CONSTRAINT unique3_entity_id UNIQUE (entity_id);


--
-- Name: acorn_university_faculties unique4_entity_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_faculties
    ADD CONSTRAINT unique4_entity_id UNIQUE (entity_id);


--
-- Name: acorn_university_schools unique5_entity_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_schools
    ADD CONSTRAINT unique5_entity_id UNIQUE (entity_id);


--
-- Name: acorn_university_universities unique6_entity_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_universities
    ADD CONSTRAINT unique6_entity_id UNIQUE (entity_id);


--
-- Name: acorn_university_students unique_1to1_user_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_students
    ADD CONSTRAINT unique_1to1_user_id UNIQUE (user_id);


--
-- Name: acorn_enrollment_course_entry_requirements unique_course_related_course; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT unique_course_related_course UNIQUE (enrollment_course_id, related_course_id);


--
-- Name: acorn_university_course_year_semesters unique_course_year_academic_year_semester_specialization; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT unique_course_year_academic_year_semester_specialization UNIQUE NULLS NOT DISTINCT (course_id, course_year_id, academic_year_semester_id, course_specialization_id);


--
-- Name: acorn_enrollment_courses unique_enrollment_course_hierarchy; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_courses
    ADD CONSTRAINT unique_enrollment_course_hierarchy UNIQUE (enrollment_id, course_hierarchy_id);


--
-- Name: acorn_university_courses unique_entity_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_courses
    ADD CONSTRAINT unique_entity_id UNIQUE (entity_id);


--
-- Name: acorn_enrollment_desires unique_student_course; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_desires
    ADD CONSTRAINT unique_student_course UNIQUE (enrollment_student_id, course_entry_requirement_id);


--
-- Name: acorn_enrollment_students unique_student_enrollment; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT unique_student_enrollment UNIQUE (enrollment_id, student_id);


--
-- Name: acorn_user_users unique_user; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT unique_user UNIQUE (name, surname, birth_date, fathers_name, mothers_name, gender);


--
-- Name: acorn_university_entities unique_user_group_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT unique_user_group_id UNIQUE (user_group_id);


--
-- Name: acorn_university_hierarchies unique_user_group_version_id; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT unique_user_group_version_id UNIQUE (user_group_version_id);


--
-- Name: acorn_user_user_languages user_language; Type: CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_languages
    ADD CONSTRAINT user_language UNIQUE (user_id, language_id);


--
-- Name: acorn_calendar_instances_date_event_part_id_instance_; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_calendar_instances_date_event_part_id_instance_ ON public.acorn_calendar_instances USING btree (date, event_part_id, instance_num);


--
-- Name: acorn_user_mail_blockers_email_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_mail_blockers_email_index ON public.acorn_user_mail_blockers USING btree (email);


--
-- Name: acorn_user_mail_blockers_template_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_mail_blockers_template_index ON public.acorn_user_mail_blockers USING btree (template);


--
-- Name: acorn_user_mail_blockers_user_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_mail_blockers_user_id_index ON public.acorn_user_mail_blockers USING btree (user_id);


--
-- Name: acorn_user_throttle_ip_address_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_throttle_ip_address_index ON public.acorn_user_throttle USING btree (ip_address);


--
-- Name: acorn_user_throttle_user_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_throttle_user_id_index ON public.acorn_user_throttle USING btree (user_id);


--
-- Name: acorn_user_user_groups_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_user_groups_code_index ON public.acorn_user_user_groups USING btree (code);


--
-- Name: acorn_user_user_groups_name; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_user_groups_name ON public.acorn_user_user_groups USING btree (name) WITH (deduplicate_items='true');


--
-- Name: acorn_user_users_activation_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_users_activation_code_index ON public.acorn_user_users USING btree (activation_code);


--
-- Name: acorn_user_users_login_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_users_login_index ON public.acorn_user_users USING btree (username);


--
-- Name: acorn_user_users_reset_password_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX acorn_user_users_reset_password_code_index ON public.acorn_user_users USING btree (reset_password_code);


--
-- Name: act_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX act_code_index ON public.backend_users USING btree (activation_code);


--
-- Name: admin_role_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX admin_role_index ON public.backend_users USING btree (role_id);


--
-- Name: backend_user_throttle_ip_address_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX backend_user_throttle_ip_address_index ON public.backend_user_throttle USING btree (ip_address);


--
-- Name: backend_user_throttle_user_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX backend_user_throttle_user_id_index ON public.backend_user_throttle USING btree (user_id);


--
-- Name: cms_theme_data_theme_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX cms_theme_data_theme_index ON public.cms_theme_data USING btree (theme);


--
-- Name: cms_theme_logs_theme_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX cms_theme_logs_theme_index ON public.cms_theme_logs USING btree (theme);


--
-- Name: cms_theme_logs_type_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX cms_theme_logs_type_index ON public.cms_theme_logs USING btree (type);


--
-- Name: cms_theme_logs_user_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX cms_theme_logs_user_id_index ON public.cms_theme_logs USING btree (user_id);


--
-- Name: cms_theme_templates_path_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX cms_theme_templates_path_index ON public.cms_theme_templates USING btree (path);


--
-- Name: cms_theme_templates_source_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX cms_theme_templates_source_index ON public.cms_theme_templates USING btree (source);


--
-- Name: code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX code_index ON public.backend_user_groups USING btree (code);


--
-- Name: deferred_bindings_master_field_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX deferred_bindings_master_field_index ON public.deferred_bindings USING btree (master_field);


--
-- Name: deferred_bindings_master_type_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX deferred_bindings_master_type_index ON public.deferred_bindings USING btree (master_type);


--
-- Name: deferred_bindings_session_key_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX deferred_bindings_session_key_index ON public.deferred_bindings USING btree (session_key);


--
-- Name: deferred_bindings_slave_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX deferred_bindings_slave_id_index ON public.deferred_bindings USING btree (slave_id);


--
-- Name: deferred_bindings_slave_type_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX deferred_bindings_slave_type_index ON public.deferred_bindings USING btree (slave_type);


--
-- Name: dr_acorn_location_address_types_replica_identity; Type: INDEX; Schema: public; Owner: university
--

CREATE UNIQUE INDEX dr_acorn_location_address_types_replica_identity ON public.acorn_location_address_types USING btree (server_id, id) WITH (fillfactor='100', deduplicate_items='true');


--
-- Name: dr_acorn_location_addresses_replica_identity; Type: INDEX; Schema: public; Owner: university
--

CREATE UNIQUE INDEX dr_acorn_location_addresses_replica_identity ON public.acorn_location_addresses USING btree (server_id, id);


--
-- Name: dr_acorn_location_area_types_replica_identity; Type: INDEX; Schema: public; Owner: university
--

CREATE UNIQUE INDEX dr_acorn_location_area_types_replica_identity ON public.acorn_location_area_types USING btree (server_id, id);


--
-- Name: dr_acorn_location_areas_replica_identity; Type: INDEX; Schema: public; Owner: university
--

CREATE UNIQUE INDEX dr_acorn_location_areas_replica_identity ON public.acorn_location_areas USING btree (server_id, id);


--
-- Name: dr_acorn_location_gps_replica_identity; Type: INDEX; Schema: public; Owner: university
--

CREATE UNIQUE INDEX dr_acorn_location_gps_replica_identity ON public.acorn_location_gps USING btree (server_id, id);


--
-- Name: dr_acorn_location_location_replica_identity; Type: INDEX; Schema: public; Owner: university
--

CREATE UNIQUE INDEX dr_acorn_location_location_replica_identity ON public.acorn_location_locations USING btree (server_id, id);


--
-- Name: dr_acorn_location_types_replica_identity; Type: INDEX; Schema: public; Owner: university
--

CREATE UNIQUE INDEX dr_acorn_location_types_replica_identity ON public.acorn_location_types USING btree (server_id, id);


--
-- Name: fki_acorn_calendar_event_parts_user_group_version_id_; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_acorn_calendar_event_parts_user_group_version_id_ ON public.acorn_calendar_event_parts USING btree (user_group_version_id);


--
-- Name: fki_address_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_address_id ON public.acorn_location_user_addresses USING btree (address_id);


--
-- Name: fki_address_type_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_address_type_id ON public.acorn_location_user_addresses USING btree (address_type_id);


--
-- Name: fki_calculation_academic_year_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_calculation_academic_year_id ON public.acorn_enrollment_enrollments USING btree (calculation_academic_year_id);


--
-- Name: fki_calculation_course_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_calculation_course_id ON public.acorn_enrollment_enrollments USING btree (calculation_course_id);


--
-- Name: fki_calculation_course_type_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_calculation_course_type_id ON public.acorn_enrollment_enrollments USING btree (calculation_course_type_id);


--
-- Name: fki_calculation_exam_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_calculation_exam_id ON public.acorn_enrollment_enrollments USING btree (calculation_exam_id);


--
-- Name: fki_calculation_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_calculation_id ON public.acorn_enrollment_enrollments USING btree (calculation_id);


--
-- Name: fki_calendar_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_calendar_id ON public.acorn_university_hierarchies USING btree (default_calendar_id);


--
-- Name: fki_course_entry_requirements_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_course_entry_requirements_id ON public.acorn_enrollment_desires USING btree (course_entry_requirement_id);


--
-- Name: fki_course_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_course_id ON public.acorn_university_course_language USING btree (course_id);


--
-- Name: fki_course_material_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_course_material_id ON public.acorn_exam_exam_materials USING btree (course_material_id);


--
-- Name: fki_course_specialization_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_course_specialization_id ON public.acorn_university_course_year_semesters USING btree (course_specialization_id);


--
-- Name: fki_course_type_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_course_type_id ON public.acorn_university_courses USING btree (course_type_id);


--
-- Name: fki_course_year_semester_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_course_year_semester_id ON public.acorn_university_course_materials USING btree (course_year_semester_id);


--
-- Name: fki_course_year_setting_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_course_year_setting_id ON public.acorn_university_course_year_semesters USING btree (course_plan_id);


--
-- Name: fki_created_by_user_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_created_by_user_id ON public.acorn_university_entities USING btree (created_by_user_id);


--
-- Name: fki_enrollment_academic_year_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_enrollment_academic_year_id ON public.acorn_university_course_year_semesters USING btree (enrollment_academic_year_id);


--
-- Name: fki_enrollment_course_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_enrollment_course_id ON public.acorn_enrollment_course_entry_requirements USING btree (enrollment_course_id);


--
-- Name: fki_enrollment_student_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_enrollment_student_id ON public.acorn_enrollment_desires USING btree (enrollment_student_id);


--
-- Name: fki_entity_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_entity_id ON public.acorn_university_universities USING btree (id);


--
-- Name: fki_ethnicity_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_ethnicity_id ON public.acorn_user_users USING btree (ethnicity_id);


--
-- Name: fki_event_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_event_id ON public.acorn_exam_interview_students USING btree (event_id);


--
-- Name: fki_exam_centre_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_exam_centre_id ON public.acorn_exam_instances USING btree (exam_centre_id);


--
-- Name: fki_exam_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_exam_id ON public.acorn_exam_exam_materials USING btree (exam_id);


--
-- Name: fki_exam_material_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_exam_material_id ON public.acorn_exam_scores USING btree (exam_material_id);


--
-- Name: fki_global_scope_academic_year_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_global_scope_academic_year_id ON public.acorn_user_users USING btree (global_scope_academic_year_id);


--
-- Name: fki_global_scope_entity_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_global_scope_entity_id ON public.acorn_user_users USING btree (global_scope_entity_id);


--
-- Name: fki_hierarchy_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_hierarchy_id ON public.acorn_enrollment_courses USING btree (course_hierarchy_id);


--
-- Name: fki_high_school_course_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_high_school_course_id ON public.acorn_enrollment_course_entry_requirements USING btree (related_course_id);


--
-- Name: fki_identity_type_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_identity_type_id ON public.acorn_university_student_identities USING btree (identity_type_id);


--
-- Name: fki_interview_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_interview_id ON public.acorn_exam_interview_students USING btree (interview_id);


--
-- Name: fki_language_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_language_id ON public.acorn_university_course_language USING btree (language_id);


--
-- Name: fki_location_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_location_id ON public.acorn_location_user_group_location USING btree (location_id);


--
-- Name: fki_material_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_material_id ON public.acorn_exam_exam_materials USING btree (course_material_id);


--
-- Name: fki_material_topic_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_material_topic_id ON public.acorn_university_course_materials USING btree (material_topic_id);


--
-- Name: fki_owner_entity_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_owner_entity_id ON public.acorn_exam_calculations USING btree (owner_entity_id);


--
-- Name: fki_owner_student_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_owner_student_id ON public.acorn_university_project_students USING btree (owner_student_id);


--
-- Name: fki_owner_user_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_owner_user_id ON public.acorn_university_project_students USING btree (owner_student_id);


--
-- Name: fki_parent_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_parent_id ON public.acorn_university_hierarchies USING btree (parent_id);


--
-- Name: fki_project_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_project_id ON public.acorn_exam_exam_materials USING btree (project_id);


--
-- Name: fki_proposal_run_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_proposal_run_id ON public.acorn_enrollment_students USING btree (proposal_run_id);


--
-- Name: fki_proposed_enrollment_course_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_proposed_enrollment_course_id ON public.acorn_enrollment_students USING btree (proposed_desire_id);


--
-- Name: fki_religion_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_religion_id ON public.acorn_user_users USING btree (religion_id);


--
-- Name: fki_required_enrollment_exam_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_required_enrollment_exam_id ON public.acorn_enrollment_course_entry_requirements USING btree (required_exam_id);


--
-- Name: fki_required_interview_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_required_interview_id ON public.acorn_enrollment_course_entry_requirements USING btree (required_interview_id);


--
-- Name: fki_section_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_section_id ON public.acorn_exam_questions USING btree (section_id);


--
-- Name: fki_semester_group_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_semester_group_id ON public.acorn_university_semesters USING btree (semester_group_id);


--
-- Name: fki_semester_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_semester_id ON public.acorn_university_academic_year_semesters USING btree (semester_id);


--
-- Name: fki_server_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_server_id ON public.acorn_university_entities USING btree (server_id);


--
-- Name: fki_student_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_student_id ON public.acorn_exam_scores USING btree (student_id);


--
-- Name: fki_teacher_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_teacher_id ON public.acorn_exam_interview_students USING btree (teacher_id);


--
-- Name: fki_type_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_type_id ON public.acorn_location_locations USING btree (type_id);


--
-- Name: fki_updated_by_user_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_updated_by_user_id ON public.acorn_university_entities USING btree (updated_by_user_id);


--
-- Name: fki_user_group_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_user_group_id ON public.acorn_university_entities USING btree (user_group_id);


--
-- Name: fki_user_group_version_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_user_group_version_id ON public.acorn_university_entities USING btree (user_group_id);


--
-- Name: fki_user_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_user_id ON public.acorn_user_user_group_version USING btree (user_id);


--
-- Name: fki_year_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX fki_year_id ON public.acorn_university_hierarchies USING btree (academic_year_id);


--
-- Name: idx_code; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX idx_code ON public.acorn_university_student_codes USING btree (code) WITH (deduplicate_items='true');


--
-- Name: idx_student_id; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX idx_student_id ON public.acorn_enrollment_olapcube USING btree (id) WITH (fillfactor='100', deduplicate_items='true');


--
-- Name: idx_type; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX idx_type ON public.acorn_university_student_types USING btree (type) WITH (fillfactor='100', deduplicate_items='true');


--
-- Name: item_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX item_index ON public.system_parameters USING btree (namespace, "group", item);


--
-- Name: jobs_queue_reserved_at_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX jobs_queue_reserved_at_index ON public.jobs USING btree (queue, reserved_at);


--
-- Name: name_regexp2; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX name_regexp2 ON public.acorn_exam_result_internal2s USING gin (name public.gin_trgm_ops);


--
-- Name: rainlab_location_countries_name_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX rainlab_location_countries_name_index ON public.winter_location_countries USING btree (name);


--
-- Name: rainlab_location_states_country_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX rainlab_location_states_country_id_index ON public.winter_location_states USING btree (country_id);


--
-- Name: rainlab_location_states_name_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX rainlab_location_states_name_index ON public.winter_location_states USING btree (name);


--
-- Name: reset_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX reset_code_index ON public.backend_users USING btree (reset_password_code);


--
-- Name: result_name_btree; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX result_name_btree ON public.acorn_exam_result_internal2s USING btree (name) WITH (deduplicate_items='true');


--
-- Name: role_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX role_code_index ON public.backend_user_roles USING btree (code);


--
-- Name: score; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX score ON public.acorn_exam_score_names USING btree (score) WITH (deduplicate_items='true');


--
-- Name: sessions_last_activity_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX sessions_last_activity_index ON public.sessions USING btree (last_activity);


--
-- Name: sessions_user_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX sessions_user_id_index ON public.sessions USING btree (user_id);


--
-- Name: system_event_logs_level_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_event_logs_level_index ON public.system_event_logs USING btree (level);


--
-- Name: system_files_attachment_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_files_attachment_id_index ON public.system_files USING btree (attachment_id);


--
-- Name: system_files_attachment_type_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_files_attachment_type_index ON public.system_files USING btree (attachment_type);


--
-- Name: system_files_field_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_files_field_index ON public.system_files USING btree (field);


--
-- Name: system_mail_templates_layout_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_mail_templates_layout_id_index ON public.system_mail_templates USING btree (layout_id);


--
-- Name: system_plugin_history_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_plugin_history_code_index ON public.system_plugin_history USING btree (code);


--
-- Name: system_plugin_history_type_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_plugin_history_type_index ON public.system_plugin_history USING btree (type);


--
-- Name: system_plugin_versions_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_plugin_versions_code_index ON public.system_plugin_versions USING btree (code);


--
-- Name: system_revisions_field_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_revisions_field_index ON public.system_revisions USING btree (field);


--
-- Name: system_revisions_user_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_revisions_user_id_index ON public.system_revisions USING btree (user_id);


--
-- Name: system_settings_item_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX system_settings_item_index ON public.system_settings USING btree (item);


--
-- Name: user_item_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX user_item_index ON public.backend_user_preferences USING btree (user_id, namespace, "group", item);


--
-- Name: winter_translate_attributes_locale_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_attributes_locale_index ON public.winter_translate_attributes USING btree (locale);


--
-- Name: winter_translate_attributes_model_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_attributes_model_id_index ON public.winter_translate_attributes USING btree (model_id);


--
-- Name: winter_translate_attributes_model_type_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_attributes_model_type_index ON public.winter_translate_attributes USING btree (model_type);


--
-- Name: winter_translate_indexes_item_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_indexes_item_index ON public.winter_translate_indexes USING btree (item);


--
-- Name: winter_translate_indexes_locale_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_indexes_locale_index ON public.winter_translate_indexes USING btree (locale);


--
-- Name: winter_translate_indexes_model_id_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_indexes_model_id_index ON public.winter_translate_indexes USING btree (model_id);


--
-- Name: winter_translate_indexes_model_type_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_indexes_model_type_index ON public.winter_translate_indexes USING btree (model_type);


--
-- Name: winter_translate_locales_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_locales_code_index ON public.winter_translate_locales USING btree (code);


--
-- Name: winter_translate_locales_name_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_locales_name_index ON public.winter_translate_locales USING btree (name);


--
-- Name: winter_translate_messages_code_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_messages_code_index ON public.winter_translate_messages USING btree (code);


--
-- Name: winter_translate_messages_code_pre_2_1_0_index; Type: INDEX; Schema: public; Owner: university
--

CREATE INDEX winter_translate_messages_code_pre_2_1_0_index ON public.winter_translate_messages USING btree (code_pre_2_1_0);


--
-- Name: acorn_university_student_lookups _RETURN; Type: RULE; Schema: public; Owner: university
--

CREATE OR REPLACE VIEW public.acorn_university_student_lookups AS
 SELECT s.id,
    s.id AS student_id,
    sc.id AS school_id,
    c_hs.id AS course_id,
    JSON_ARRAYAGG(c_hsy.id RETURNING json) AS course_year_ids,
    s.legacy_import_student_type,
    co.name AS code,
    hi_cs.academic_year_id,
    u.name,
    u.surname,
    (((COALESCE(u.name, ''::character varying))::text || ' '::text) || (COALESCE(u.surname, ''::character varying))::text) AS full_name,
    u.fathers_name
   FROM ((((((((((((public.acorn_university_hierarchies hi_cs
     JOIN public.acorn_university_course_year_semesters cys ON ((cys.entity_id = hi_cs.entity_id)))
     JOIN public.acorn_university_courses c_hs ON (((c_hs.id = cys.course_id) AND (c_hs.course_type_id = 'a5d8016a-78ad-4296-aac7-fc5332045764'::uuid))))
     JOIN public.acorn_user_user_group_version ugv_cs ON ((ugv_cs.user_group_version_id = hi_cs.user_group_version_id)))
     JOIN public.acorn_university_students s ON ((ugv_cs.user_id = s.user_id)))
     JOIN public.acorn_user_users u ON ((s.user_id = u.id)))
     JOIN public.acorn_university_hierarchies hip_sc ON ((hi_cs.parent_id = hip_sc.id)))
     JOIN public.acorn_university_schools sc ON ((sc.entity_id = hip_sc.entity_id)))
     LEFT JOIN public.acorn_university_student_codes co ON ((co.student_id = s.id)))
     LEFT JOIN public.acorn_user_user_group_version ugv_csy ON ((ugv_csy.user_id = s.user_id)))
     LEFT JOIN public.acorn_university_hierarchies hi_csy ON ((hi_csy.user_group_version_id = ugv_csy.user_group_version_id)))
     LEFT JOIN public.acorn_university_course_year_semesters cys2 ON ((cys2.entity_id = hi_csy.entity_id)))
     LEFT JOIN public.acorn_university_courses c_hsy ON (((c_hsy.id = cys2.course_id) AND (c_hsy.course_type_id = '801fb8af-5ed3-4436-b89e-9151e9558c24'::uuid))))
  GROUP BY s.id, sc.id, c_hs.id, co.name, hi_cs.academic_year_id, u.name, u.surname, u.fathers_name;


--
-- Name: acorn_calendar_event_parts tr_acorn_calendar_events_generate_event_instances; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_calendar_events_generate_event_instances AFTER INSERT OR UPDATE ON public.acorn_calendar_event_parts FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_calendar_events_generate_event_instances();


--
-- Name: acorn_enrollment_course_entry_requirements tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_enrollment_course_entry_requirements FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_enrollment_courses tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_enrollment_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_enrollment_desires tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_enrollment_desires FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_enrollment_enrollments tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_enrollment_enrollments FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_enrollment_runs tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_enrollment_runs FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_enrollment_student_notes tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_enrollment_student_notes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_enrollment_students tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_enrollment_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_answers tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_answers FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_calculation_course_materials tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_calculation_course_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_calculation_course_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_calculation_course_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_calculation_courses tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_calculation_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_calculation_material_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_calculation_material_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_calculation_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_calculation_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_calculations tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_calculations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_centres tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_centres FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_exam_materials tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_exam_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_exams tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_exams FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_instances tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_instances FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_interview_students tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_interview_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_interviews tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_interviews FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_questions tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_questions FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_score_names tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_score_names FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_scores tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_scores FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_sections tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_sections FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_exam_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_exam_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_academic_year_semesters tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_academic_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_academic_years tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_academic_years FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_course_materials tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_course_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_course_plans tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_course_plans FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_course_specializations tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_course_specializations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_course_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_course_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_course_years tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_course_years FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_document_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_document_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_entities tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_entities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_hierarchies tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_hierarchies FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_hierarchy_event tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_hierarchy_event FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_identity_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_identity_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_lectures tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_lectures FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_material_topics tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_material_topics FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_material_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_material_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_materials tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_project_students tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_project_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_projects tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_projects FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_semester_groups tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_semester_groups FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_semesters tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_codes tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_codes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_course_material_addition tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_course_material_addition FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_course_material_removal tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_course_material_removal FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_documents tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_documents FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_identities tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_identities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_notes tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_notes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_statuses tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_statuses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_student_types tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_student_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_university_students tr_acorn_created_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_created_by_user_id BEFORE INSERT ON public.acorn_university_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_created_by_user_id();


--
-- Name: acorn_enrollment_desires tr_acorn_enrollment_desires_ordinal; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_enrollment_desires_ordinal BEFORE INSERT ON public.acorn_enrollment_desires FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_enrollment_desires_ordinal();


--
-- Name: acorn_exam_scores tr_acorn_exam_scores_log; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_exam_scores_log AFTER INSERT OR DELETE OR UPDATE ON public.acorn_exam_scores FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_exam_scores_log();


--
-- Name: acorn_location_address_types tr_acorn_location_address_types_new_replicated_row; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_address_types_new_replicated_row BEFORE INSERT ON public.acorn_location_address_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_new_replicated_row();

ALTER TABLE public.acorn_location_address_types ENABLE ALWAYS TRIGGER tr_acorn_location_address_types_new_replicated_row;


--
-- Name: acorn_location_address_types tr_acorn_location_address_types_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_address_types_server_id BEFORE INSERT ON public.acorn_location_address_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_location_addresses tr_acorn_location_addresses_new_replicated_row; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_addresses_new_replicated_row BEFORE INSERT ON public.acorn_location_addresses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_new_replicated_row();

ALTER TABLE public.acorn_location_addresses ENABLE ALWAYS TRIGGER tr_acorn_location_addresses_new_replicated_row;


--
-- Name: acorn_location_addresses tr_acorn_location_addresses_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_addresses_server_id BEFORE INSERT ON public.acorn_location_addresses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_location_area_types tr_acorn_location_area_types_new_replicated_row; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_area_types_new_replicated_row BEFORE INSERT ON public.acorn_location_area_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_new_replicated_row();

ALTER TABLE public.acorn_location_area_types ENABLE ALWAYS TRIGGER tr_acorn_location_area_types_new_replicated_row;


--
-- Name: acorn_location_area_types tr_acorn_location_area_types_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_area_types_server_id BEFORE INSERT ON public.acorn_location_area_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_location_areas tr_acorn_location_areas_new_replicated_row; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_areas_new_replicated_row BEFORE INSERT ON public.acorn_location_areas FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_new_replicated_row();

ALTER TABLE public.acorn_location_areas ENABLE ALWAYS TRIGGER tr_acorn_location_areas_new_replicated_row;


--
-- Name: acorn_location_areas tr_acorn_location_areas_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_areas_server_id BEFORE INSERT ON public.acorn_location_areas FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_location_gps tr_acorn_location_gps_new_replicated_row; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_gps_new_replicated_row BEFORE INSERT ON public.acorn_location_gps FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_new_replicated_row();

ALTER TABLE public.acorn_location_gps ENABLE ALWAYS TRIGGER tr_acorn_location_gps_new_replicated_row;


--
-- Name: acorn_location_gps tr_acorn_location_gps_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_gps_server_id BEFORE INSERT ON public.acorn_location_gps FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_location_locations tr_acorn_location_locations_new_replicated_row; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_locations_new_replicated_row BEFORE INSERT ON public.acorn_location_locations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_new_replicated_row();

ALTER TABLE public.acorn_location_locations ENABLE ALWAYS TRIGGER tr_acorn_location_locations_new_replicated_row;


--
-- Name: acorn_location_locations tr_acorn_location_locations_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_locations_server_id BEFORE INSERT ON public.acorn_location_locations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_location_types tr_acorn_location_types_new_replicated_row; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_types_new_replicated_row BEFORE INSERT ON public.acorn_location_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_new_replicated_row();

ALTER TABLE public.acorn_location_types ENABLE ALWAYS TRIGGER tr_acorn_location_types_new_replicated_row;


--
-- Name: acorn_location_types tr_acorn_location_types_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_location_types_server_id BEFORE INSERT ON public.acorn_location_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_enrollment_course_entry_requirements tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_enrollment_course_entry_requirements FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_enrollment_courses tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_enrollment_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_enrollment_desires tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_enrollment_desires FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_enrollment_enrollments tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_enrollment_enrollments FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_enrollment_runs tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_enrollment_runs FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_enrollment_student_notes tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_enrollment_student_notes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_enrollment_students tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_enrollment_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_answers tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_answers FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_calculation_course_materials tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_calculation_course_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_calculation_course_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_calculation_course_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_calculation_courses tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_calculation_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_calculation_material_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_calculation_material_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_calculation_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_calculation_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_calculations tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_calculations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_centres tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_centres FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_exam_materials tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_exam_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_exams tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_exams FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_instances tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_instances FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_interview_students tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_interview_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_interviews tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_interviews FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_questions tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_questions FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_score_names tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_score_names FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_scores tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_scores FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_sections tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_sections FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_exam_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_exam_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_academic_year_semesters tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_academic_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_academic_years tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_academic_years FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_course_materials tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_course_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_course_plans tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_course_plans FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_course_specializations tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_course_specializations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_course_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_course_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_course_years tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_course_years FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_document_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_document_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_entities tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_entities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_hierarchies tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_hierarchies FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_hierarchy_event tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_hierarchy_event FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_identity_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_identity_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_lectures tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_lectures FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_material_topics tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_material_topics FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_material_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_material_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_materials tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_project_students tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_project_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_projects tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_projects FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_semester_groups tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_semester_groups FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_semesters tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_codes tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_codes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_course_material_addition tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_course_material_addition FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_course_material_removal tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_course_material_removal FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_documents tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_documents FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_identities tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_identities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_notes tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_notes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_statuses tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_statuses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_student_types tr_acorn_server_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_server_id BEFORE INSERT ON public.acorn_university_student_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_server_id();


--
-- Name: acorn_university_hierarchy_event tr_acorn_university_cascade_delete_event; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_cascade_delete_event AFTER DELETE ON public.acorn_university_hierarchy_event FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_cascade_delete_event();


--
-- Name: acorn_university_lectures tr_acorn_university_cascade_delete_event; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_cascade_delete_event AFTER DELETE ON public.acorn_university_lectures FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_cascade_delete_event();


--
-- Name: acorn_university_course_materials tr_acorn_university_cm_order; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_cm_order BEFORE INSERT ON public.acorn_university_course_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_cm_order();


--
-- Name: acorn_university_courses tr_acorn_university_courses_unique_name_type; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_courses_unique_name_type BEFORE INSERT OR UPDATE ON public.acorn_university_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_courses_unique_name_type();


--
-- Name: acorn_university_course_year_semesters tr_acorn_university_cys_manage_hierarchy; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_cys_manage_hierarchy AFTER INSERT ON public.acorn_university_course_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_cys_manage_hierarchy();


--
-- Name: acorn_university_course_year_semesters tr_acorn_university_delete_entity; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_entity AFTER DELETE ON public.acorn_university_course_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_entity();


--
-- Name: acorn_university_courses tr_acorn_university_delete_entity; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_entity AFTER DELETE ON public.acorn_university_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_entity();


--
-- Name: acorn_university_departments tr_acorn_university_delete_entity; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_entity AFTER DELETE ON public.acorn_university_departments FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_entity();


--
-- Name: acorn_university_education_authorities tr_acorn_university_delete_entity; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_entity AFTER DELETE ON public.acorn_university_education_authorities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_entity();


--
-- Name: acorn_university_faculties tr_acorn_university_delete_entity; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_entity AFTER DELETE ON public.acorn_university_faculties FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_entity();


--
-- Name: acorn_university_schools tr_acorn_university_delete_entity; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_entity AFTER DELETE ON public.acorn_university_schools FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_entity();


--
-- Name: acorn_university_universities tr_acorn_university_delete_entity; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_entity AFTER DELETE ON public.acorn_university_universities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_entity();


--
-- Name: acorn_university_entities tr_acorn_university_delete_user_group; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_delete_user_group AFTER DELETE ON public.acorn_university_entities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_delete_user_group();


--
-- Name: acorn_university_course_year_semesters tr_acorn_university_enrollment_year; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_enrollment_year BEFORE INSERT ON public.acorn_university_course_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_enrollment_year();


--
-- Name: acorn_university_course_year_semesters tr_acorn_university_entities_leaf_table; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_entities_leaf_table AFTER INSERT ON public.acorn_university_course_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_entities_leaf_table();


--
-- Name: acorn_university_courses tr_acorn_university_entities_leaf_table; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_entities_leaf_table AFTER INSERT ON public.acorn_university_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_entities_leaf_table();


--
-- Name: acorn_university_departments tr_acorn_university_entities_leaf_table; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_entities_leaf_table AFTER INSERT ON public.acorn_university_departments FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_entities_leaf_table();


--
-- Name: acorn_university_education_authorities tr_acorn_university_entities_leaf_table; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_entities_leaf_table AFTER INSERT ON public.acorn_university_education_authorities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_entities_leaf_table();


--
-- Name: acorn_university_faculties tr_acorn_university_entities_leaf_table; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_entities_leaf_table AFTER INSERT ON public.acorn_university_faculties FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_entities_leaf_table();


--
-- Name: acorn_university_schools tr_acorn_university_entities_leaf_table; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_entities_leaf_table AFTER INSERT ON public.acorn_university_schools FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_entities_leaf_table();


--
-- Name: acorn_university_universities tr_acorn_university_entities_leaf_table; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_entities_leaf_table AFTER INSERT ON public.acorn_university_universities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_entities_leaf_table();


--
-- Name: acorn_university_hierarchies tr_acorn_university_hierarchies_create_version; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_hierarchies_create_version BEFORE INSERT ON public.acorn_university_hierarchies FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_hierarchies_create_version();


--
-- Name: acorn_university_hierarchies tr_acorn_university_hierarchies_delete_version; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_hierarchies_delete_version AFTER DELETE ON public.acorn_university_hierarchies FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_hierarchies_delete_version();


--
-- Name: acorn_user_user_group_version tr_acorn_university_hierarchies_descendants_user_cnts; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_hierarchies_descendants_user_cnts AFTER INSERT OR DELETE OR UPDATE ON public.acorn_user_user_group_version FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnts();


--
-- Name: acorn_university_hierarchies tr_acorn_university_hierarchies_manage_cys; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_hierarchies_manage_cys AFTER INSERT ON public.acorn_university_hierarchies FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_hierarchies_manage_cys();


--
-- Name: acorn_university_hierarchies tr_acorn_university_hierarchies_update_version; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_hierarchies_update_version BEFORE UPDATE ON public.acorn_university_hierarchies FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_hierarchies_update_version();


--
-- Name: acorn_university_hierarchy_event tr_acorn_university_hierarchy_lock_event; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_hierarchy_lock_event AFTER INSERT ON public.acorn_university_hierarchy_event FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_hierarchy_lock_event();


--
-- Name: acorn_university_entities tr_acorn_university_import_source_empty; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_import_source_empty BEFORE INSERT OR UPDATE ON public.acorn_university_entities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_import_source_empty();


--
-- Name: acorn_university_lectures tr_acorn_university_lecture_sync_lock_event; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_lecture_sync_lock_event AFTER INSERT ON public.acorn_university_lectures FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_lecture_sync_lock_event();


--
-- Name: acorn_university_course_plans tr_acorn_university_provision_year_semesters; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_provision_year_semesters AFTER INSERT OR UPDATE ON public.acorn_university_course_plans FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_provision_year_semesters();


--
-- Name: acorn_university_course_year_semesters tr_acorn_university_semester_ordinal_delete; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_semester_ordinal_delete AFTER DELETE ON public.acorn_university_course_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_semester_ordinal_delete();


--
-- Name: acorn_university_course_year_semesters tr_acorn_university_semester_ordinal_insert; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_semester_ordinal_insert BEFORE INSERT ON public.acorn_university_course_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_semester_ordinal_insert();


--
-- Name: acorn_university_student_codes tr_acorn_university_student_codes_current; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_student_codes_current AFTER INSERT OR UPDATE ON public.acorn_university_student_codes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_student_codes_current();


--
-- Name: acorn_university_students tr_acorn_university_student_documents; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_student_documents AFTER INSERT OR UPDATE ON public.acorn_university_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_student_documents();


--
-- Name: acorn_university_student_identities tr_acorn_university_student_identities_current; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_university_student_identities_current AFTER INSERT OR UPDATE ON public.acorn_university_student_identities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_university_student_identities_current();


--
-- Name: acorn_enrollment_course_entry_requirements tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_enrollment_course_entry_requirements FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_enrollment_courses tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_enrollment_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_enrollment_desires tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_enrollment_desires FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_enrollment_enrollments tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_enrollment_enrollments FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_enrollment_runs tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_enrollment_runs FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_enrollment_student_notes tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_enrollment_student_notes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_enrollment_students tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_enrollment_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_answers tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_answers FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_calculation_course_materials tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_calculation_course_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_calculation_course_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_calculation_course_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_calculation_courses tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_calculation_courses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_calculation_material_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_calculation_material_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_calculation_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_calculation_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_calculations tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_calculations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_centres tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_centres FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_exam_materials tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_exam_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_exams tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_exams FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_instances tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_instances FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_interview_students tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_interview_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_interviews tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_interviews FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_questions tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_questions FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_score_names tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_score_names FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_scores tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_scores FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_sections tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_sections FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_exam_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_exam_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_academic_year_semesters tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_academic_year_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_academic_years tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_academic_years FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_course_materials tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_course_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_course_plans tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_course_plans FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_course_specializations tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_course_specializations FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_course_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_course_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_course_years tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_course_years FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_document_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_document_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_entities tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_entities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_hierarchies tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_hierarchies FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_hierarchy_event tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_hierarchy_event FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_identity_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_identity_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_lectures tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_lectures FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_material_topics tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_material_topics FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_material_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_material_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_materials tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_materials FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_project_students tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_project_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_projects tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_projects FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_semester_groups tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_semester_groups FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_semesters tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_semesters FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_codes tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_codes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_course_material_addition tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_course_material_addition FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_course_material_removal tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_course_material_removal FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_documents tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_documents FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_identities tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_identities FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_notes tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_notes FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_statuses tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_statuses FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_student_types tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_student_types FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_university_students tr_acorn_updated_by_user_id; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_updated_by_user_id BEFORE UPDATE ON public.acorn_university_students FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_updated_by_user_id();


--
-- Name: acorn_user_user_groups tr_acorn_user_user_group_first_version; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_user_user_group_first_version AFTER INSERT ON public.acorn_user_user_groups FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_user_user_group_first_version();


--
-- Name: acorn_user_user_group_versions tr_acorn_user_user_group_version_current; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_user_user_group_version_current BEFORE INSERT OR UPDATE ON public.acorn_user_user_group_versions FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_user_user_group_version_current();


--
-- Name: acorn_user_user_languages tr_acorn_user_user_languages_current; Type: TRIGGER; Schema: public; Owner: university
--

CREATE TRIGGER tr_acorn_user_user_languages_current AFTER INSERT OR UPDATE ON public.acorn_user_user_languages FOR EACH ROW EXECUTE FUNCTION public.fn_acorn_user_user_languages_current();


--
-- Name: acorn_university_hierarchies academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT academic_year_id ON acorn_university_hierarchies; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_university_hierarchies IS 'global-scope: to
name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_exam_calculation_courses academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_courses
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) NOT VALID;


--
-- Name: CONSTRAINT academic_year_id ON acorn_exam_calculation_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_exam_calculation_courses IS 'name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_exam_calculation_course_materials academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_materials
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id);


--
-- Name: CONSTRAINT academic_year_id ON acorn_exam_calculation_course_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_exam_calculation_course_materials IS 'name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_exam_result_internal2s academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT academic_year_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_exam_centres academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_centres
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT academic_year_id ON acorn_exam_centres; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_exam_centres IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_exam_calculations academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) NOT VALID;


--
-- Name: CONSTRAINT academic_year_id ON acorn_exam_calculations; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_exam_calculations IS 'global-scope: to
field-exclude: true
column-exclude: true';


--
-- Name: acorn_university_course_plans academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_plans
    ADD CONSTRAINT academic_year_id FOREIGN KEY (enrollment_academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT academic_year_id ON acorn_university_course_plans; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_university_course_plans IS 'name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_university_academic_year_semesters academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_year_semesters
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT academic_year_id ON acorn_university_academic_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_university_academic_year_semesters IS 'global-scope: to
name-object: true
';


--
-- Name: acorn_exam_calculation_material_types academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_material_types
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT academic_year_id ON acorn_exam_calculation_material_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_exam_calculation_material_types IS 'name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_exam_calculation_course_types academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT academic_year_id FOREIGN KEY (academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT academic_year_id ON acorn_exam_calculation_course_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_id ON public.acorn_exam_calculation_course_types IS 'name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_university_course_year_semesters academic_year_semester_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT academic_year_semester_id FOREIGN KEY (academic_year_semester_id) REFERENCES public.acorn_university_academic_year_semesters(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT academic_year_semester_id ON acorn_university_course_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT academic_year_semester_id ON public.acorn_university_course_year_semesters IS 'name-object: true
can-filter: true';


--
-- Name: acorn_calendar_calendars acorn_calendar_calendars_owner_user_group_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_calendars
    ADD CONSTRAINT acorn_calendar_calendars_owner_user_group_id_foreign FOREIGN KEY (owner_user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_calendars acorn_calendar_calendars_owner_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_calendars
    ADD CONSTRAINT acorn_calendar_calendars_owner_user_id_foreign FOREIGN KEY (owner_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_part_user acorn_calendar_event_part_user_event_part_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_part_user
    ADD CONSTRAINT acorn_calendar_event_part_user_event_part_id_foreign FOREIGN KEY (event_part_id) REFERENCES public.acorn_calendar_event_parts(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_part_user_group acorn_calendar_event_part_user_group_event_part_id_fo; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_part_user_group
    ADD CONSTRAINT acorn_calendar_event_part_user_group_event_part_id_fo FOREIGN KEY (event_part_id) REFERENCES public.acorn_calendar_event_parts(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_part_user_group acorn_calendar_event_part_user_group_user_group_id_fo; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_part_user_group
    ADD CONSTRAINT acorn_calendar_event_part_user_group_user_group_id_fo FOREIGN KEY (user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_part_user acorn_calendar_event_part_user_role_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_part_user
    ADD CONSTRAINT acorn_calendar_event_part_user_role_id_foreign FOREIGN KEY (role_id) REFERENCES public.acorn_user_roles(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_part_user acorn_calendar_event_part_user_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_part_user
    ADD CONSTRAINT acorn_calendar_event_part_user_user_id_foreign FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_parts acorn_calendar_event_parts_event_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_parts
    ADD CONSTRAINT acorn_calendar_event_parts_event_id_foreign FOREIGN KEY (event_id) REFERENCES public.acorn_calendar_events(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_parts acorn_calendar_event_parts_locked_by_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_parts
    ADD CONSTRAINT acorn_calendar_event_parts_locked_by_user_id_foreign FOREIGN KEY (locked_by_user_id) REFERENCES public.backend_users(id) ON DELETE SET NULL;


--
-- Name: acorn_calendar_event_parts acorn_calendar_event_parts_parent_event_part_id_forei; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_parts
    ADD CONSTRAINT acorn_calendar_event_parts_parent_event_part_id_forei FOREIGN KEY (parent_event_part_id) REFERENCES public.acorn_calendar_event_parts(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_parts acorn_calendar_event_parts_status_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_parts
    ADD CONSTRAINT acorn_calendar_event_parts_status_id_foreign FOREIGN KEY (status_id) REFERENCES public.acorn_calendar_event_statuses(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_parts acorn_calendar_event_parts_type_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_parts
    ADD CONSTRAINT acorn_calendar_event_parts_type_id_foreign FOREIGN KEY (type_id) REFERENCES public.acorn_calendar_event_types(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_parts acorn_calendar_event_parts_user_group_version_id_fore; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_parts
    ADD CONSTRAINT acorn_calendar_event_parts_user_group_version_id_fore FOREIGN KEY (user_group_version_id) REFERENCES public.acorn_user_user_group_versions(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_calendar_event_statuses acorn_calendar_event_statuses_calendar_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_statuses
    ADD CONSTRAINT acorn_calendar_event_statuses_calendar_id_foreign FOREIGN KEY (calendar_id) REFERENCES public.acorn_calendar_calendars(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_event_types acorn_calendar_event_types_calendar_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_event_types
    ADD CONSTRAINT acorn_calendar_event_types_calendar_id_foreign FOREIGN KEY (calendar_id) REFERENCES public.acorn_calendar_calendars(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_events acorn_calendar_events_calendar_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_events
    ADD CONSTRAINT acorn_calendar_events_calendar_id_foreign FOREIGN KEY (calendar_id) REFERENCES public.acorn_calendar_calendars(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_events acorn_calendar_events_owner_user_group_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_events
    ADD CONSTRAINT acorn_calendar_events_owner_user_group_id_foreign FOREIGN KEY (owner_user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_events acorn_calendar_events_owner_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_events
    ADD CONSTRAINT acorn_calendar_events_owner_user_id_foreign FOREIGN KEY (owner_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_calendar_instances acorn_calendar_instances_event_part_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_calendar_instances
    ADD CONSTRAINT acorn_calendar_instances_event_part_id_foreign FOREIGN KEY (event_part_id) REFERENCES public.acorn_calendar_event_parts(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_message_instance acorn_messaging_message_instance_instance_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_instance
    ADD CONSTRAINT acorn_messaging_message_instance_instance_id_foreign FOREIGN KEY (instance_id) REFERENCES public.acorn_calendar_instances(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_message_instance acorn_messaging_message_instance_message_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_instance
    ADD CONSTRAINT acorn_messaging_message_instance_message_id_foreign FOREIGN KEY (message_id) REFERENCES public.acorn_messaging_message(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_message_user_group acorn_messaging_message_user_group_message_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_user_group
    ADD CONSTRAINT acorn_messaging_message_user_group_message_id_foreign FOREIGN KEY (message_id) REFERENCES public.acorn_messaging_message(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_message_user_group acorn_messaging_message_user_group_user_group_id_fore; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_user_group
    ADD CONSTRAINT acorn_messaging_message_user_group_user_group_id_fore FOREIGN KEY (user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_message_user acorn_messaging_message_user_message_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_user
    ADD CONSTRAINT acorn_messaging_message_user_message_id_foreign FOREIGN KEY (message_id) REFERENCES public.acorn_messaging_message(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_message_user acorn_messaging_message_user_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_message_user
    ADD CONSTRAINT acorn_messaging_message_user_user_id_foreign FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_user_message_status acorn_messaging_user_message_status_message_id_foreig; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_user_message_status
    ADD CONSTRAINT acorn_messaging_user_message_status_message_id_foreig FOREIGN KEY (message_id) REFERENCES public.acorn_messaging_message(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_user_message_status acorn_messaging_user_message_status_status_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_user_message_status
    ADD CONSTRAINT acorn_messaging_user_message_status_status_id_foreign FOREIGN KEY (status_id) REFERENCES public.acorn_messaging_status(id) ON DELETE CASCADE;


--
-- Name: acorn_messaging_user_message_status acorn_messaging_user_message_status_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_messaging_user_message_status
    ADD CONSTRAINT acorn_messaging_user_message_status_user_id_foreign FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_user_user_languages acorn_user_language_user_language_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_languages
    ADD CONSTRAINT acorn_user_language_user_language_id_foreign FOREIGN KEY (language_id) REFERENCES public.acorn_user_languages(id) ON DELETE CASCADE;


--
-- Name: acorn_user_user_languages acorn_user_language_user_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_languages
    ADD CONSTRAINT acorn_user_language_user_user_id_foreign FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_user_user_groups acorn_user_user_groups_parent_user_group_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_groups
    ADD CONSTRAINT acorn_user_user_groups_parent_user_group_id_foreign FOREIGN KEY (parent_user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE SET NULL;


--
-- Name: acorn_user_user_groups acorn_user_user_groups_type_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_groups
    ADD CONSTRAINT acorn_user_user_groups_type_id_foreign FOREIGN KEY (type_id) REFERENCES public.acorn_user_user_group_types(id) ON DELETE SET NULL;


--
-- Name: acorn_location_locations address_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_locations
    ADD CONSTRAINT address_id FOREIGN KEY (address_id) REFERENCES public.acorn_location_addresses(id) NOT VALID;


--
-- Name: acorn_location_user_addresses address_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_user_addresses
    ADD CONSTRAINT address_id FOREIGN KEY (address_id) REFERENCES public.acorn_location_addresses(id) NOT VALID;


--
-- Name: acorn_location_user_addresses address_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_user_addresses
    ADD CONSTRAINT address_type_id FOREIGN KEY (address_type_id) REFERENCES public.acorn_location_address_types(id) NOT VALID;


--
-- Name: acorn_location_addresses addresses_created_by_user; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_addresses
    ADD CONSTRAINT addresses_created_by_user FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_location_address_types addresses_created_by_user; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_address_types
    ADD CONSTRAINT addresses_created_by_user FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_location_addresses area_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_addresses
    ADD CONSTRAINT area_id FOREIGN KEY (area_id) REFERENCES public.acorn_location_areas(id) NOT VALID;


--
-- Name: acorn_location_areas area_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_areas
    ADD CONSTRAINT area_type_id FOREIGN KEY (area_type_id) REFERENCES public.acorn_location_area_types(id);


--
-- Name: acorn_location_area_types area_types_created_by_user; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_area_types
    ADD CONSTRAINT area_types_created_by_user FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_location_areas areas_created_by_user; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_areas
    ADD CONSTRAINT areas_created_by_user FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: backend_users backend_users_acorn_user_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.backend_users
    ADD CONSTRAINT backend_users_acorn_user_user_id_foreign FOREIGN KEY (acorn_user_user_id) REFERENCES public.acorn_user_users(id) ON DELETE SET NULL;


--
-- Name: acorn_enrollment_enrollments calculation_academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT calculation_academic_year_id FOREIGN KEY (calculation_academic_year_id) REFERENCES public.acorn_university_academic_years(id) NOT VALID;


--
-- Name: CONSTRAINT calculation_academic_year_id ON acorn_enrollment_enrollments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_academic_year_id ON public.acorn_enrollment_enrollments IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_enrollment_enrollments calculation_course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT calculation_course_id FOREIGN KEY (calculation_course_id) REFERENCES public.acorn_university_courses(id) NOT VALID;


--
-- Name: CONSTRAINT calculation_course_id ON acorn_enrollment_enrollments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_course_id ON public.acorn_enrollment_enrollments IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_enrollment_enrollments calculation_course_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT calculation_course_type_id FOREIGN KEY (calculation_course_type_id) REFERENCES public.acorn_university_course_types(id) NOT VALID;


--
-- Name: CONSTRAINT calculation_course_type_id ON acorn_enrollment_enrollments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_course_type_id ON public.acorn_enrollment_enrollments IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_enrollment_enrollments calculation_exam_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT calculation_exam_id FOREIGN KEY (calculation_exam_id) REFERENCES public.acorn_exam_exams(id) NOT VALID;


--
-- Name: CONSTRAINT calculation_exam_id ON acorn_enrollment_enrollments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_exam_id ON public.acorn_enrollment_enrollments IS 'tab-location: 2';


--
-- Name: acorn_exam_calculation_courses calculation_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_courses
    ADD CONSTRAINT calculation_id FOREIGN KEY (calculation_id) REFERENCES public.acorn_exam_calculations(id) NOT VALID;


--
-- Name: CONSTRAINT calculation_id ON acorn_exam_calculation_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_id ON public.acorn_exam_calculation_courses IS 'name-object: true';


--
-- Name: acorn_exam_calculation_course_materials calculation_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_materials
    ADD CONSTRAINT calculation_id FOREIGN KEY (calculation_id) REFERENCES public.acorn_exam_calculations(id);


--
-- Name: CONSTRAINT calculation_id ON acorn_exam_calculation_course_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_id ON public.acorn_exam_calculation_course_materials IS 'name-object: true';


--
-- Name: acorn_exam_result_internal2s calculation_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT calculation_id FOREIGN KEY (calculation_id) REFERENCES public.acorn_exam_calculations(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT calculation_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_enrollment_enrollments calculation_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT calculation_id FOREIGN KEY (calculation_id) REFERENCES public.acorn_exam_calculations(id) NOT VALID;


--
-- Name: acorn_exam_calculation_course_types calculation_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT calculation_id FOREIGN KEY (calculation_id) REFERENCES public.acorn_exam_calculations(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT calculation_id ON acorn_exam_calculation_course_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_id ON public.acorn_exam_calculation_course_types IS 'name-object: true';


--
-- Name: acorn_exam_calculation_material_types calculation_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_material_types
    ADD CONSTRAINT calculation_id FOREIGN KEY (calculation_id) REFERENCES public.acorn_exam_calculations(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT calculation_id ON acorn_exam_calculation_material_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_id ON public.acorn_exam_calculation_material_types IS 'name-object: true';


--
-- Name: acorn_exam_calculations calculation_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT calculation_type_id FOREIGN KEY (calculation_type_id) REFERENCES public.acorn_exam_calculation_types(id) NOT VALID;


--
-- Name: acorn_exam_result_internal2s calculation_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT calculation_type_id FOREIGN KEY (calculation_type_id) REFERENCES public.acorn_exam_calculation_types(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT calculation_type_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT calculation_type_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_enrollment_desires course_entry_requirements_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_desires
    ADD CONSTRAINT course_entry_requirements_id FOREIGN KEY (course_entry_requirement_id) REFERENCES public.acorn_enrollment_course_entry_requirements(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_entry_requirements_id ON acorn_enrollment_desires; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_entry_requirements_id ON public.acorn_enrollment_desires IS 'name-object: true';


--
-- Name: acorn_enrollment_courses course_hierarchy_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_courses
    ADD CONSTRAINT course_hierarchy_id FOREIGN KEY (course_hierarchy_id) REFERENCES public.acorn_university_hierarchies(id) NOT VALID;


--
-- Name: CONSTRAINT course_hierarchy_id ON acorn_enrollment_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_hierarchy_id ON public.acorn_enrollment_courses IS 'name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_university_course_language course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_language
    ADD CONSTRAINT course_id FOREIGN KEY (course_id) REFERENCES public.acorn_university_courses(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_id ON acorn_university_course_language; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_id ON public.acorn_university_course_language IS 'hints:
  no_languages:
    contentHtml: true
    labels:
      en: Language restrictions
    content:
      en: No languages means that <i>all</i> languages are accepted. Adding a language will restrict it to that language only.
    level: info';


--
-- Name: acorn_exam_calculation_courses course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_courses
    ADD CONSTRAINT course_id FOREIGN KEY (course_id) REFERENCES public.acorn_university_courses(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_id ON acorn_exam_calculation_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_id ON public.acorn_exam_calculation_courses IS 'name-object: true
tab-location: 2
labels:
  en: Calculation
labels-plural:
  en: Calculations';


--
-- Name: acorn_exam_result_internal2s course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT course_id FOREIGN KEY (course_id) REFERENCES public.acorn_university_courses(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_university_course_plans course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_plans
    ADD CONSTRAINT course_id FOREIGN KEY (course_id) REFERENCES public.acorn_university_courses(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_id ON acorn_university_course_plans; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_id ON public.acorn_university_course_plans IS 'name-object: true
show-search: false
tab-location: 1
labels:
  en: Course Plan
labels-plural:
  en: Course Plans';


--
-- Name: acorn_university_course_year_semesters course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT course_id FOREIGN KEY (course_id) REFERENCES public.acorn_university_courses(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT course_id ON acorn_university_course_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_id ON public.acorn_university_course_year_semesters IS 'name-object: true
field-exclude: true
column-exclude: true
can-filter: true';


--
-- Name: acorn_university_course_specializations course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_specializations
    ADD CONSTRAINT course_id FOREIGN KEY (course_id) REFERENCES public.acorn_university_courses(id) ON DELETE CASCADE;


--
-- Name: acorn_exam_interview_students course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) NOT VALID;


--
-- Name: CONSTRAINT course_material_id ON acorn_exam_interview_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_material_id ON public.acorn_exam_interview_students IS 'show-search: false';


--
-- Name: acorn_university_project_students course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) NOT VALID;


--
-- Name: CONSTRAINT course_material_id ON acorn_university_project_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_material_id ON public.acorn_university_project_students IS 'show-search: false';


--
-- Name: acorn_exam_calculation_course_materials course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_materials
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT course_material_id ON acorn_exam_calculation_course_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_material_id ON public.acorn_exam_calculation_course_materials IS 'name-object: true
labels:
  en: Calculation
  ku: Algorithm
labels-plural:
  en: Calculations
  ku: Algorithmên
advanced: true';


--
-- Name: acorn_exam_exam_materials course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_exam_result_internal2s course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_material_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_material_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_university_student_course_material_removal course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_removal
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT course_material_id ON acorn_university_student_course_material_removal; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_material_id ON public.acorn_university_student_course_material_removal IS 'labels:
  en: Removal
labels-plural:
  en: Removals';


--
-- Name: acorn_university_student_course_material_addition course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_addition
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT course_material_id ON acorn_university_student_course_material_addition; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_material_id ON public.acorn_university_student_course_material_addition IS 'labels:
  en: Addition
labels-plural:
  en: Additions';


--
-- Name: acorn_university_lectures course_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_lectures
    ADD CONSTRAINT course_material_id FOREIGN KEY (course_material_id) REFERENCES public.acorn_university_course_materials(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT course_material_id ON acorn_university_lectures; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_material_id ON public.acorn_university_lectures IS 'nameObject: true';


--
-- Name: acorn_university_course_year_semesters course_plan_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT course_plan_id FOREIGN KEY (course_plan_id) REFERENCES public.acorn_university_course_plans(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_plan_id ON acorn_university_course_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_plan_id ON public.acorn_university_course_year_semesters IS 'labels:
  en: Course Year Semester
labels-plural:
  en: Course Year Semesters
tab: none
css-classes:
  - planner
default-sort: 
  column: academic_year_semester_ordinal
  direction: asc
contexts: update
record-url: acorn/university/courseyearsemesters/update/:id?back-to-referrer=Course Planner
recordsPerPage: 20';


--
-- Name: acorn_university_course_year_semesters course_specialization_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT course_specialization_id FOREIGN KEY (course_specialization_id) REFERENCES public.acorn_university_course_specializations(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_university_courses course_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_courses
    ADD CONSTRAINT course_type_id FOREIGN KEY (course_type_id) REFERENCES public.acorn_university_course_types(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_exam_calculation_course_types course_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT course_type_id FOREIGN KEY (course_type_id) REFERENCES public.acorn_university_course_types(id);


--
-- Name: CONSTRAINT course_type_id ON acorn_exam_calculation_course_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_type_id ON public.acorn_exam_calculation_course_types IS 'name-object: true';


--
-- Name: acorn_university_course_year_semesters course_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT course_year_id FOREIGN KEY (course_year_id) REFERENCES public.acorn_university_course_years(id);


--
-- Name: CONSTRAINT course_year_id ON acorn_university_course_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_year_id ON public.acorn_university_course_year_semesters IS 'name-object: true
can-filter: true';


--
-- Name: acorn_university_course_materials course_year_semester_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT course_year_semester_id FOREIGN KEY (course_year_semester_id) REFERENCES public.acorn_university_course_year_semesters(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT course_year_semester_id ON acorn_university_course_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT course_year_semester_id ON public.acorn_university_course_materials IS 'can-filter: true
multi:
  limit: 20
  html: true
valueFrom: htmlName
tab: none

';


--
-- Name: acorn_university_academic_years created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_years
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_hierarchies created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_material_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_materials created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_materials
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_exams created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exams
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_exam_materials created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculations created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_scores created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_scores
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_course_materials created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_project_students created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_interviews created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interviews
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_interview_students created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_entities created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_academic_year_semesters created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_year_semesters
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_course_years created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_years
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_semesters created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semesters
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_projects created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_projects
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_calculation_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_lectures created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_lectures
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculation_course_materials created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_materials
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculation_material_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_material_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculation_courses created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_courses
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_student_statuses created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_statuses
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_course_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_calculation_course_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_student_codes created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_codes
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_exam_score_names created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_score_names
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_student_notes created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_notes
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_student_identities created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_identity_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_identity_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_enrollment_course_entry_requirements created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_enrollment_desires created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_desires
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_instances created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_instances
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_centres created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_centres
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_course_plans created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_plans
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_students created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_students
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_enrollment_enrollments created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_courses created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_courses
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_students created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_student_notes created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_student_notes
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_enrollment_runs created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_runs
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_university_student_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_exam_questions created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_questions
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_answers created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_answers
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_sections created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_sections
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_course_specializations created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_specializations
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_student_course_material_removal created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_removal
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_student_course_material_addition created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_addition
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_document_types created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_document_types
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_student_documents created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_documents
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_hierarchy_event created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchy_event
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_material_topics created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_topics
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_semester_groups created_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semester_groups
    ADD CONSTRAINT created_by_user_id FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_hierarchies default_calendar_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT default_calendar_id FOREIGN KEY (default_calendar_id) REFERENCES public.acorn_calendar_calendars(id) ON DELETE SET NULL NOT VALID;


--
-- Name: CONSTRAINT default_calendar_id ON acorn_university_hierarchies; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT default_calendar_id ON public.acorn_university_hierarchies IS 'labels:
  en: Default Calendar
  ku: Salnamê Xwerû
  ar: التقويم الافتراضي
labels-plural:
  en: Default Calendars
  ku: Salnamên Xwerû
  ar: التقويمات الافتراضية
';


--
-- Name: acorn_university_hierarchies default_semester_group_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT default_semester_group_id FOREIGN KEY (default_semester_group_id) REFERENCES public.acorn_university_semester_groups(id) ON DELETE SET NULL NOT VALID;


--
-- Name: CONSTRAINT default_semester_group_id ON acorn_university_hierarchies; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT default_semester_group_id ON public.acorn_university_hierarchies IS 'labels:
  en: Default Semester Group
  ku: Koma Qunaxê ya Xwerû
  ar: المجموعة الفصلية الافتراضية
labels-plural:
  en: Default Semester Groups
  ku: Koman Qunaxê ya Xwerû
  ar: مجموعات الفصل الدراسي الافتراضية
';


--
-- Name: acorn_university_student_documents document_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_documents
    ADD CONSTRAINT document_type_id FOREIGN KEY (document_type_id) REFERENCES public.acorn_university_document_types(id);


--
-- Name: acorn_university_course_year_semesters enrollment_academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT enrollment_academic_year_id FOREIGN KEY (enrollment_academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_course_entry_requirements enrollment_course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT enrollment_course_id FOREIGN KEY (enrollment_course_id) REFERENCES public.acorn_enrollment_courses(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT enrollment_course_id ON acorn_enrollment_course_entry_requirements; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT enrollment_course_id ON public.acorn_enrollment_course_entry_requirements IS 'name-object: true';


--
-- Name: acorn_enrollment_students enrollment_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT enrollment_id FOREIGN KEY (enrollment_id) REFERENCES public.acorn_enrollment_enrollments(id);


--
-- Name: CONSTRAINT enrollment_id ON acorn_enrollment_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT enrollment_id ON public.acorn_enrollment_students IS 'labels:
  en: Student & Desires
labels-plural:
  en: Students & Desires';


--
-- Name: acorn_enrollment_courses enrollment_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_courses
    ADD CONSTRAINT enrollment_id FOREIGN KEY (enrollment_id) REFERENCES public.acorn_enrollment_enrollments(id);


--
-- Name: CONSTRAINT enrollment_id ON acorn_enrollment_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT enrollment_id ON public.acorn_enrollment_courses IS 'labels:
  en: Courses & Requirements
labels-plural:
  en: Courses & Requirements';


--
-- Name: acorn_enrollment_runs enrollment_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_runs
    ADD CONSTRAINT enrollment_id FOREIGN KEY (enrollment_id) REFERENCES public.acorn_enrollment_enrollments(id);


--
-- Name: acorn_enrollment_desires enrollment_student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_desires
    ADD CONSTRAINT enrollment_student_id FOREIGN KEY (enrollment_student_id) REFERENCES public.acorn_enrollment_students(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_student_notes enrollment_student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_student_notes
    ADD CONSTRAINT enrollment_student_id FOREIGN KEY (enrollment_student_id) REFERENCES public.acorn_enrollment_students(id);


--
-- Name: CONSTRAINT enrollment_student_id ON acorn_enrollment_student_notes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT enrollment_student_id ON public.acorn_enrollment_student_notes IS 'name-object: true
labels:
  en: Note
labels-plural:
  en: Notes
tab-location: 2';


--
-- Name: acorn_university_education_authorities entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_education_authorities
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT entity_id ON acorn_university_education_authorities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_education_authorities IS 'type: leaf
global-scope: to
has-many-deep-settings:
    # entity_university_hierarchies__entity:
    entity_university_student_notes__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_codes__entity:
        field-exclude: true
        column-exclude: true
    entity_user_users__global_scope_entity:
        field-exclude: true
        column-exclude: true
    entity_exam_calculations__owner_entity:
        field-exclude: true
        column-exclude: true
    entity_user_group:
        field-exclude: true
        column-exclude: true
    entity_user_group_children:
        field-exclude: true
        column-exclude: true
    entity_user_group_versions:
        field-exclude: true
        column-exclude: true
    entity_user_group_users:
        field-exclude: true
        column-exclude: true
    entity_user_group_users_count:
        field-exclude: true
        column-exclude: true
    entity_user_group_locations:
        field-exclude: true
        column-exclude: true
    entity_user_group_eventParts:
        field-exclude: true
        column-exclude: true';


--
-- Name: acorn_university_departments entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_departments
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT entity_id ON acorn_university_departments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_departments IS 'type: leaf
global-scope: to
has-many-deep-settings:
    # entity_university_hierarchies__entity:
    entity_university_student_notes__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_codes__entity:
        field-exclude: true
        column-exclude: true
    entity_user_users__global_scope_entity:
        field-exclude: true
        column-exclude: true
    entity_exam_calculations__owner_entity:
        field-exclude: true
        column-exclude: true
    entity_user_group:
        field-exclude: true
        column-exclude: true
    entity_user_group_children:
        field-exclude: true
        column-exclude: true
    entity_user_group_versions:
        field-exclude: true
        column-exclude: true
    entity_user_group_users:
        field-exclude: true
        column-exclude: true
    entity_user_group_users_count:
        field-exclude: true
        column-exclude: true
    entity_user_group_locations:
        field-exclude: true
        column-exclude: true
    entity_user_group_eventParts:
        field-exclude: true
        column-exclude: true';


--
-- Name: acorn_university_faculties entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_faculties
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT entity_id ON acorn_university_faculties; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_faculties IS 'type: leaf
global-scope: to
has-many-deep-settings:
    # entity_university_hierarchies__entity:
    entity_university_student_notes__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_codes__entity:
        field-exclude: true
        column-exclude: true
    entity_user_users__global_scope_entity:
        field-exclude: true
        column-exclude: true
    entity_exam_calculations__owner_entity:
        field-exclude: true
        column-exclude: true
    entity_user_group:
        field-exclude: true
        column-exclude: true
    entity_user_group_children:
        field-exclude: true
        column-exclude: true
    entity_user_group_versions:
        field-exclude: true
        column-exclude: true
    entity_user_group_users:
        field-exclude: true
        column-exclude: true
    entity_user_group_users_count:
        field-exclude: true
        column-exclude: true
    entity_user_group_locations:
        field-exclude: true
        column-exclude: true
    entity_user_group_eventParts:
        field-exclude: true
        column-exclude: true';


--
-- Name: acorn_university_schools entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_schools
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT entity_id ON acorn_university_schools; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_schools IS 'type: leaf
global-scope: to
has-many-deep-settings:
    # entity_university_hierarchies__entity:
    entity_university_student_notes__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_codes__entity:
        field-exclude: true
        column-exclude: true
    entity_user_users__global_scope_entity:
        field-exclude: true
        column-exclude: true
    entity_exam_calculations__owner_entity:
        field-exclude: true
        column-exclude: true
    entity_user_group:
        field-exclude: true
        column-exclude: true
    entity_user_group_children:
        field-exclude: true
        column-exclude: true
    entity_user_group_versions:
        field-exclude: true
        column-exclude: true
    entity_user_group_users:
        field-exclude: true
        column-exclude: true
    entity_user_group_users_count:
        field-exclude: true
        column-exclude: true
    entity_user_group_locations:
        field-exclude: true
        column-exclude: true
    entity_user_group_eventParts:
        field-exclude: true
        column-exclude: true';


--
-- Name: acorn_university_universities entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_universities
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT entity_id ON acorn_university_universities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_universities IS 'type: leaf
global-scope: to
has-many-deep-settings:
    # entity_university_hierarchies__entity:
    entity_university_student_notes__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_codes__entity:
        field-exclude: true
        column-exclude: true
    entity_user_users__global_scope_entity:
        field-exclude: true
        column-exclude: true
    entity_exam_calculations__owner_entity:
        field-exclude: true
        column-exclude: true
    entity_user_group:
        field-exclude: true
        column-exclude: true
    entity_user_group_children:
        field-exclude: true
        column-exclude: true
    entity_user_group_versions:
        field-exclude: true
        column-exclude: true
    entity_user_group_users:
        field-exclude: true
        column-exclude: true
    entity_user_group_users_count:
        field-exclude: true
        column-exclude: true
    entity_user_group_locations:
        field-exclude: true
        column-exclude: true
    entity_user_group_eventParts:
        field-exclude: true
        column-exclude: true';


--
-- Name: acorn_university_hierarchies entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT entity_id ON acorn_university_hierarchies; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_hierarchies IS 'has-many-deep-include: true
global-scope: to
tab-location: 1
show-search: false
name-object: true
flags:
  - hierarchy
multi:
  valueFrom: htmlName
  html: true
labels:
  en: Relationship
  ku: Teklî
labels-plural:
  en: Relationships
  ku: Teklîyên
has-many-deep-settings:
  entity_university_hierarchies__entity:
    field-exclude: true
    column-exclude: true
  entity_university_hierarchies__entity_user_group_version_users:
    field-exclude: true
    column-exclude: true
  entity_university_hierarchies__entity_user_group_version_users_count:
    field-exclude: true
    column-exclude: true
fields-settings:
  entity_user_users__global_scope_entity:
    labels: 
      en: Global Scope Members
      ku: Endamên Qada Gerdûnî
      ar: أعضاء النطاق العالمي
    advanced: true
  entity_university_hierarchies__entity:
    hidden: true
    invisible: true
  entity_university_hierarchies__entity_user_group_version_users:
    hidden: true
  entity_university_hierarchies__entity_user_group_version_users_count:
    invisible: true
  name:
    invisible: true
  code:
    invisible: true';


--
-- Name: acorn_university_student_codes entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_codes
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT entity_id ON acorn_university_student_codes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_student_codes IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_university_course_year_semesters entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_year_semesters
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id);


--
-- Name: CONSTRAINT entity_id ON acorn_university_course_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_course_year_semesters IS 'type: leaf 
global-scope: to
has-many-deep-settings:
    entity_university_hierarchies__entity_user_group_version_users:
      field-exclude: true
    entity_university_hierarchies__entity_user_group_version_users_count:
        labels: 
          en: Student count
        labels-plural:
          en: Student Counts
        # column-type partial and multi is the default
        multi:
            sum: count
        value-from: count
        field-exclude: true
    entity_university_hierarchies__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_notes__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_codes__entity:
        field-exclude: true
        column-exclude: true
    entity_user_users__global_scope_entity:
        field-exclude: true
        column-exclude: true
    entity_exam_calculations__owner_entity:
        field-exclude: true
        column-exclude: true
    entity_user_group:
        field-exclude: true
        column-exclude: true
    entity_user_group_children:
        field-exclude: true
        column-exclude: true
    entity_user_group_versions:
        field-exclude: true
        column-exclude: true
    entity_user_group_users:
        field-exclude: true
        column-exclude: true
    entity_user_group_users_count:
        field-exclude: true
        column-exclude: true
    entity_user_group_locations:
        field-exclude: true
        column-exclude: true
    entity_user_group_eventParts:
        field-exclude: true
        column-exclude: true
fields-settings:
  entity[calendar]:
    field-exclude: true
    column-exclude: true
  entity[location]:
    field-exclude: true
    column-exclude: true
  entity[user_group][code]:
    field-exclude: true
    column-exclude: true
  entity[user_group][name]:
    hidden: true
    invisible: true
  entity[user_group][colour]:
    field-exclude: true
    column-exclude: true
  entity[user_group][image]:
    field-exclude: true
    column-exclude: true
  entity[user_group][description]:
    field-exclude: true
    column-exclude: true
  name:
    hidden: true
    invisible: true
  code:
    hidden: true
    invisible: true
  entity_university_student_notes__owner_entity:
    hidden: true
    invisible: true
  entity_university_student_types__owner_entity:
    hidden: true
    invisible: true
';


--
-- Name: acorn_university_courses entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_courses
    ADD CONSTRAINT entity_id FOREIGN KEY (entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT entity_id ON acorn_university_courses; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT entity_id ON public.acorn_university_courses IS 'type: leaf 
global-scope: to
has-many-deep-settings:
    # entity_university_hierarchies__entity:
    entity_university_student_notes__entity:
        field-exclude: true
        column-exclude: true
    entity_university_student_codes__entity:
        field-exclude: true
        column-exclude: true
    entity_user_users__global_scope_entity:
        field-exclude: true
        column-exclude: true
    entity_exam_calculations__owner_entity:
        field-exclude: true
        column-exclude: true
    entity_user_group:
        field-exclude: true
        column-exclude: true
    entity_user_group_children:
        field-exclude: true
        column-exclude: true
    entity_user_group_versions:
        field-exclude: true
        column-exclude: true
    entity_user_group_users:
        field-exclude: true
        column-exclude: true
    entity_user_group_users_count:
        field-exclude: true
        column-exclude: true
    entity_user_group_locations:
        field-exclude: true
        column-exclude: true
    entity_user_group_eventParts:
        field-exclude: true
        column-exclude: true';


--
-- Name: acorn_user_users ethnicity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT ethnicity_id FOREIGN KEY (ethnicity_id) REFERENCES public.acorn_user_ethnicities(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_exam_interview_students event_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT event_id FOREIGN KEY (event_id) REFERENCES public.acorn_calendar_events(id) NOT VALID;


--
-- Name: acorn_university_academic_year_semesters event_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_year_semesters
    ADD CONSTRAINT event_id FOREIGN KEY (event_id) REFERENCES public.acorn_calendar_events(id) NOT VALID;


--
-- Name: acorn_university_lectures event_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_lectures
    ADD CONSTRAINT event_id FOREIGN KEY (event_id) REFERENCES public.acorn_calendar_events(id);


--
-- Name: CONSTRAINT event_id ON acorn_university_lectures; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT event_id ON public.acorn_university_lectures IS 'type: 1to1
has-many-deep-settings:
  event_event_parts:
    field-exclude: true
    explicit-label-key: acorn.calendar::lang.models.event.label_plural
fields-settings:
  event[create_event_part][user_group_version]:
    readOnly: true
    fieldComment: Locked by Course Year Semester group
  event[first_event_part][user_group_version]:
    readOnly: true
    fieldComment: Locked by Course Year Semester group
';


--
-- Name: acorn_university_academic_years event_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_years
    ADD CONSTRAINT event_id FOREIGN KEY (event_id) REFERENCES public.acorn_calendar_events(id) NOT VALID;


--
-- Name: acorn_university_hierarchy_event event_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchy_event
    ADD CONSTRAINT event_id FOREIGN KEY (event_id) REFERENCES public.acorn_calendar_events(id);


--
-- Name: acorn_exam_instances exam_centre_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_instances
    ADD CONSTRAINT exam_centre_id FOREIGN KEY (exam_centre_id) REFERENCES public.acorn_exam_centres(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_exam_exam_materials exam_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT exam_id FOREIGN KEY (exam_id) REFERENCES public.acorn_exam_exams(id) NOT VALID;


--
-- Name: acorn_exam_result_internal2s exam_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT exam_id FOREIGN KEY (exam_id) REFERENCES public.acorn_exam_exams(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT exam_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT exam_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_exam_instances exam_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_instances
    ADD CONSTRAINT exam_id FOREIGN KEY (exam_id) REFERENCES public.acorn_exam_exams(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_exam_sections exam_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_sections
    ADD CONSTRAINT exam_id FOREIGN KEY (exam_id) REFERENCES public.acorn_exam_exams(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT exam_id ON acorn_exam_sections; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT exam_id ON public.acorn_exam_sections IS 'labels:
  en: Q & A
labels-plural:
  en: Q & As';


--
-- Name: acorn_exam_scores exam_material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_scores
    ADD CONSTRAINT exam_material_id FOREIGN KEY (exam_material_id) REFERENCES public.acorn_exam_exam_materials(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT exam_material_id ON acorn_exam_scores; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT exam_material_id ON public.acorn_exam_scores IS 'type: Xto1
name-object: true';


--
-- Name: acorn_user_users global_scope_academic_year_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT global_scope_academic_year_id FOREIGN KEY (global_scope_academic_year_id) REFERENCES public.acorn_university_academic_years(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_user_users global_scope_entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT global_scope_entity_id FOREIGN KEY (global_scope_entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_location_gps gps_created_by_user; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_gps
    ADD CONSTRAINT gps_created_by_user FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_location_areas gps_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_areas
    ADD CONSTRAINT gps_id FOREIGN KEY (gps_id) REFERENCES public.acorn_location_gps(id);


--
-- Name: acorn_location_addresses gps_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_addresses
    ADD CONSTRAINT gps_id FOREIGN KEY (gps_id) REFERENCES public.acorn_location_gps(id) NOT VALID;


--
-- Name: acorn_university_hierarchy_event hierarchy_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchy_event
    ADD CONSTRAINT hierarchy_id FOREIGN KEY (hierarchy_id) REFERENCES public.acorn_university_hierarchies(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT hierarchy_id ON acorn_university_hierarchy_event; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT hierarchy_id ON public.acorn_university_hierarchy_event IS 'invisible: true';


--
-- Name: acorn_university_student_identities identity_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT identity_type_id FOREIGN KEY (identity_type_id) REFERENCES public.acorn_university_identity_types(id) NOT VALID;


--
-- Name: acorn_exam_interview_students interview_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT interview_id FOREIGN KEY (interview_id) REFERENCES public.acorn_exam_interviews(id) NOT VALID;


--
-- Name: acorn_exam_exam_materials interview_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT interview_id FOREIGN KEY (interview_id) REFERENCES public.acorn_exam_interviews(id) NOT VALID;


--
-- Name: acorn_exam_result_internal2s interview_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT interview_id FOREIGN KEY (interview_id) REFERENCES public.acorn_exam_interviews(id) NOT VALID;


--
-- Name: CONSTRAINT interview_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT interview_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_university_course_language language_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_language
    ADD CONSTRAINT language_id FOREIGN KEY (language_id) REFERENCES public.acorn_user_languages(id) NOT VALID;


--
-- Name: acorn_servers location_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_servers
    ADD CONSTRAINT location_id FOREIGN KEY (location_id) REFERENCES public.acorn_location_locations(id) ON DELETE SET NULL;


--
-- Name: acorn_location_user_group_location location_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_user_group_location
    ADD CONSTRAINT location_id FOREIGN KEY (location_id) REFERENCES public.acorn_location_locations(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_exam_centres location_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_centres
    ADD CONSTRAINT location_id FOREIGN KEY (location_id) REFERENCES public.acorn_location_locations(id) ON DELETE CASCADE;


--
-- Name: acorn_university_entities location_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT location_id FOREIGN KEY (location_id) REFERENCES public.acorn_location_locations(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_location_locations locations_created_by_user; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_locations
    ADD CONSTRAINT locations_created_by_user FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_course_materials material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT material_id FOREIGN KEY (material_id) REFERENCES public.acorn_university_materials(id);


--
-- Name: CONSTRAINT material_id ON acorn_university_course_materials; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT material_id ON public.acorn_university_course_materials IS 'name-object: true';


--
-- Name: acorn_exam_result_internal2s material_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT material_id FOREIGN KEY (material_id) REFERENCES public.acorn_university_materials(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT material_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT material_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_university_course_materials material_topic_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT material_topic_id FOREIGN KEY (material_topic_id) REFERENCES public.acorn_university_material_topics(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_exam_calculation_material_types material_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_material_types
    ADD CONSTRAINT material_type_id FOREIGN KEY (material_type_id) REFERENCES public.acorn_university_material_types(id);


--
-- Name: CONSTRAINT material_type_id ON acorn_exam_calculation_material_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT material_type_id ON public.acorn_exam_calculation_material_types IS 'name-object: true';


--
-- Name: acorn_university_student_notes owner_entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_notes
    ADD CONSTRAINT owner_entity_id FOREIGN KEY (owner_entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT owner_entity_id ON acorn_university_student_notes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT owner_entity_id ON public.acorn_university_student_notes IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_exam_calculations owner_entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT owner_entity_id FOREIGN KEY (owner_entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE SET NULL NOT VALID;


--
-- Name: CONSTRAINT owner_entity_id ON acorn_exam_calculations; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT owner_entity_id ON public.acorn_exam_calculations IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_enrollment_enrollments owner_entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT owner_entity_id FOREIGN KEY (owner_entity_id) REFERENCES public.acorn_university_entities(id) NOT VALID;


--
-- Name: CONSTRAINT owner_entity_id ON acorn_enrollment_enrollments; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT owner_entity_id ON public.acorn_enrollment_enrollments IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_university_student_types owner_entity_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_types
    ADD CONSTRAINT owner_entity_id FOREIGN KEY (owner_entity_id) REFERENCES public.acorn_university_entities(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT owner_entity_id ON acorn_university_student_types; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT owner_entity_id ON public.acorn_university_student_types IS 'field-exclude: true
column-exclude: true';


--
-- Name: acorn_university_project_students owner_student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT owner_student_id FOREIGN KEY (owner_student_id) REFERENCES public.acorn_university_students(id) NOT VALID;


--
-- Name: CONSTRAINT owner_student_id ON acorn_university_project_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT owner_student_id ON public.acorn_university_project_students IS 'tab-location: 2
invisible: true
labels:
  en: Owned Project
  ku: Projê xwede
  ar: المشاريع الخاصة
labels-plural:
  en: Owned Projects
  ku: Projên xwede
  ar: المشاريع الخاصة';


--
-- Name: acorn_location_areas parent_area_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_areas
    ADD CONSTRAINT parent_area_id FOREIGN KEY (parent_id) REFERENCES public.acorn_location_areas(id) NOT VALID;


--
-- Name: acorn_university_hierarchies parent_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT parent_id FOREIGN KEY (parent_id) REFERENCES public.acorn_university_hierarchies(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT parent_id ON acorn_university_hierarchies; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT parent_id ON public.acorn_university_hierarchies IS 'name-object: true
column-exclude: true
multi:
  valueFrom: htmlName
  html: true
labels:
  en: Child relation
  ku: Zarok Têkliy 
  ar: أطفال
labels-plural:
  en: Child relations
  ku: Zarok Têkliyên
  ar: أطفال
tab-location: 3
read-only: true
show-search: false
fields-settings:
  university_hierarchies__parent:
    # Children
    hidden: true
';


--
-- Name: acorn_exam_calculations parent_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT parent_id FOREIGN KEY (parent_id) REFERENCES public.acorn_exam_calculations(id) NOT VALID;


--
-- Name: acorn_location_types parent_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_types
    ADD CONSTRAINT parent_type_id FOREIGN KEY (parent_type_id) REFERENCES public.acorn_location_types(id);


--
-- Name: acorn_university_project_students project_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT project_id FOREIGN KEY (project_id) REFERENCES public.acorn_university_projects(id) NOT VALID;


--
-- Name: acorn_exam_exam_materials project_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT project_id FOREIGN KEY (project_id) REFERENCES public.acorn_university_projects(id) NOT VALID;


--
-- Name: acorn_exam_result_internal2s project_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT project_id FOREIGN KEY (project_id) REFERENCES public.acorn_university_projects(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT project_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT project_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_enrollment_students proposal_run_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT proposal_run_id FOREIGN KEY (proposal_run_id) REFERENCES public.acorn_enrollment_runs(id) NOT VALID;


--
-- Name: acorn_enrollment_students proposed_desire_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT proposed_desire_id FOREIGN KEY (proposed_desire_id) REFERENCES public.acorn_enrollment_desires(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT proposed_desire_id ON acorn_enrollment_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT proposed_desire_id ON public.acorn_enrollment_students IS 'can-filter: true
';


--
-- Name: acorn_exam_answers question_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_answers
    ADD CONSTRAINT question_id FOREIGN KEY (question_id) REFERENCES public.acorn_exam_questions(id) ON DELETE CASCADE;


--
-- Name: acorn_enrollment_course_entry_requirements related_course_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT related_course_id FOREIGN KEY (related_course_id) REFERENCES public.acorn_university_courses(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT related_course_id ON acorn_enrollment_course_entry_requirements; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT related_course_id ON public.acorn_enrollment_course_entry_requirements IS 'name-object: true
field-exclude: true
column-exclude: true';


--
-- Name: acorn_user_users religion_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_users
    ADD CONSTRAINT religion_id FOREIGN KEY (religion_id) REFERENCES public.acorn_user_religions(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_enrollment_course_entry_requirements required_exam_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT required_exam_id FOREIGN KEY (required_exam_id) REFERENCES public.acorn_exam_exams(id) ON DELETE SET NULL NOT VALID;


--
-- Name: CONSTRAINT required_exam_id ON acorn_enrollment_course_entry_requirements; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT required_exam_id ON public.acorn_enrollment_course_entry_requirements IS 'tab-location: 2';


--
-- Name: acorn_enrollment_course_entry_requirements required_interview_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT required_interview_id FOREIGN KEY (required_interview_id) REFERENCES public.acorn_exam_interviews(id) ON DELETE SET NULL NOT VALID;


--
-- Name: acorn_user_role_user role_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_role_user
    ADD CONSTRAINT role_id FOREIGN KEY (role_id) REFERENCES public.acorn_user_roles(id);


--
-- Name: acorn_exam_questions section_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_questions
    ADD CONSTRAINT section_id FOREIGN KEY (section_id) REFERENCES public.acorn_exam_sections(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_university_semesters semester_group_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semesters
    ADD CONSTRAINT semester_group_id FOREIGN KEY (semester_group_id) REFERENCES public.acorn_university_semester_groups(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_university_academic_year_semesters semester_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_year_semesters
    ADD CONSTRAINT semester_id FOREIGN KEY (semester_id) REFERENCES public.acorn_university_semesters(id) NOT VALID;


--
-- Name: CONSTRAINT semester_id ON acorn_university_academic_year_semesters; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT semester_id ON public.acorn_university_academic_year_semesters IS 'name-object: true';


--
-- Name: acorn_location_locations server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_locations
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_location_gps server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_gps
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_location_addresses server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_addresses
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_location_area_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_area_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_location_areas server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_areas
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_location_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_hierarchies server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_academic_years server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_years
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_material_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_materials server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_materials
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_exams server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exams
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_exam_materials server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_calculations server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_scores server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_scores
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_course_materials server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_project_students server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_interviews server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interviews
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_interview_students server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_entities server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_academic_year_semesters server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_year_semesters
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_course_years server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_years
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_semesters server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semesters
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_projects server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_projects
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_exam_calculation_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_lectures server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_lectures
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_calculation_course_materials server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_materials
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_calculation_material_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_material_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_calculation_courses server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_courses
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_student_statuses server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_statuses
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_student_codes server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_codes
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_course_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_exam_calculation_course_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_exam_score_names server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_score_names
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_student_notes server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_notes
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_student_identities server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_identity_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_identity_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_enrollment_course_entry_requirements server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_enrollment_desires server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_desires
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_instances server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_instances
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_exam_centres server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_centres
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_university_course_plans server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_plans
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) NOT VALID;


--
-- Name: acorn_location_address_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_address_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_enrollment_enrollments server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_courses server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_courses
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_students server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_student_notes server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_student_notes
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) ON DELETE CASCADE;


--
-- Name: acorn_enrollment_runs server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_runs
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id) ON DELETE CASCADE;


--
-- Name: acorn_university_student_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_exam_questions server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_questions
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_exam_answers server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_answers
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_exam_sections server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_sections
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_course_specializations server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_specializations
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_student_course_material_removal server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_removal
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_student_course_material_addition server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_addition
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_document_types server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_document_types
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_student_documents server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_documents
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_hierarchy_event server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchy_event
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_material_topics server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_topics
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_university_semester_groups server_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semester_groups
    ADD CONSTRAINT server_id FOREIGN KEY (server_id) REFERENCES public.acorn_servers(id);


--
-- Name: acorn_exam_interview_students student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) NOT VALID;


--
-- Name: CONSTRAINT student_id ON acorn_exam_interview_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_exam_interview_students IS 'tab-location: 2
invisible: true
labels:
  en: Interview
  ku: Bihevditîn
  ar: المقابلات
labels-plural:
  en: Interviews
  ku: Bihevditînên
  ar: المقابلات';


--
-- Name: acorn_university_student_status student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_status
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT student_id ON acorn_university_student_status; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_university_student_status IS 'labels:
  en: Status
  ku: Rewş
  ar: الحالات الخاصة
labels-plural:
  en: Statuses
  ku: Rewşên
  ar: الحالات الخاصة
tab: acorn.user::lang.models.user.statuses
rl-buttons:
  link: true
  unlink: true
order: 20
tab-location: 3
show-search: false';


--
-- Name: acorn_exam_scores student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_scores
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT student_id ON acorn_exam_scores; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_exam_scores IS 'field-exclude: true
column-exclude: true
';


--
-- Name: acorn_university_student_codes student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_codes
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT student_id ON acorn_university_student_codes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_university_student_codes IS 'labels:
  en: Code
  ku: Kod
  ar: رقم الاكتتاب
labels-plural:
  en: Codes
  ku: Kodên
  ar: رقم الاكتتاب
tab-location: 3
show-search: false';


--
-- Name: acorn_exam_result_internal2s student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_result_internal2s
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT student_id ON acorn_exam_result_internal2s; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_exam_result_internal2s IS 'tab-location: 2
field-exclude: true
invisible: true';


--
-- Name: acorn_university_student_notes student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_notes
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT student_id ON acorn_university_student_notes; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_university_student_notes IS 'invisible: true
labels:
  en: Notes
  ku: Notên
  ar: ملحوظة
labels-plural:
  en: Notes
  ku: Notên
  ar: ملحوظة
order: 1000
tab-location: 3
show-search: false';


--
-- Name: acorn_university_student_identities student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT student_id ON acorn_university_student_identities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_university_student_identities IS 'tab: acorn.user::lang.models.user.identity
span: right
order: 10
';


--
-- Name: acorn_enrollment_students student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id);


--
-- Name: CONSTRAINT student_id ON acorn_enrollment_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_enrollment_students IS 'name-object: true
labels:
  en: Enrollment desires & notes
labels-plural:
  en: Enrollments desires & notes
tab-location: 2';


--
-- Name: acorn_university_student_type student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_type
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT student_id ON acorn_university_student_type; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_university_student_type IS 'tab-location: 3
show-search: false
can-filter: true';


--
-- Name: acorn_university_student_course_material_removal student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_removal
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE;


--
-- Name: acorn_university_student_course_material_addition student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_addition
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE;


--
-- Name: acorn_university_student_documents student_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_documents
    ADD CONSTRAINT student_id FOREIGN KEY (student_id) REFERENCES public.acorn_university_students(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT student_id ON acorn_university_student_documents; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT student_id ON public.acorn_university_student_documents IS 'tab-location: 2';


--
-- Name: acorn_university_student_status student_status_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_status
    ADD CONSTRAINT student_status_id FOREIGN KEY (student_status_id) REFERENCES public.acorn_university_student_statuses(id);


--
-- Name: acorn_university_student_type student_type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_type
    ADD CONSTRAINT student_type_id FOREIGN KEY (student_type_id) REFERENCES public.acorn_university_student_types(id);


--
-- Name: acorn_exam_interview_students teacher_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT teacher_id FOREIGN KEY (teacher_id) REFERENCES public.acorn_university_teachers(id) NOT VALID;


--
-- Name: acorn_location_locations type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_locations
    ADD CONSTRAINT type_id FOREIGN KEY (type_id) REFERENCES public.acorn_location_types(id) NOT VALID;


--
-- Name: acorn_exam_exams type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exams
    ADD CONSTRAINT type_id FOREIGN KEY (type_id) REFERENCES public.acorn_exam_types(id) NOT VALID;


--
-- Name: acorn_university_materials type_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_materials
    ADD CONSTRAINT type_id FOREIGN KEY (material_type_id) REFERENCES public.acorn_university_material_types(id) NOT VALID;


--
-- Name: acorn_location_types types_created_by_user; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_types
    ADD CONSTRAINT types_created_by_user FOREIGN KEY (created_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_academic_years updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_years
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_hierarchies updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_material_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_materials updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_materials
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_exams updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exams
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_exam_materials updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_exam_materials
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculations updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculations
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_scores updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_scores
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_course_materials updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_materials
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_project_students updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_interviews updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interviews
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_interview_students updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_interview_students
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_entities updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_academic_year_semesters updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_academic_year_semesters
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_course_years updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_years
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_semesters updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semesters
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_projects updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_projects
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_calculation_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_lectures updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_lectures
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculation_course_materials updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_materials
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculation_material_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_material_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_calculation_courses updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_courses
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_student_statuses updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_statuses
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_student_codes updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_codes
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_course_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_calculation_course_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_calculation_course_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_score_names updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_score_names
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_student_notes updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_notes
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_student_identities updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_identities
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_identity_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_identity_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_enrollment_course_entry_requirements updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_course_entry_requirements
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_enrollment_desires updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_desires
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_instances updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_instances
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_exam_centres updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_centres
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_course_plans updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_plans
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_university_students updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_students
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) NOT VALID;


--
-- Name: acorn_enrollment_enrollments updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_enrollments
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_courses updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_courses
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_students updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_students
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_enrollment_student_notes updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_student_notes
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_enrollment_runs updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_enrollment_runs
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: acorn_university_student_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_questions updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_questions
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_answers updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_answers
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_exam_sections updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_exam_sections
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_course_specializations updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_course_specializations
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_student_course_material_removal updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_removal
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_student_course_material_addition updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_course_material_addition
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_document_types updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_document_types
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_student_documents updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_student_documents
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_hierarchy_event updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchy_event
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_material_topics updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_material_topics
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_semester_groups updated_by_user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_semester_groups
    ADD CONSTRAINT updated_by_user_id FOREIGN KEY (updated_by_user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_university_project_students user_group_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_project_students
    ADD CONSTRAINT user_group_id FOREIGN KEY (user_group_id) REFERENCES public.acorn_user_user_groups(id) NOT VALID;


--
-- Name: acorn_university_entities user_group_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_entities
    ADD CONSTRAINT user_group_id FOREIGN KEY (user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT user_group_id ON acorn_university_entities; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT user_group_id ON public.acorn_university_entities IS 'name-object: true
field-exclude: true
column-exclude: true
fields-settings:
  user_group[colour]:
    tab: acorn.user::lang.group.description_field
  user_group[code]:
    tab-location: 3
  user_group[code_read_only]:
    tab-location: 3
  user_group[type]:
    field-exclude: true
    column-exclude: true
  user_group[image]:
    tab: acorn.user::lang.group.description_field
  user_group[parent_user_group]:
    field-exclude: true
    column-exclude: true';


--
-- Name: acorn_user_user_group user_group_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group
    ADD CONSTRAINT user_group_id FOREIGN KEY (user_group_id) REFERENCES public.acorn_user_user_groups(id) NOT VALID;


--
-- Name: acorn_user_user_group_versions user_group_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group_versions
    ADD CONSTRAINT user_group_id FOREIGN KEY (user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE CASCADE;


--
-- Name: acorn_location_user_group_location user_group_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_user_group_location
    ADD CONSTRAINT user_group_id FOREIGN KEY (user_group_id) REFERENCES public.acorn_user_user_groups(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_university_hierarchies user_group_version_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_hierarchies
    ADD CONSTRAINT user_group_version_id FOREIGN KEY (user_group_version_id) REFERENCES public.acorn_user_user_group_versions(id) ON DELETE CASCADE NOT VALID;


--
-- Name: CONSTRAINT user_group_version_id ON acorn_university_hierarchies; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT user_group_version_id ON public.acorn_university_hierarchies IS 'has-many-deep-settings:
  user_group_version_users:
    rl-buttons:
      - link
      - unlink
    labels:
      en: Member
      ku: Endam
      ar: عضو
    labels-plural:
      en: Members
      ku: Endamên
      ar: أعضاء
  user_group_version_users_count:
    order: 90
    suffix: acorn.user::lang.models.user.label_plural
    labels:
      en: Member Count
      ku: Çend Endamên
      ar: عدد الأعضاء
    labels-plural:
      en: Member Counts
      ku: Çend Endamên
      ar: عدد الأعضاء
fields-settings-to:
  parent_1[entity]:
    label: acorn.university::lang.models.course.parent_1[entity]
    type: partial
    path: parent
    relation: hierarchy
  parent_2[entity]:
    label: acorn.university::lang.models.course.parent_2[entity]
    type: partial
    path: parent
    relation: hierarchy
fields-settings:
  user_group_version_users:
    hidden: true
';


--
-- Name: acorn_user_user_group_version user_group_version_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group_version
    ADD CONSTRAINT user_group_version_id FOREIGN KEY (user_group_version_id) REFERENCES public.acorn_user_user_group_versions(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_university_teachers user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_teachers
    ADD CONSTRAINT user_id FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: CONSTRAINT user_id ON acorn_university_teachers; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT user_id ON public.acorn_university_teachers IS 'type: leaf';


--
-- Name: acorn_user_role_user user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_role_user
    ADD CONSTRAINT user_id FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id);


--
-- Name: acorn_user_user_group_version user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group_version
    ADD CONSTRAINT user_id FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_user_user_group user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_user_user_group
    ADD CONSTRAINT user_id FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: acorn_university_students user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_university_students
    ADD CONSTRAINT user_id FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE;


--
-- Name: CONSTRAINT user_id ON acorn_university_students; Type: COMMENT; Schema: public; Owner: university
--

COMMENT ON CONSTRAINT user_id ON public.acorn_university_students IS 'type: leaf
has-many-deep-settings:
  user_user_group_versions:
    tab: acorn.university::lang.models.course.label_plural
    rl-buttons:
      link: true
      unlink: true
    order: 40
    field-comment: Add new <a href="/backend/acorn/university/courses">Courses</a>
    comment-html: true
    filter-conditions: exists(select * from acorn_user_user_group_version ugv where ugv.user_group_version_id in(:filtered) and ugv.user_id = acorn_university_students.user_id)
    can-filter: false
    nameFrom: name
    filter-search-name-select: select ugs.name from acorn_user_user_groups ugs where ugs.id = acorn_university_entities.user_group_id
    explicit-label-key: acorn.university::lang.models.course.label_plural
  user_groups:
    column-exclude: true
    field-exclude: true
    can-filter: false
    filter-conditions: exists(select * from acorn_user_user_group_version ugv inner join acorn_user_user_group_versions ugvs on ugv.user_group_version_id = ugvs.id where ugvs.user_group_id in(:filtered) and ugv.user_id = acorn_university_students.user_id)
  user_user_addresses:
    tab: acorn.location::lang.models.address.label_plural
    order: 30
    can-filter: false
    invisible: true
  user_languages:
    explicit-label-key: acorn.user::lang.models.language.label_plural 
    field-exclude: true
    column-exclude: true
    can-filter: true
    filter-conditions: exists(select * from acorn_user_user_languages where language_id in(:filtered) and user_id = acorn_university_students.user_id)
  user_eventParts:
    hidden: true
    invisible: true
    can-filter: false
  user_roles:
    hidden: true
    invisible: true
    tab: acorn.user::lang.models.role.label_plural
    can-filter: false
  user_user_user_languages:
    explicit-label-key: acorn.user::lang.models.language.label_plural 
    tab: acorn.user::lang.models.language.label_plural
    can-filter: false';


--
-- Name: acorn_location_user_addresses user_id; Type: FK CONSTRAINT; Schema: public; Owner: university
--

ALTER TABLE ONLY public.acorn_location_user_addresses
    ADD CONSTRAINT user_id FOREIGN KEY (user_id) REFERENCES public.acorn_user_users(id) ON DELETE CASCADE NOT VALID;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE USAGE ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO PUBLIC;
GRANT ALL ON SCHEMA public TO token_1 WITH GRANT OPTION;
GRANT ALL ON SCHEMA public TO token_5;
GRANT ALL ON SCHEMA public TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION cube_in(cstring); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_in(cstring) FROM sz;
GRANT ALL ON FUNCTION public.cube_in(cstring) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_in(cstring) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_in(cstring) TO token_5;


--
-- Name: FUNCTION cube_out(public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_out(public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_out(public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_out(public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_out(public.cube) TO token_5;


--
-- Name: FUNCTION cube_recv(internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_recv(internal) FROM sz;
GRANT ALL ON FUNCTION public.cube_recv(internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_recv(internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_recv(internal) TO token_5;


--
-- Name: FUNCTION cube_send(public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_send(public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_send(public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_send(public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_send(public.cube) TO token_5;


--
-- Name: FUNCTION gtrgm_in(cstring); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_in(cstring) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_in(cstring) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_in(cstring) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_in(cstring) TO token_5;


--
-- Name: FUNCTION gtrgm_out(public.gtrgm); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_out(public.gtrgm) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_out(public.gtrgm) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_out(public.gtrgm) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_out(public.gtrgm) TO token_5;


--
-- Name: FUNCTION bytea_to_text(data bytea); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.bytea_to_text(data bytea) FROM sz;
GRANT ALL ON FUNCTION public.bytea_to_text(data bytea) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.bytea_to_text(data bytea) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.bytea_to_text(data bytea) TO token_5;


--
-- Name: FUNCTION cube(double precision[]); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube(double precision[]) FROM sz;
GRANT ALL ON FUNCTION public.cube(double precision[]) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision[]) TO token_5;


--
-- Name: FUNCTION cube(double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube(double precision) FROM sz;
GRANT ALL ON FUNCTION public.cube(double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision) TO token_5;


--
-- Name: FUNCTION cube(double precision[], double precision[]); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube(double precision[], double precision[]) FROM sz;
GRANT ALL ON FUNCTION public.cube(double precision[], double precision[]) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision[], double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision[], double precision[]) TO token_5;


--
-- Name: FUNCTION cube(double precision, double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube(double precision, double precision) FROM sz;
GRANT ALL ON FUNCTION public.cube(double precision, double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision, double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(double precision, double precision) TO token_5;


--
-- Name: FUNCTION cube(public.cube, double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube(public.cube, double precision) FROM sz;
GRANT ALL ON FUNCTION public.cube(public.cube, double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(public.cube, double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(public.cube, double precision) TO token_5;


--
-- Name: FUNCTION cube(public.cube, double precision, double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube(public.cube, double precision, double precision) FROM sz;
GRANT ALL ON FUNCTION public.cube(public.cube, double precision, double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(public.cube, double precision, double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube(public.cube, double precision, double precision) TO token_5;


--
-- Name: FUNCTION cube_cmp(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_cmp(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_cmp(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_cmp(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_cmp(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_contained(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_contained(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_contained(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_contained(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_contained(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_contains(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_contains(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_contains(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_contains(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_contains(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_coord(public.cube, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_coord(public.cube, integer) FROM sz;
GRANT ALL ON FUNCTION public.cube_coord(public.cube, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_coord(public.cube, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_coord(public.cube, integer) TO token_5;


--
-- Name: FUNCTION cube_coord_llur(public.cube, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_coord_llur(public.cube, integer) FROM sz;
GRANT ALL ON FUNCTION public.cube_coord_llur(public.cube, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_coord_llur(public.cube, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_coord_llur(public.cube, integer) TO token_5;


--
-- Name: FUNCTION cube_dim(public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_dim(public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_dim(public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_dim(public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_dim(public.cube) TO token_5;


--
-- Name: FUNCTION cube_distance(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_distance(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_distance(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_distance(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_distance(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_enlarge(public.cube, double precision, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_enlarge(public.cube, double precision, integer) FROM sz;
GRANT ALL ON FUNCTION public.cube_enlarge(public.cube, double precision, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_enlarge(public.cube, double precision, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_enlarge(public.cube, double precision, integer) TO token_5;


--
-- Name: FUNCTION cube_eq(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_eq(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_eq(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_eq(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_eq(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_ge(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_ge(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_ge(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ge(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ge(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_gt(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_gt(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_gt(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_gt(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_gt(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_inter(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_inter(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_inter(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_inter(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_inter(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_is_point(public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_is_point(public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_is_point(public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_is_point(public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_is_point(public.cube) TO token_5;


--
-- Name: FUNCTION cube_le(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_le(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_le(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_le(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_le(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_ll_coord(public.cube, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_ll_coord(public.cube, integer) FROM sz;
GRANT ALL ON FUNCTION public.cube_ll_coord(public.cube, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ll_coord(public.cube, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ll_coord(public.cube, integer) TO token_5;


--
-- Name: FUNCTION cube_lt(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_lt(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_lt(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_lt(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_lt(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_ne(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_ne(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_ne(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ne(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ne(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_overlap(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_overlap(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_overlap(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_overlap(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_overlap(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_size(public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_size(public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_size(public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_size(public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_size(public.cube) TO token_5;


--
-- Name: FUNCTION cube_subset(public.cube, integer[]); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_subset(public.cube, integer[]) FROM sz;
GRANT ALL ON FUNCTION public.cube_subset(public.cube, integer[]) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_subset(public.cube, integer[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_subset(public.cube, integer[]) TO token_5;


--
-- Name: FUNCTION cube_union(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_union(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.cube_union(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_union(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_union(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION cube_ur_coord(public.cube, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.cube_ur_coord(public.cube, integer) FROM sz;
GRANT ALL ON FUNCTION public.cube_ur_coord(public.cube, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ur_coord(public.cube, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.cube_ur_coord(public.cube, integer) TO token_5;


--
-- Name: FUNCTION daitch_mokotoff(text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.daitch_mokotoff(text) FROM sz;
GRANT ALL ON FUNCTION public.daitch_mokotoff(text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.daitch_mokotoff(text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.daitch_mokotoff(text) TO token_5;


--
-- Name: FUNCTION difference(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.difference(text, text) FROM sz;
GRANT ALL ON FUNCTION public.difference(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.difference(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.difference(text, text) TO token_5;


--
-- Name: FUNCTION distance_chebyshev(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.distance_chebyshev(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.distance_chebyshev(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.distance_chebyshev(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.distance_chebyshev(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION distance_taxicab(public.cube, public.cube); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.distance_taxicab(public.cube, public.cube) FROM sz;
GRANT ALL ON FUNCTION public.distance_taxicab(public.cube, public.cube) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.distance_taxicab(public.cube, public.cube) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.distance_taxicab(public.cube, public.cube) TO token_5;


--
-- Name: FUNCTION dmetaphone(text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.dmetaphone(text) FROM sz;
GRANT ALL ON FUNCTION public.dmetaphone(text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.dmetaphone(text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.dmetaphone(text) TO token_5;


--
-- Name: FUNCTION dmetaphone_alt(text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.dmetaphone_alt(text) FROM sz;
GRANT ALL ON FUNCTION public.dmetaphone_alt(text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.dmetaphone_alt(text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.dmetaphone_alt(text) TO token_5;


--
-- Name: FUNCTION earth(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.earth() FROM sz;
GRANT ALL ON FUNCTION public.earth() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.earth() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.earth() TO token_5;


--
-- Name: FUNCTION gc_to_sec(double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gc_to_sec(double precision) FROM sz;
GRANT ALL ON FUNCTION public.gc_to_sec(double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gc_to_sec(double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gc_to_sec(double precision) TO token_5;


--
-- Name: FUNCTION earth_box(public.earth, double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.earth_box(public.earth, double precision) FROM sz;
GRANT ALL ON FUNCTION public.earth_box(public.earth, double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.earth_box(public.earth, double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.earth_box(public.earth, double precision) TO token_5;


--
-- Name: FUNCTION sec_to_gc(double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.sec_to_gc(double precision) FROM sz;
GRANT ALL ON FUNCTION public.sec_to_gc(double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.sec_to_gc(double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.sec_to_gc(double precision) TO token_5;


--
-- Name: FUNCTION earth_distance(public.earth, public.earth); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.earth_distance(public.earth, public.earth) FROM sz;
GRANT ALL ON FUNCTION public.earth_distance(public.earth, public.earth) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.earth_distance(public.earth, public.earth) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.earth_distance(public.earth, public.earth) TO token_5;


--
-- Name: FUNCTION fn_acorn_add_websockets_triggers(schema character varying, table_prefix character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_add_websockets_triggers(schema character varying, table_prefix character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_add_websockets_triggers(schema character varying, table_prefix character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_add_websockets_triggers(schema character varying, table_prefix character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_avg(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_avg() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_avg() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_avg() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_avg(VARIADIC ints double precision[]); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.fn_acorn_avg(VARIADIC ints double precision[]) FROM sz;
GRANT ALL ON FUNCTION public.fn_acorn_avg(VARIADIC ints double precision[]) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_avg(VARIADIC ints double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_avg(VARIADIC ints double precision[]) TO token_5;


--
-- Name: FUNCTION fn_acorn_calendar_create_event(calendar_id uuid, owner_user_id uuid, type_id uuid, status_id uuid, name character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_calendar_create_event(calendar_id uuid, owner_user_id uuid, type_id uuid, status_id uuid, name character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_create_event(calendar_id uuid, owner_user_id uuid, type_id uuid, status_id uuid, name character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_create_event(calendar_id uuid, owner_user_id uuid, type_id uuid, status_id uuid, name character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_calendar_create_event(p_calendar_id uuid, p_owner_user_id uuid, p_event_type_id uuid, p_event_status_id uuid, p_name character varying, p_date_from timestamp without time zone, p_date_to timestamp without time zone); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_calendar_create_event(p_calendar_id uuid, p_owner_user_id uuid, p_event_type_id uuid, p_event_status_id uuid, p_name character varying, p_date_from timestamp without time zone, p_date_to timestamp without time zone) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_create_event(p_calendar_id uuid, p_owner_user_id uuid, p_event_type_id uuid, p_event_status_id uuid, p_name character varying, p_date_from timestamp without time zone, p_date_to timestamp without time zone) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_create_event(p_calendar_id uuid, p_owner_user_id uuid, p_event_type_id uuid, p_event_status_id uuid, p_name character varying, p_date_from timestamp without time zone, p_date_to timestamp without time zone) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_calendar_events_generate_event_instances(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_calendar_events_generate_event_instances() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_events_generate_event_instances() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_events_generate_event_instances() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_calendar_generate_event_instances(new_event_part record, old_event_part record); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_calendar_generate_event_instances(new_event_part record, old_event_part record) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_generate_event_instances(new_event_part record, old_event_part record) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_generate_event_instances(new_event_part record, old_event_part record) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_calendar_is_date(s character varying, d timestamp without time zone); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_calendar_is_date(s character varying, d timestamp without time zone) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_is_date(s character varying, d timestamp without time zone) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_is_date(s character varying, d timestamp without time zone) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_calendar_lazy_create_event(calendar_name character varying, owner_user_id uuid, type_name character varying, status_name character varying, event_name character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_calendar_lazy_create_event(calendar_name character varying, owner_user_id uuid, type_name character varying, status_name character varying, event_name character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_lazy_create_event(calendar_name character varying, owner_user_id uuid, type_name character varying, status_name character varying, event_name character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_lazy_create_event(calendar_name character varying, owner_user_id uuid, type_name character varying, status_name character varying, event_name character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_calendar_seed(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_calendar_seed() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_seed() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_calendar_seed() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_count(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_count() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_count() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_count() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_count(VARIADIC ints double precision[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_count(VARIADIC ints double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_count(VARIADIC ints double precision[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_count(VARIADIC ints double precision[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_created_by_user_id(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_created_by_user_id() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_created_by_user_id() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_created_by_user_id() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_cs_hi(p_model_id uuid, p_user_id uuid, p_ancestor_hierarchy_id uuid, p_define_entry_requirements boolean, p_related_course_id uuid, p_related_exam_id uuid, p_required_interview_id uuid, p_minimum_students integer, p_maximum_students integer, p_minimum_entry_score double precision) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_add_st_hi(p_model_id uuid, p_user_id uuid, p_hierarchy_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_apply(p_model_id uuid, p_user_id uuid, p_confirm boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_reset(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manually_added_students boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean) FROM sz;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_rollback(p_model_id uuid, p_user_id uuid, p_confirm boolean, p_clear_manual_proposals boolean) TO token_5;


--
-- Name: FUNCTION fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_action_enrollments_run(p_model_id uuid, p_user_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_all(p_enrollment_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_all(p_enrollment_id uuid, p_user_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_all(p_enrollment_id uuid, p_user_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_all(p_enrollment_id uuid, p_user_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_desire_first(p_enrollment_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_desire_first(p_enrollment_id uuid, p_user_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_desire_first(p_enrollment_id uuid, p_user_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_desire_first(p_enrollment_id uuid, p_user_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_desires_ordinal(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_desires_ordinal() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_desires_ordinal() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_desires_ordinal() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record) TO justice;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_enrollments_state_indicator(p_enrollment record) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_enrollment_score_first(p_enrollment_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_enrollment_score_first(p_enrollment_id uuid, p_user_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_score_first(p_enrollment_id uuid, p_user_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_enrollment_score_first(p_enrollment_id uuid, p_user_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_action_results_refresh(p_student_id uuid, p_academic_year_id uuid, p_messages boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_concat_strict(VARIADIC p_args anyarray); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_concat_strict(VARIADIC p_args anyarray) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_concat_strict(VARIADIC p_args anyarray) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_concat_strict(VARIADIC p_args anyarray) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_eval(p_expr character varying, p_level integer, p_messages boolean); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.fn_acorn_exam_eval(p_expr character varying, p_level integer, p_messages boolean) FROM sz;
GRANT ALL ON FUNCTION public.fn_acorn_exam_eval(p_expr character varying, p_level integer, p_messages boolean) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_eval(p_expr character varying, p_level integer, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_eval(p_expr character varying, p_level integer, p_messages boolean) TO token_5;


--
-- Name: FUNCTION fn_acorn_exam_explain(p_expr character varying, p_messages boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_explain(p_expr character varying, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_explain(p_expr character varying, p_messages boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_explain(p_expr character varying, p_messages boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_scores_log(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_scores_log() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_scores_log() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_scores_log() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_token_name(VARIADIC p_titles character varying[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name(VARIADIC p_titles character varying[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name(VARIADIC p_titles character varying[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name(VARIADIC p_titles character varying[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_token_name(p_id uuid, VARIADIC p_titles character varying[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name(p_id uuid, VARIADIC p_titles character varying[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name(p_id uuid, VARIADIC p_titles character varying[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name(p_id uuid, VARIADIC p_titles character varying[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_token_name_internal(p_titles character varying[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name_internal(p_titles character varying[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name_internal(p_titles character varying[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_token_name_internal(p_titles character varying[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_exam_tokenize(p_expr character varying, p_level integer, p_messages boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_exam_tokenize(p_expr character varying, p_level integer, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_exam_tokenize(p_expr character varying, p_level integer, p_messages boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_exam_tokenize(p_expr character varying, p_level integer, p_messages boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_first(anyelement, anyelement); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_first(anyelement, anyelement) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_first(anyelement, anyelement) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_first(anyelement, anyelement) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_last(anyelement, anyelement); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_last(anyelement, anyelement) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_last(anyelement, anyelement) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_last(anyelement, anyelement) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_max(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_max() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_max() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_max() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_max(VARIADIC ints double precision[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_max(VARIADIC ints double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_max(VARIADIC ints double precision[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_max(VARIADIC ints double precision[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_min(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_min() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_min() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_min() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_min(VARIADIC ints double precision[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_min(VARIADIC ints double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_min(VARIADIC ints double precision[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_min(VARIADIC ints double precision[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_new_replicated_row(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_new_replicated_row() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_new_replicated_row() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_new_replicated_row() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_reset_sequences(schema_like character varying, table_like character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_reset_sequences(schema_like character varying, table_like character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_reset_sequences(schema_like character varying, table_like character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_reset_sequences(schema_like character varying, table_like character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_server_id(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_server_id() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_server_id() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_server_id() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_sum(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_sum() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_sum() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_sum() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_sum(VARIADIC ints double precision[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_sum(VARIADIC ints double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_sum(VARIADIC ints double precision[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_sum(VARIADIC ints double precision[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_sum(ints character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_sum(ints character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_sum(ints character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_sum(ints character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_sumproduct(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_sumproduct() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_sumproduct() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_sumproduct() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_sumproduct(VARIADIC ints double precision[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_sumproduct(VARIADIC ints double precision[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_sumproduct(VARIADIC ints double precision[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_sumproduct(VARIADIC ints double precision[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_table_counts(_schema character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_table_counts(_schema character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_table_counts(_schema character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_table_counts(_schema character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character) FROM sz;
GRANT ALL ON FUNCTION public.fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_translate(p_fallback_name character varying, p_table character varying, p_id uuid, p_locale character) TO token_1 WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_truncate_database(schema_like character varying, table_like character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_truncate_database(schema_like character varying, table_like character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_truncate_database(schema_like character varying, table_like character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_truncate_database(schema_like character varying, table_like character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_academic_years_copy_to(p_old_academic_year_id uuid, p_new_academic_year_id uuid, p_user_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean, p_old_parent_id uuid, p_new_parent_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_academic_years_copy_to(p_old_academic_year_id uuid, p_new_academic_year_id uuid, p_user_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean, p_old_parent_id uuid, p_new_parent_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_academic_years_copy_to(p_old_academic_year_id uuid, p_new_academic_year_id uuid, p_user_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean, p_old_parent_id uuid, p_new_parent_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_academic_years_copy_to(p_old_academic_year_id uuid, p_new_academic_year_id uuid, p_user_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean, p_old_parent_id uuid, p_new_parent_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_copy_hierarchy boolean, p_copy_semesters boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2425b(p_delete_previous boolean, p_confirm boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2425e(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_confirm boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_import2526b(p_delete_previous boolean, p_confirm boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_provision(p_model_id uuid, p_user_id uuid, p_copy_academic_year_id uuid, p_num_years integer, p_enabled boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_academic_years_res_ref(model_id uuid, user_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_course_materials_cm_copy2(p_course_id uuid, p_academic_year_semester_id uuid, p_course_year_id uuid, p_copy_exams boolean, p_copy_projects boolean, p_copy_interviews boolean, p_copy_calculations boolean, p_copy_students boolean, p_delete_existing boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_course_year_semesters_spec(p_model_id uuid, p_user_id uuid, p_course_specialization_id uuid, p_copy_materials boolean, p_copy_exams boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_append_child(p_model_id uuid, p_user_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_clear(model_id uuid, user_id uuid, p_clear_course_materials boolean, p_for_enrollment_year boolean, p_clear_exams_and_scores boolean, p_confirm boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_hierarchies_copy_to(model_id uuid, user_id uuid, p_academic_year_id uuid, p_promote_successful_students boolean, p_copy_materials boolean, p_copy_seminars boolean, p_copy_calculations boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_action_students_refresh(model_id uuid, user_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_courses_add_to_hierarchy(p_model_id uuid, p_user_id uuid, p_add boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_add_to_courses(p_model_id uuid, p_user_id uuid, p_course_ids uuid[]) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_set_code(p_model_id uuid, p_user_id uuid, p_code character varying) TO token_5;


--
-- Name: FUNCTION fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_after_students_set_language(p_model_id uuid, p_user_id uuid, p_language character varying) TO token_5;


--
-- Name: FUNCTION fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_before_course_plans_prov(p_model_id uuid, p_user_id uuid, p_enrollment_academic_year_id uuid, p_length integer, p_provision_missing_years boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_cascade_delete_event(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_cascade_delete_event() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_cascade_delete_event() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_cascade_delete_event() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_cm_order(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_cm_order() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_cm_order() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_cm_order() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_courses_unique_name_type(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_courses_unique_name_type() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_courses_unique_name_type() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_courses_unique_name_type() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_cys_manage_hierarchy(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_cys_manage_hierarchy() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_cys_manage_hierarchy() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_cys_manage_hierarchy() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_delete_entity(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_delete_entity() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_delete_entity() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_delete_entity() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_delete_user_group(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_delete_user_group() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_delete_user_group() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_delete_user_group() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_enrollment_year(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.fn_acorn_university_enrollment_year() FROM sz;
GRANT ALL ON FUNCTION public.fn_acorn_university_enrollment_year() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_enrollment_year() TO token_5;


--
-- Name: FUNCTION fn_acorn_university_entities_leaf_table(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_entities_leaf_table() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_entities_leaf_table() TO token_5;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_ascendants(p_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_ascendants(p_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_ascendants(p_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_ascendants(p_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_create_version(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_create_version() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_create_version() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_create_version() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_delete_version(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_delete_version() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_delete_version() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_delete_version() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_descendants(p_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants(p_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants(p_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants(p_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_descendants_user_cnt(p_id uuid, p_nest_left integer, p_nest_depth integer, p_messages boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnt(p_id uuid, p_nest_left integer, p_nest_depth integer, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnt(p_id uuid, p_nest_left integer, p_nest_depth integer, p_messages boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnt(p_id uuid, p_nest_left integer, p_nest_depth integer, p_messages boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_descendants_user_cnts(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnts() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnts() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_descendants_user_cnts() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_entity_leaf_type(p_entity_id uuid, p_throw_invalid boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_entity_leaf_type(p_entity_id uuid, p_throw_invalid boolean) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_entity_leaf_type(p_entity_id uuid, p_throw_invalid boolean) TO token_5;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_manage_cys(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_manage_cys() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_manage_cys() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_manage_cys() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchies_update_version(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_update_version() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_update_version() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchies_update_version() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_hierarchy_lock_event(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchy_lock_event() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchy_lock_event() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_hierarchy_lock_event() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_import_source_empty(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_import_source_empty() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_import_source_empty() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_import_source_empty() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_lecture_sync_lock_event(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_lecture_sync_lock_event() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_lecture_sync_lock_event() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_lecture_sync_lock_event() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous boolean, p_messages boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous boolean, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous boolean, p_messages boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v1(p_delete_previous boolean, p_messages boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous boolean, p_messages boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous boolean, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous boolean, p_messages boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_bakeloria_v2(p_delete_previous boolean, p_messages boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying) FROM sz;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_branche_to_course(p_course_name character varying, p_branche_name character varying) TO token_5;


--
-- Name: FUNCTION fn_acorn_university_legacy_import_certificate_code(p_county_name character varying, p_certificate_name character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_certificate_code(p_county_name character varying, p_certificate_name character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_certificate_code(p_county_name character varying, p_certificate_name character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_certificate_code(p_county_name character varying, p_certificate_name character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_legacy_import_county(p_county character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_county(p_county character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_county(p_county character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_county(p_county character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_legacy_import_enrollment(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_messages boolean); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_enrollment(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_messages boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_enrollment(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_messages boolean) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_legacy_import_enrollment(p_import_mofadala_students boolean, p_enroll_students_into_courses boolean, p_delete_previous boolean, p_messages boolean) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_provision_year_semesters(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_provision_year_semesters() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_provision_year_semesters() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_provision_year_semesters() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_scope_entities(p_descendant_entity_id uuid, p_ancestor_entity_id character varying); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_scope_entities(p_descendant_entity_id uuid, p_ancestor_entity_id character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_scope_entities(p_descendant_entity_id uuid, p_ancestor_entity_id character varying) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_scope_entities(p_descendant_entity_id uuid, p_ancestor_entity_id character varying) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_semester_ordinal_delete(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_semester_ordinal_delete() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_semester_ordinal_delete() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_semester_ordinal_delete() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_semester_ordinal_insert(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_semester_ordinal_insert() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_semester_ordinal_insert() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_semester_ordinal_insert() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_student_codes_current(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_student_codes_current() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_student_codes_current() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_student_codes_current() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_student_documents(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_student_documents() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_student_documents() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_student_documents() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_student_identities_current(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_student_identities_current() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_student_identities_current() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_student_identities_current() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_students_ales_refresh(p_model_id uuid); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_university_students_ales_refresh(p_model_id uuid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_students_ales_refresh(p_model_id uuid) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_university_students_ales_refresh(p_model_id uuid) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_university_table_counts(_schema character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.fn_acorn_university_table_counts(_schema character varying) FROM sz;
GRANT ALL ON FUNCTION public.fn_acorn_university_table_counts(_schema character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_table_counts(_schema character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_university_table_counts(_schema character varying) TO token_5;


--
-- Name: FUNCTION fn_acorn_updated_by_user_id(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_updated_by_user_id() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_updated_by_user_id() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_updated_by_user_id() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_user_code(name character varying, word integer, length integer); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_user_code(name character varying, word integer, length integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_user_code(name character varying, word integer, length integer) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_user_code(name character varying, word integer, length integer) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_user_code_acronym(name character varying, word integer, length integer); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_user_code_acronym(name character varying, word integer, length integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_user_code_acronym(name character varying, word integer, length integer) TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_user_code_acronym(name character varying, word integer, length integer) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_user_get_seed_user(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_user_get_seed_user() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_user_get_seed_user() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_user_get_seed_user() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_user_user_group_first_version(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_user_user_group_first_version() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_user_user_group_first_version() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_user_user_group_first_version() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_user_user_group_version_current(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_user_user_group_version_current() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_user_user_group_version_current() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_user_user_group_version_current() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION fn_acorn_user_user_languages_current(); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.fn_acorn_user_user_languages_current() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.fn_acorn_user_user_languages_current() TO token_5;
GRANT ALL ON FUNCTION public.fn_acorn_user_user_languages_current() TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION g_cube_consistent(internal, public.cube, smallint, oid, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.g_cube_consistent(internal, public.cube, smallint, oid, internal) FROM sz;
GRANT ALL ON FUNCTION public.g_cube_consistent(internal, public.cube, smallint, oid, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_consistent(internal, public.cube, smallint, oid, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_consistent(internal, public.cube, smallint, oid, internal) TO token_5;


--
-- Name: FUNCTION g_cube_distance(internal, public.cube, smallint, oid, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.g_cube_distance(internal, public.cube, smallint, oid, internal) FROM sz;
GRANT ALL ON FUNCTION public.g_cube_distance(internal, public.cube, smallint, oid, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_distance(internal, public.cube, smallint, oid, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_distance(internal, public.cube, smallint, oid, internal) TO token_5;


--
-- Name: FUNCTION g_cube_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.g_cube_penalty(internal, internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.g_cube_penalty(internal, internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_penalty(internal, internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_penalty(internal, internal, internal) TO token_5;


--
-- Name: FUNCTION g_cube_picksplit(internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.g_cube_picksplit(internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.g_cube_picksplit(internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_picksplit(internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_picksplit(internal, internal) TO token_5;


--
-- Name: FUNCTION g_cube_same(public.cube, public.cube, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.g_cube_same(public.cube, public.cube, internal) FROM sz;
GRANT ALL ON FUNCTION public.g_cube_same(public.cube, public.cube, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_same(public.cube, public.cube, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_same(public.cube, public.cube, internal) TO token_5;


--
-- Name: FUNCTION g_cube_union(internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.g_cube_union(internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.g_cube_union(internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_union(internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.g_cube_union(internal, internal) TO token_5;


--
-- Name: FUNCTION geo_distance(point, point); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.geo_distance(point, point) FROM sz;
GRANT ALL ON FUNCTION public.geo_distance(point, point) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.geo_distance(point, point) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.geo_distance(point, point) TO token_5;


--
-- Name: FUNCTION gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_extract_query_trgm(text, internal, smallint, internal, internal, internal, internal) TO token_5;


--
-- Name: FUNCTION gin_extract_value_trgm(text, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gin_extract_value_trgm(text, internal) FROM sz;
GRANT ALL ON FUNCTION public.gin_extract_value_trgm(text, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_extract_value_trgm(text, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_extract_value_trgm(text, internal) TO token_5;


--
-- Name: FUNCTION gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_trgm_consistent(internal, smallint, text, integer, internal, internal, internal, internal) TO token_5;


--
-- Name: FUNCTION gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gin_trgm_triconsistent(internal, smallint, text, integer, internal, internal, internal) TO token_5;


--
-- Name: FUNCTION gtrgm_compress(internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_compress(internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_compress(internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_compress(internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_compress(internal) TO token_5;


--
-- Name: FUNCTION gtrgm_consistent(internal, text, smallint, oid, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_consistent(internal, text, smallint, oid, internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_consistent(internal, text, smallint, oid, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_consistent(internal, text, smallint, oid, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_consistent(internal, text, smallint, oid, internal) TO token_5;


--
-- Name: FUNCTION gtrgm_decompress(internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_decompress(internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_decompress(internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_decompress(internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_decompress(internal) TO token_5;


--
-- Name: FUNCTION gtrgm_distance(internal, text, smallint, oid, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_distance(internal, text, smallint, oid, internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_distance(internal, text, smallint, oid, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_distance(internal, text, smallint, oid, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_distance(internal, text, smallint, oid, internal) TO token_5;


--
-- Name: FUNCTION gtrgm_options(internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_options(internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_options(internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_options(internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_options(internal) TO token_5;


--
-- Name: FUNCTION gtrgm_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_penalty(internal, internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_penalty(internal, internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_penalty(internal, internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_penalty(internal, internal, internal) TO token_5;


--
-- Name: FUNCTION gtrgm_picksplit(internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_picksplit(internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_picksplit(internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_picksplit(internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_picksplit(internal, internal) TO token_5;


--
-- Name: FUNCTION gtrgm_same(public.gtrgm, public.gtrgm, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_same(public.gtrgm, public.gtrgm, internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_same(public.gtrgm, public.gtrgm, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_same(public.gtrgm, public.gtrgm, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_same(public.gtrgm, public.gtrgm, internal) TO token_5;


--
-- Name: FUNCTION gtrgm_union(internal, internal); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.gtrgm_union(internal, internal) FROM sz;
GRANT ALL ON FUNCTION public.gtrgm_union(internal, internal) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_union(internal, internal) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.gtrgm_union(internal, internal) TO token_5;


--
-- Name: FUNCTION hostname(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.hostname() FROM sz;
GRANT ALL ON FUNCTION public.hostname() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.hostname() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.hostname() TO token_5;


--
-- Name: FUNCTION http(request public.http_request); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http(request public.http_request) FROM sz;
GRANT ALL ON FUNCTION public.http(request public.http_request) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http(request public.http_request) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http(request public.http_request) TO token_5;


--
-- Name: FUNCTION http_delete(uri character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_delete(uri character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_delete(uri character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_delete(uri character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_delete(uri character varying) TO token_5;


--
-- Name: FUNCTION http_delete(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_delete(uri character varying, content character varying, content_type character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_delete(uri character varying, content character varying, content_type character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_delete(uri character varying, content character varying, content_type character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_delete(uri character varying, content character varying, content_type character varying) TO token_5;


--
-- Name: FUNCTION http_get(uri character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_get(uri character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_get(uri character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_get(uri character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_get(uri character varying) TO token_5;


--
-- Name: FUNCTION http_get(uri character varying, data jsonb); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_get(uri character varying, data jsonb) FROM sz;
GRANT ALL ON FUNCTION public.http_get(uri character varying, data jsonb) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_get(uri character varying, data jsonb) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_get(uri character varying, data jsonb) TO token_5;


--
-- Name: FUNCTION http_head(uri character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_head(uri character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_head(uri character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_head(uri character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_head(uri character varying) TO token_5;


--
-- Name: FUNCTION http_header(field character varying, value character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_header(field character varying, value character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_header(field character varying, value character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_header(field character varying, value character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_header(field character varying, value character varying) TO token_5;


--
-- Name: FUNCTION http_list_curlopt(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_list_curlopt() FROM sz;
GRANT ALL ON FUNCTION public.http_list_curlopt() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_list_curlopt() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_list_curlopt() TO token_5;


--
-- Name: FUNCTION http_patch(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_patch(uri character varying, content character varying, content_type character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_patch(uri character varying, content character varying, content_type character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_patch(uri character varying, content character varying, content_type character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_patch(uri character varying, content character varying, content_type character varying) TO token_5;


--
-- Name: FUNCTION http_post(uri character varying, data jsonb); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_post(uri character varying, data jsonb) FROM sz;
GRANT ALL ON FUNCTION public.http_post(uri character varying, data jsonb) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_post(uri character varying, data jsonb) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_post(uri character varying, data jsonb) TO token_5;


--
-- Name: FUNCTION http_post(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_post(uri character varying, content character varying, content_type character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_post(uri character varying, content character varying, content_type character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_post(uri character varying, content character varying, content_type character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_post(uri character varying, content character varying, content_type character varying) TO token_5;


--
-- Name: FUNCTION http_put(uri character varying, content character varying, content_type character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_put(uri character varying, content character varying, content_type character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_put(uri character varying, content character varying, content_type character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_put(uri character varying, content character varying, content_type character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_put(uri character varying, content character varying, content_type character varying) TO token_5;


--
-- Name: FUNCTION http_reset_curlopt(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_reset_curlopt() FROM sz;
GRANT ALL ON FUNCTION public.http_reset_curlopt() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_reset_curlopt() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_reset_curlopt() TO token_5;


--
-- Name: FUNCTION http_set_curlopt(curlopt character varying, value character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.http_set_curlopt(curlopt character varying, value character varying) FROM sz;
GRANT ALL ON FUNCTION public.http_set_curlopt(curlopt character varying, value character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_set_curlopt(curlopt character varying, value character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.http_set_curlopt(curlopt character varying, value character varying) TO token_5;


--
-- Name: FUNCTION latitude(public.earth); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.latitude(public.earth) FROM sz;
GRANT ALL ON FUNCTION public.latitude(public.earth) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.latitude(public.earth) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.latitude(public.earth) TO token_5;


--
-- Name: FUNCTION levenshtein(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.levenshtein(text, text) FROM sz;
GRANT ALL ON FUNCTION public.levenshtein(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein(text, text) TO token_5;


--
-- Name: FUNCTION levenshtein(text, text, integer, integer, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.levenshtein(text, text, integer, integer, integer) FROM sz;
GRANT ALL ON FUNCTION public.levenshtein(text, text, integer, integer, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein(text, text, integer, integer, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein(text, text, integer, integer, integer) TO token_5;


--
-- Name: FUNCTION levenshtein_less_equal(text, text, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer) FROM sz;
GRANT ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer) TO token_5;


--
-- Name: FUNCTION levenshtein_less_equal(text, text, integer, integer, integer, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer, integer, integer, integer) FROM sz;
GRANT ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer, integer, integer, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer, integer, integer, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.levenshtein_less_equal(text, text, integer, integer, integer, integer) TO token_5;


--
-- Name: FUNCTION ll_to_earth(double precision, double precision); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.ll_to_earth(double precision, double precision) FROM sz;
GRANT ALL ON FUNCTION public.ll_to_earth(double precision, double precision) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.ll_to_earth(double precision, double precision) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.ll_to_earth(double precision, double precision) TO token_5;


--
-- Name: FUNCTION longitude(public.earth); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.longitude(public.earth) FROM sz;
GRANT ALL ON FUNCTION public.longitude(public.earth) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.longitude(public.earth) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.longitude(public.earth) TO token_5;


--
-- Name: FUNCTION metaphone(text, integer); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.metaphone(text, integer) FROM sz;
GRANT ALL ON FUNCTION public.metaphone(text, integer) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.metaphone(text, integer) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.metaphone(text, integer) TO token_5;


--
-- Name: FUNCTION postgres_fdw_disconnect(text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.postgres_fdw_disconnect(text) FROM sz;
GRANT ALL ON FUNCTION public.postgres_fdw_disconnect(text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_disconnect(text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_disconnect(text) TO token_5;


--
-- Name: FUNCTION postgres_fdw_disconnect_all(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.postgres_fdw_disconnect_all() FROM sz;
GRANT ALL ON FUNCTION public.postgres_fdw_disconnect_all() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_disconnect_all() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_disconnect_all() TO token_5;


--
-- Name: FUNCTION postgres_fdw_get_connections(OUT server_name text, OUT valid boolean); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.postgres_fdw_get_connections(OUT server_name text, OUT valid boolean) FROM sz;
GRANT ALL ON FUNCTION public.postgres_fdw_get_connections(OUT server_name text, OUT valid boolean) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_get_connections(OUT server_name text, OUT valid boolean) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_get_connections(OUT server_name text, OUT valid boolean) TO token_5;


--
-- Name: FUNCTION postgres_fdw_handler(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.postgres_fdw_handler() FROM sz;
GRANT ALL ON FUNCTION public.postgres_fdw_handler() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_handler() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_handler() TO token_5;


--
-- Name: FUNCTION postgres_fdw_validator(text[], oid); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.postgres_fdw_validator(text[], oid) FROM sz;
GRANT ALL ON FUNCTION public.postgres_fdw_validator(text[], oid) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_validator(text[], oid) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.postgres_fdw_validator(text[], oid) TO token_5;


--
-- Name: FUNCTION set_limit(real); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.set_limit(real) FROM sz;
GRANT ALL ON FUNCTION public.set_limit(real) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.set_limit(real) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.set_limit(real) TO token_5;


--
-- Name: FUNCTION show_limit(); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.show_limit() FROM sz;
GRANT ALL ON FUNCTION public.show_limit() TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.show_limit() TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.show_limit() TO token_5;


--
-- Name: FUNCTION show_trgm(text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.show_trgm(text) FROM sz;
GRANT ALL ON FUNCTION public.show_trgm(text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.show_trgm(text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.show_trgm(text) TO token_5;


--
-- Name: FUNCTION similarity(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.similarity(text, text) FROM sz;
GRANT ALL ON FUNCTION public.similarity(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.similarity(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.similarity(text, text) TO token_5;


--
-- Name: FUNCTION similarity_dist(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.similarity_dist(text, text) FROM sz;
GRANT ALL ON FUNCTION public.similarity_dist(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.similarity_dist(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.similarity_dist(text, text) TO token_5;


--
-- Name: FUNCTION similarity_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.similarity_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.similarity_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.similarity_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.similarity_op(text, text) TO token_5;


--
-- Name: FUNCTION soundex(text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.soundex(text) FROM sz;
GRANT ALL ON FUNCTION public.soundex(text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.soundex(text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.soundex(text) TO token_5;


--
-- Name: FUNCTION strict_word_similarity(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.strict_word_similarity(text, text) FROM sz;
GRANT ALL ON FUNCTION public.strict_word_similarity(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity(text, text) TO token_5;


--
-- Name: FUNCTION strict_word_similarity_commutator_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.strict_word_similarity_commutator_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.strict_word_similarity_commutator_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_commutator_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_commutator_op(text, text) TO token_5;


--
-- Name: FUNCTION strict_word_similarity_dist_commutator_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.strict_word_similarity_dist_commutator_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.strict_word_similarity_dist_commutator_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_dist_commutator_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_dist_commutator_op(text, text) TO token_5;


--
-- Name: FUNCTION strict_word_similarity_dist_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.strict_word_similarity_dist_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.strict_word_similarity_dist_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_dist_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_dist_op(text, text) TO token_5;


--
-- Name: FUNCTION strict_word_similarity_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.strict_word_similarity_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.strict_word_similarity_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.strict_word_similarity_op(text, text) TO token_5;


--
-- Name: FUNCTION text_soundex(text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.text_soundex(text) FROM sz;
GRANT ALL ON FUNCTION public.text_soundex(text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.text_soundex(text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.text_soundex(text) TO token_5;


--
-- Name: FUNCTION text_to_bytea(data text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.text_to_bytea(data text) FROM sz;
GRANT ALL ON FUNCTION public.text_to_bytea(data text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.text_to_bytea(data text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.text_to_bytea(data text) TO token_5;


--
-- Name: FUNCTION urlencode(string bytea); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.urlencode(string bytea) FROM sz;
GRANT ALL ON FUNCTION public.urlencode(string bytea) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.urlencode(string bytea) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.urlencode(string bytea) TO token_5;


--
-- Name: FUNCTION urlencode(data jsonb); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.urlencode(data jsonb) FROM sz;
GRANT ALL ON FUNCTION public.urlencode(data jsonb) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.urlencode(data jsonb) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.urlencode(data jsonb) TO token_5;


--
-- Name: FUNCTION urlencode(string character varying); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.urlencode(string character varying) FROM sz;
GRANT ALL ON FUNCTION public.urlencode(string character varying) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.urlencode(string character varying) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.urlencode(string character varying) TO token_5;


--
-- Name: FUNCTION word_similarity(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.word_similarity(text, text) FROM sz;
GRANT ALL ON FUNCTION public.word_similarity(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity(text, text) TO token_5;


--
-- Name: FUNCTION word_similarity_commutator_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.word_similarity_commutator_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.word_similarity_commutator_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_commutator_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_commutator_op(text, text) TO token_5;


--
-- Name: FUNCTION word_similarity_dist_commutator_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.word_similarity_dist_commutator_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.word_similarity_dist_commutator_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_dist_commutator_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_dist_commutator_op(text, text) TO token_5;


--
-- Name: FUNCTION word_similarity_dist_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.word_similarity_dist_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.word_similarity_dist_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_dist_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_dist_op(text, text) TO token_5;


--
-- Name: FUNCTION word_similarity_op(text, text); Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON FUNCTION public.word_similarity_op(text, text) FROM sz;
GRANT ALL ON FUNCTION public.word_similarity_op(text, text) TO sz WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_op(text, text) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.word_similarity_op(text, text) TO token_5;


--
-- Name: FUNCTION agg_acorn_first(anyelement); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.agg_acorn_first(anyelement) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.agg_acorn_first(anyelement) TO token_5;
GRANT ALL ON FUNCTION public.agg_acorn_first(anyelement) TO sz WITH GRANT OPTION;


--
-- Name: FUNCTION agg_acorn_last(anyelement); Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON FUNCTION public.agg_acorn_last(anyelement) TO token_1 WITH GRANT OPTION;
GRANT ALL ON FUNCTION public.agg_acorn_last(anyelement) TO token_5;
GRANT ALL ON FUNCTION public.agg_acorn_last(anyelement) TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_calendars; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_calendars TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_calendars TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_calendars TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_calendars TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_event_part_user; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_event_part_user TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_event_part_user TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_event_part_user TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_event_part_user TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_event_part_user_group; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_event_part_user_group TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_event_part_user_group TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_event_part_user_group TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_event_part_user_group TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_event_parts; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_event_parts TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_event_parts TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_event_parts TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_event_parts TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_event_statuses; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_event_statuses TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_event_statuses TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_event_statuses TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_event_statuses TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_event_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_event_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_event_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_event_types TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_event_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_events; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_events TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_events TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_events TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_events TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_calendar_instances; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_calendar_instances TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_calendar_instances TO PUBLIC;
GRANT ALL ON TABLE public.acorn_calendar_instances TO token_5;
GRANT ALL ON TABLE public.acorn_calendar_instances TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_hierarchies; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_hierarchies TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_hierarchies TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_hierarchies TO token_5;
GRANT ALL ON TABLE public.acorn_university_hierarchies TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_interview_students; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_interview_students TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_interview_students TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_interview_students TO token_5;
GRANT ALL ON TABLE public.acorn_exam_interview_students TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_academic_year_semesters; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_academic_year_semesters TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_academic_year_semesters TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_academic_year_semesters TO token_5;
GRANT ALL ON TABLE public.acorn_university_academic_year_semesters TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE acorn_university_year_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.acorn_university_year_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.acorn_university_year_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.acorn_university_year_seq TO token_5;
GRANT ALL ON SEQUENCE public.acorn_university_year_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_academic_years; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_academic_years TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_academic_years TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_academic_years TO token_5;
GRANT ALL ON TABLE public.acorn_university_academic_years TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_hierarchy_event; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_hierarchy_event TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_hierarchy_event TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_hierarchy_event TO token_5;
GRANT ALL ON TABLE public.acorn_university_hierarchy_event TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_lectures; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_lectures TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_lectures TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_lectures TO token_5;
GRANT ALL ON TABLE public.acorn_university_lectures TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_course_entry_requirements; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_course_entry_requirements TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_course_entry_requirements TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_course_entry_requirements TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_course_entry_requirements TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_desires; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_desires TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_desires TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_desires TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_desires TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_enrollments; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_enrollments TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_enrollments TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_enrollments TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_enrollments TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_runs; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_runs TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_runs TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_runs TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_runs TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_student_notes; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_student_notes TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_student_notes TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_student_notes TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_student_notes TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_answers; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_answers TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_answers TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_answers TO token_5;
GRANT ALL ON TABLE public.acorn_exam_answers TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_calculation_course_materials; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_calculation_course_materials TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_calculation_course_materials TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_calculation_course_materials TO token_5;
GRANT ALL ON TABLE public.acorn_exam_calculation_course_materials TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_calculation_course_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_calculation_course_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_calculation_course_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_calculation_course_types TO token_5;
GRANT ALL ON TABLE public.acorn_exam_calculation_course_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_calculation_courses; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_calculation_courses TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_calculation_courses TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_calculation_courses TO token_5;
GRANT ALL ON TABLE public.acorn_exam_calculation_courses TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_calculation_material_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_calculation_material_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_calculation_material_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_calculation_material_types TO token_5;
GRANT ALL ON TABLE public.acorn_exam_calculation_material_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_calculation_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_calculation_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_calculation_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_calculation_types TO token_5;
GRANT ALL ON TABLE public.acorn_exam_calculation_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_calculations; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_calculations TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_calculations TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_calculations TO token_5;
GRANT ALL ON TABLE public.acorn_exam_calculations TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_centres; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_centres TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_centres TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_centres TO token_5;
GRANT ALL ON TABLE public.acorn_exam_centres TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_exam_materials; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_exam_materials TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_exam_materials TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_exam_materials TO token_5;
GRANT ALL ON TABLE public.acorn_exam_exam_materials TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_exams; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_exams TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_exams TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_exams TO token_5;
GRANT ALL ON TABLE public.acorn_exam_exams TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_instances; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_instances TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_instances TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_instances TO token_5;
GRANT ALL ON TABLE public.acorn_exam_instances TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_interviews; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_interviews TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_interviews TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_interviews TO token_5;
GRANT ALL ON TABLE public.acorn_exam_interviews TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_questions; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_questions TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_questions TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_questions TO token_5;
GRANT ALL ON TABLE public.acorn_exam_questions TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_score_names; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_score_names TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_score_names TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_score_names TO token_5;
GRANT ALL ON TABLE public.acorn_exam_score_names TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_scores; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_scores TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_scores TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_scores TO token_5;
GRANT ALL ON TABLE public.acorn_exam_scores TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_sections; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_sections TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_sections TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_sections TO token_5;
GRANT ALL ON TABLE public.acorn_exam_sections TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_types TO token_5;
GRANT ALL ON TABLE public.acorn_exam_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_course_materials; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_course_materials TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_course_materials TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_course_materials TO token_5;
GRANT ALL ON TABLE public.acorn_university_course_materials TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_course_plans; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_course_plans TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_course_plans TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_course_plans TO token_5;
GRANT ALL ON TABLE public.acorn_university_course_plans TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_course_specializations; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_course_specializations TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_course_specializations TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_course_specializations TO token_5;
GRANT ALL ON TABLE public.acorn_university_course_specializations TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_course_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_course_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_course_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_course_types TO token_5;
GRANT ALL ON TABLE public.acorn_university_course_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_course_years; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_course_years TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_course_years TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_course_years TO token_5;
GRANT ALL ON TABLE public.acorn_university_course_years TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_document_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_document_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_document_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_document_types TO token_5;
GRANT ALL ON TABLE public.acorn_university_document_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_entities; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_entities TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_entities TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_entities TO token_5;
GRANT ALL ON TABLE public.acorn_university_entities TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_identity_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_identity_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_identity_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_identity_types TO token_5;
GRANT ALL ON TABLE public.acorn_university_identity_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_material_topics; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_material_topics TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_material_topics TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_material_topics TO token_5;
GRANT ALL ON TABLE public.acorn_university_material_topics TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_material_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_material_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_material_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_material_types TO token_5;
GRANT ALL ON TABLE public.acorn_university_material_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_materials; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_materials TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_materials TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_materials TO token_5;
GRANT ALL ON TABLE public.acorn_university_materials TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_project_students; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_project_students TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_project_students TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_project_students TO token_5;
GRANT ALL ON TABLE public.acorn_university_project_students TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_projects; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_projects TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_projects TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_projects TO token_5;
GRANT ALL ON TABLE public.acorn_university_projects TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_semester_groups; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_semester_groups TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_semester_groups TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_semester_groups TO token_5;
GRANT ALL ON TABLE public.acorn_university_semester_groups TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_semesters; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_semesters TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_semesters TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_semesters TO token_5;
GRANT ALL ON TABLE public.acorn_university_semesters TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_codes; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_codes TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_codes TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_codes TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_codes TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_documents; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_documents TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_documents TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_documents TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_documents TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_identities; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_identities TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_identities TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_identities TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_identities TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_notes; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_notes TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_notes TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_notes TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_notes TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_statuses; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_statuses TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_statuses TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_statuses TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_statuses TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_types TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_types TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE acorn_university_students_number; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.acorn_university_students_number TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.acorn_university_students_number TO PUBLIC;
GRANT ALL ON SEQUENCE public.acorn_university_students_number TO token_5;
GRANT ALL ON SEQUENCE public.acorn_university_students_number TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_students; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_students TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_students TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_students TO token_5;
GRANT ALL ON TABLE public.acorn_university_students TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_users; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_users TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_users TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_users TO token_5;
GRANT ALL ON TABLE public.acorn_user_users TO sz WITH GRANT OPTION;


--
-- Name: TABLE backend_users; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.backend_users TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.backend_users TO PUBLIC;
GRANT ALL ON TABLE public.backend_users TO token_5;
GRANT ALL ON TABLE public.backend_users TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_dbauth_user; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.acorn_dbauth_user FROM sz;
GRANT ALL ON TABLE public.acorn_dbauth_user TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_dbauth_user TO PUBLIC;
GRANT ALL ON TABLE public.acorn_dbauth_user TO token_5;


--
-- Name: TABLE acorn_enrollment_courses; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_courses TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_courses TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_courses TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_courses TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_students; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_students TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_students TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_students TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_students TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_course_year_semesters; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_course_year_semesters TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_course_year_semesters TO token_5;
GRANT ALL ON TABLE public.acorn_university_course_year_semesters TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_course_year_semesters TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_courses; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_courses TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_courses TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_courses TO token_5;
GRANT ALL ON TABLE public.acorn_university_courses TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_status; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_status TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_status TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_status TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_status TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_user_group_version; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_user_group_version TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_user_group_version TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_user_group_version TO token_5;
GRANT ALL ON TABLE public.acorn_user_user_group_version TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_user_groups; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_user_groups TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_user_groups TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_user_groups TO token_5;
GRANT ALL ON TABLE public.acorn_user_user_groups TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_olapcube; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_olapcube TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_olapcube TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_olapcube TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_enrollment_statistics; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_enrollment_statistics TO PUBLIC;
GRANT ALL ON TABLE public.acorn_enrollment_statistics TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_enrollment_statistics TO token_5;
GRANT ALL ON TABLE public.acorn_enrollment_statistics TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_result_internal2s; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_result_internal2s TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_result_internal2s TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_result_internal2s TO token_5;
GRANT ALL ON TABLE public.acorn_exam_result_internal2s TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_results; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_results TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_results TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_results TO token_5;
GRANT ALL ON TABLE public.acorn_exam_results TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_user_group_versions; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_user_group_versions TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_user_group_versions TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_user_group_versions TO token_5;
GRANT ALL ON TABLE public.acorn_user_user_group_versions TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_data_entry_scores; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_data_entry_scores TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_data_entry_scores TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_data_entry_scores TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_data_entry_scores TO token_5;


--
-- Name: TABLE acorn_user_languages; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_languages TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_languages TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_languages TO token_5;
GRANT ALL ON TABLE public.acorn_user_languages TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_user_languages; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_user_languages TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_user_languages TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_user_languages TO token_5;
GRANT ALL ON TABLE public.acorn_user_user_languages TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_exam_certificates; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_certificates TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_certificates TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_certificates TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_certificates TO token_5;


--
-- Name: TABLE acorn_exam_papers; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_papers TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_papers TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_papers TO token_5;


--
-- Name: TABLE acorn_exam_token2s; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_exam_token2s TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_exam_token2s TO PUBLIC;
GRANT ALL ON TABLE public.acorn_exam_token2s TO token_5;
GRANT ALL ON TABLE public.acorn_exam_token2s TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_locations; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_locations TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_locations TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_locations TO token_5;
GRANT ALL ON TABLE public.acorn_location_locations TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_user_addresses; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_user_addresses TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_user_addresses TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_user_addresses TO token_5;
GRANT ALL ON TABLE public.acorn_location_user_addresses TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_address_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_address_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_address_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_address_types TO token_5;
GRANT ALL ON TABLE public.acorn_location_address_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_addresses; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_addresses TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_addresses TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_addresses TO token_5;
GRANT ALL ON TABLE public.acorn_location_addresses TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_area_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_area_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_area_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_area_types TO token_5;
GRANT ALL ON TABLE public.acorn_location_area_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_areas; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_areas TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_areas TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_areas TO token_5;
GRANT ALL ON TABLE public.acorn_location_areas TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_gps; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_gps TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_gps TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_gps TO token_5;
GRANT ALL ON TABLE public.acorn_location_gps TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_user_group_location; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_user_group_location TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_user_group_location TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_user_group_location TO token_5;
GRANT ALL ON TABLE public.acorn_location_user_group_location TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_servers; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_servers TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_servers TO PUBLIC;
GRANT ALL ON TABLE public.acorn_servers TO token_5;
GRANT ALL ON TABLE public.acorn_servers TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_lookup; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_lookup TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_lookup TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_lookup TO token_5;
GRANT ALL ON TABLE public.acorn_location_lookup TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_location_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_location_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_location_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_location_types TO token_5;
GRANT ALL ON TABLE public.acorn_location_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_action; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_action TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_action TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_action TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_action TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_label; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_label TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_label TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_label TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_label TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_message; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_message TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_message TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_message TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_message TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_message_instance; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_message_instance TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_message_instance TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_message_instance TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_message_instance TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_message_message; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_message_message TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_message_message TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_message_message TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_message_message TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_message_user; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_message_user TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_message_user TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_message_user TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_message_user TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_message_user_group; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_message_user_group TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_message_user_group TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_message_user_group TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_message_user_group TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_status; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_status TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_status TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_status TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_status TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_messaging_user_message_status; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_messaging_user_message_status TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_messaging_user_message_status TO PUBLIC;
GRANT ALL ON TABLE public.acorn_messaging_user_message_status TO token_5;
GRANT ALL ON TABLE public.acorn_messaging_user_message_status TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_reporting_reports; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_reporting_reports TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_reporting_reports TO PUBLIC;
GRANT ALL ON TABLE public.acorn_reporting_reports TO token_5;
GRANT ALL ON TABLE public.acorn_reporting_reports TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE acorn_reporting_reports_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.acorn_reporting_reports_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.acorn_reporting_reports_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.acorn_reporting_reports_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.acorn_reporting_reports_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_course_language; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_course_language TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_course_language TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_course_language TO token_5;
GRANT ALL ON TABLE public.acorn_university_course_language TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_departments; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_departments TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_departments TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_departments TO token_5;
GRANT ALL ON TABLE public.acorn_university_departments TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_education_authorities; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_education_authorities TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_education_authorities TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_education_authorities TO token_5;
GRANT ALL ON TABLE public.acorn_university_education_authorities TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_faculties; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_faculties TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_faculties TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_faculties TO token_5;
GRANT ALL ON TABLE public.acorn_university_faculties TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_legacy_scores; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.acorn_university_legacy_scores FROM sz;
GRANT ALL ON TABLE public.acorn_university_legacy_scores TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_legacy_scores TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_legacy_scores TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_legacy_scores TO token_5;


--
-- Name: TABLE acorn_user_ethnicities; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_ethnicities TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_ethnicities TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_ethnicities TO token_5;
GRANT ALL ON TABLE public.acorn_user_ethnicities TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_religions; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_religions TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_religions TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_religions TO token_5;
GRANT ALL ON TABLE public.acorn_user_religions TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_legacy_fulls; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_legacy_fulls TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_legacy_fulls TO token_5;
GRANT ALL ON TABLE public.acorn_university_legacy_fulls TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_legacy_fulls TO sz WITH GRANT OPTION;


--
-- Name: TABLE university_mofadala_baccalaureate_marks; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_baccalaureate_marks FROM sz;
GRANT ALL ON TABLE public.university_mofadala_baccalaureate_marks TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_baccalaureate_marks TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_baccalaureate_marks TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_baccalaureate_marks TO token_5;


--
-- Name: TABLE acorn_university_legacy_updates; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_legacy_updates TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_legacy_updates TO token_5;
GRANT ALL ON TABLE public.acorn_university_legacy_updates TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_legacy_updates TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_schools; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_schools TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_schools TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_schools TO token_5;
GRANT ALL ON TABLE public.acorn_university_schools TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_course_material_addition; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_course_material_addition TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_course_material_addition TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_course_material_addition TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_course_material_addition TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_course_material_removal; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_course_material_removal TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_course_material_removal TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_course_material_removal TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_course_material_removal TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_lookups; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_lookups TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_lookups TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_lookups TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_lookups TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_student_type; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_student_type TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_student_type TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_student_type TO token_5;
GRANT ALL ON TABLE public.acorn_university_student_type TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_teachers; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_teachers TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_teachers TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_teachers TO token_5;
GRANT ALL ON TABLE public.acorn_university_teachers TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_university_universities; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_university_universities TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_university_universities TO PUBLIC;
GRANT ALL ON TABLE public.acorn_university_universities TO token_5;
GRANT ALL ON TABLE public.acorn_university_universities TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_mail_blockers; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_mail_blockers TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_mail_blockers TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_mail_blockers TO token_5;
GRANT ALL ON TABLE public.acorn_user_mail_blockers TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_role_user; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_role_user TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_role_user TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_role_user TO token_5;
GRANT ALL ON TABLE public.acorn_user_role_user TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_roles; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_roles TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_roles TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_roles TO token_5;
GRANT ALL ON TABLE public.acorn_user_roles TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_throttle; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_throttle TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_throttle TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_throttle TO token_5;
GRANT ALL ON TABLE public.acorn_user_throttle TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_user_group; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_user_group TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_user_group TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_user_group TO token_5;
GRANT ALL ON TABLE public.acorn_user_user_group TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_user_group_types; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_user_group_types TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_user_group_types TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_user_group_types TO token_5;
GRANT ALL ON TABLE public.acorn_user_user_group_types TO sz WITH GRANT OPTION;


--
-- Name: TABLE acorn_user_user_group_version_usages; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.acorn_user_user_group_version_usages TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.acorn_user_user_group_version_usages TO PUBLIC;
GRANT ALL ON TABLE public.acorn_user_user_group_version_usages TO token_5;
GRANT ALL ON TABLE public.acorn_user_user_group_version_usages TO sz WITH GRANT OPTION;


--
-- Name: TABLE backend_access_log; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.backend_access_log TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.backend_access_log TO PUBLIC;
GRANT ALL ON TABLE public.backend_access_log TO token_5;
GRANT ALL ON TABLE public.backend_access_log TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE backend_access_log_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.backend_access_log_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.backend_access_log_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.backend_access_log_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.backend_access_log_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE backend_user_groups; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.backend_user_groups TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.backend_user_groups TO PUBLIC;
GRANT ALL ON TABLE public.backend_user_groups TO token_5;
GRANT ALL ON TABLE public.backend_user_groups TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE backend_user_groups_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.backend_user_groups_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.backend_user_groups_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.backend_user_groups_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.backend_user_groups_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE backend_user_preferences; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.backend_user_preferences TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.backend_user_preferences TO PUBLIC;
GRANT ALL ON TABLE public.backend_user_preferences TO token_5;
GRANT ALL ON TABLE public.backend_user_preferences TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE backend_user_preferences_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.backend_user_preferences_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.backend_user_preferences_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.backend_user_preferences_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.backend_user_preferences_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE backend_user_roles; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.backend_user_roles TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.backend_user_roles TO PUBLIC;
GRANT ALL ON TABLE public.backend_user_roles TO token_5;
GRANT ALL ON TABLE public.backend_user_roles TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE backend_user_roles_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.backend_user_roles_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.backend_user_roles_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.backend_user_roles_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.backend_user_roles_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE backend_user_throttle; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.backend_user_throttle TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.backend_user_throttle TO PUBLIC;
GRANT ALL ON TABLE public.backend_user_throttle TO token_5;
GRANT ALL ON TABLE public.backend_user_throttle TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE backend_user_throttle_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.backend_user_throttle_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.backend_user_throttle_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.backend_user_throttle_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.backend_user_throttle_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE backend_users_groups; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.backend_users_groups TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.backend_users_groups TO PUBLIC;
GRANT ALL ON TABLE public.backend_users_groups TO token_5;
GRANT ALL ON TABLE public.backend_users_groups TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE backend_users_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.backend_users_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.backend_users_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.backend_users_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.backend_users_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE cache; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.cache TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.cache TO PUBLIC;
GRANT ALL ON TABLE public.cache TO token_5;
GRANT ALL ON TABLE public.cache TO sz WITH GRANT OPTION;


--
-- Name: TABLE cms_theme_data; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.cms_theme_data TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.cms_theme_data TO PUBLIC;
GRANT ALL ON TABLE public.cms_theme_data TO token_5;
GRANT ALL ON TABLE public.cms_theme_data TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE cms_theme_data_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.cms_theme_data_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.cms_theme_data_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.cms_theme_data_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.cms_theme_data_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE cms_theme_logs; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.cms_theme_logs TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.cms_theme_logs TO PUBLIC;
GRANT ALL ON TABLE public.cms_theme_logs TO token_5;
GRANT ALL ON TABLE public.cms_theme_logs TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE cms_theme_logs_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.cms_theme_logs_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.cms_theme_logs_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.cms_theme_logs_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.cms_theme_logs_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE cms_theme_templates; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.cms_theme_templates TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.cms_theme_templates TO PUBLIC;
GRANT ALL ON TABLE public.cms_theme_templates TO token_5;
GRANT ALL ON TABLE public.cms_theme_templates TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE cms_theme_templates_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.cms_theme_templates_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.cms_theme_templates_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.cms_theme_templates_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.cms_theme_templates_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE deferred_bindings; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.deferred_bindings TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.deferred_bindings TO PUBLIC;
GRANT ALL ON TABLE public.deferred_bindings TO token_5;
GRANT ALL ON TABLE public.deferred_bindings TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE deferred_bindings_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.deferred_bindings_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.deferred_bindings_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.deferred_bindings_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.deferred_bindings_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE failed_jobs; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.failed_jobs TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.failed_jobs TO PUBLIC;
GRANT ALL ON TABLE public.failed_jobs TO token_5;
GRANT ALL ON TABLE public.failed_jobs TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE failed_jobs_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.failed_jobs_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.failed_jobs_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.failed_jobs_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.failed_jobs_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE job_batches; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.job_batches TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.job_batches TO PUBLIC;
GRANT ALL ON TABLE public.job_batches TO token_5;
GRANT ALL ON TABLE public.job_batches TO sz WITH GRANT OPTION;


--
-- Name: TABLE jobs; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.jobs TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.jobs TO PUBLIC;
GRANT ALL ON TABLE public.jobs TO token_5;
GRANT ALL ON TABLE public.jobs TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE jobs_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.jobs_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.jobs_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.jobs_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.jobs_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE migrations; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.migrations TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.migrations TO PUBLIC;
GRANT ALL ON TABLE public.migrations TO token_5;
GRANT ALL ON TABLE public.migrations TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE migrations_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.migrations_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.migrations_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.migrations_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.migrations_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE winter_location_countries; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.winter_location_countries TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.winter_location_countries TO PUBLIC;
GRANT ALL ON TABLE public.winter_location_countries TO token_5;
GRANT ALL ON TABLE public.winter_location_countries TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE rainlab_location_countries_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.rainlab_location_countries_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.rainlab_location_countries_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.rainlab_location_countries_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.rainlab_location_countries_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE winter_location_states; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.winter_location_states TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.winter_location_states TO PUBLIC;
GRANT ALL ON TABLE public.winter_location_states TO token_5;
GRANT ALL ON TABLE public.winter_location_states TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE rainlab_location_states_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.rainlab_location_states_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.rainlab_location_states_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.rainlab_location_states_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.rainlab_location_states_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE winter_translate_attributes; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.winter_translate_attributes TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.winter_translate_attributes TO PUBLIC;
GRANT ALL ON TABLE public.winter_translate_attributes TO token_5;
GRANT ALL ON TABLE public.winter_translate_attributes TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE rainlab_translate_attributes_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.rainlab_translate_attributes_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.rainlab_translate_attributes_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.rainlab_translate_attributes_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.rainlab_translate_attributes_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE winter_translate_indexes; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.winter_translate_indexes TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.winter_translate_indexes TO PUBLIC;
GRANT ALL ON TABLE public.winter_translate_indexes TO token_5;
GRANT ALL ON TABLE public.winter_translate_indexes TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE rainlab_translate_indexes_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.rainlab_translate_indexes_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.rainlab_translate_indexes_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.rainlab_translate_indexes_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.rainlab_translate_indexes_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE winter_translate_locales; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.winter_translate_locales TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.winter_translate_locales TO PUBLIC;
GRANT ALL ON TABLE public.winter_translate_locales TO token_5;
GRANT ALL ON TABLE public.winter_translate_locales TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE rainlab_translate_locales_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.rainlab_translate_locales_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.rainlab_translate_locales_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.rainlab_translate_locales_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.rainlab_translate_locales_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE winter_translate_messages; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.winter_translate_messages TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.winter_translate_messages TO PUBLIC;
GRANT ALL ON TABLE public.winter_translate_messages TO token_5;
GRANT ALL ON TABLE public.winter_translate_messages TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE rainlab_translate_messages_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.rainlab_translate_messages_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.rainlab_translate_messages_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.rainlab_translate_messages_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.rainlab_translate_messages_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.sessions TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.sessions TO PUBLIC;
GRANT ALL ON TABLE public.sessions TO token_5;
GRANT ALL ON TABLE public.sessions TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_event_logs; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_event_logs TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_event_logs TO PUBLIC;
GRANT ALL ON TABLE public.system_event_logs TO token_5;
GRANT ALL ON TABLE public.system_event_logs TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_event_logs_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_event_logs_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_event_logs_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_event_logs_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_event_logs_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_files; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_files TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_files TO PUBLIC;
GRANT ALL ON TABLE public.system_files TO token_5;
GRANT ALL ON TABLE public.system_files TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_files_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_files_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_files_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_files_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_files_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_mail_layouts; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_mail_layouts TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_mail_layouts TO PUBLIC;
GRANT ALL ON TABLE public.system_mail_layouts TO token_5;
GRANT ALL ON TABLE public.system_mail_layouts TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_mail_layouts_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_mail_layouts_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_mail_layouts_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_mail_layouts_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_mail_layouts_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_mail_partials; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_mail_partials TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_mail_partials TO PUBLIC;
GRANT ALL ON TABLE public.system_mail_partials TO token_5;
GRANT ALL ON TABLE public.system_mail_partials TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_mail_partials_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_mail_partials_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_mail_partials_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_mail_partials_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_mail_partials_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_mail_templates; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_mail_templates TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_mail_templates TO PUBLIC;
GRANT ALL ON TABLE public.system_mail_templates TO token_5;
GRANT ALL ON TABLE public.system_mail_templates TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_mail_templates_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_mail_templates_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_mail_templates_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_mail_templates_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_mail_templates_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_parameters; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_parameters TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_parameters TO PUBLIC;
GRANT ALL ON TABLE public.system_parameters TO token_5;
GRANT ALL ON TABLE public.system_parameters TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_parameters_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_parameters_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_parameters_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_parameters_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_parameters_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_plugin_history; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_plugin_history TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_plugin_history TO PUBLIC;
GRANT ALL ON TABLE public.system_plugin_history TO token_5;
GRANT ALL ON TABLE public.system_plugin_history TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_plugin_history_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_plugin_history_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_plugin_history_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_plugin_history_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_plugin_history_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_plugin_versions; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_plugin_versions TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_plugin_versions TO PUBLIC;
GRANT ALL ON TABLE public.system_plugin_versions TO token_5;
GRANT ALL ON TABLE public.system_plugin_versions TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_plugin_versions_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_plugin_versions_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_plugin_versions_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_plugin_versions_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_plugin_versions_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_request_logs; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_request_logs TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_request_logs TO PUBLIC;
GRANT ALL ON TABLE public.system_request_logs TO token_5;
GRANT ALL ON TABLE public.system_request_logs TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_request_logs_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_request_logs_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_request_logs_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_request_logs_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_request_logs_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_revisions; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_revisions TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_revisions TO PUBLIC;
GRANT ALL ON TABLE public.system_revisions TO token_5;
GRANT ALL ON TABLE public.system_revisions TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_revisions_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_revisions_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_revisions_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_revisions_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_revisions_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE system_settings; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON TABLE public.system_settings TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.system_settings TO PUBLIC;
GRANT ALL ON TABLE public.system_settings TO token_5;
GRANT ALL ON TABLE public.system_settings TO sz WITH GRANT OPTION;


--
-- Name: SEQUENCE system_settings_id_seq; Type: ACL; Schema: public; Owner: university
--

GRANT ALL ON SEQUENCE public.system_settings_id_seq TO token_1 WITH GRANT OPTION;
GRANT ALL ON SEQUENCE public.system_settings_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE public.system_settings_id_seq TO token_5;
GRANT ALL ON SEQUENCE public.system_settings_id_seq TO sz WITH GRANT OPTION;


--
-- Name: TABLE university_mofadala_branches; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_branches FROM sz;
GRANT ALL ON TABLE public.university_mofadala_branches TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_branches TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_branches TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_branches TO token_5;


--
-- Name: TABLE university_mofadala_candidate_exam_material_marks; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_candidate_exam_material_marks FROM sz;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_material_marks TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_material_marks TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_material_marks TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_material_marks TO token_5;


--
-- Name: TABLE university_mofadala_candidate_exam_materials; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_candidate_exam_materials FROM sz;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_materials TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_materials TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_materials TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_candidate_exam_materials TO token_5;


--
-- Name: TABLE university_mofadala_candidate_exams; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_candidate_exams FROM sz;
GRANT ALL ON TABLE public.university_mofadala_candidate_exams TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_candidate_exams TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_candidate_exams TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_candidate_exams TO token_5;


--
-- Name: TABLE university_mofadala_certificate_languages; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_certificate_languages FROM sz;
GRANT ALL ON TABLE public.university_mofadala_certificate_languages TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_certificate_languages TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_certificate_languages TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_certificate_languages TO token_5;


--
-- Name: TABLE university_mofadala_cities; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_cities FROM sz;
GRANT ALL ON TABLE public.university_mofadala_cities TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_cities TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_cities TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_cities TO token_5;


--
-- Name: TABLE university_mofadala_department_details; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_department_details FROM sz;
GRANT ALL ON TABLE public.university_mofadala_department_details TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_department_details TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_department_details TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_department_details TO token_5;


--
-- Name: TABLE university_mofadala_departments; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_departments FROM sz;
GRANT ALL ON TABLE public.university_mofadala_departments TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_departments TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_departments TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_departments TO token_5;


--
-- Name: TABLE university_mofadala_exam_centers; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_exam_centers FROM sz;
GRANT ALL ON TABLE public.university_mofadala_exam_centers TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_exam_centers TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_exam_centers TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_exam_centers TO token_5;


--
-- Name: TABLE university_mofadala_mofadala_years; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_mofadala_years FROM sz;
GRANT ALL ON TABLE public.university_mofadala_mofadala_years TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_mofadala_years TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_mofadala_years TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_mofadala_years TO token_5;


--
-- Name: TABLE university_mofadala_student_desire_details; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_student_desire_details FROM sz;
GRANT ALL ON TABLE public.university_mofadala_student_desire_details TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_student_desire_details TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_student_desire_details TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_student_desire_details TO token_5;


--
-- Name: TABLE university_mofadala_students; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_students FROM sz;
GRANT ALL ON TABLE public.university_mofadala_students TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_students TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_students TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_students TO token_5;


--
-- Name: TABLE university_mofadala_type_certificates; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_type_certificates FROM sz;
GRANT ALL ON TABLE public.university_mofadala_type_certificates TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_type_certificates TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_type_certificates TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_type_certificates TO token_5;


--
-- Name: TABLE university_mofadala_universities; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_universities FROM sz;
GRANT ALL ON TABLE public.university_mofadala_universities TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_universities TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_universities TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_universities TO token_5;


--
-- Name: TABLE university_mofadala_university_categories; Type: ACL; Schema: public; Owner: sz
--

REVOKE ALL ON TABLE public.university_mofadala_university_categories FROM sz;
GRANT ALL ON TABLE public.university_mofadala_university_categories TO sz WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_university_categories TO token_1 WITH GRANT OPTION;
GRANT ALL ON TABLE public.university_mofadala_university_categories TO PUBLIC;
GRANT ALL ON TABLE public.university_mofadala_university_categories TO token_5;


--
-- PostgreSQL database dump complete
--

\unrestrict 6Oa8bFPWlLpYwJM43TSSopPaWu9scslvtHvQDnd1Qqs8bLxBBYUHdjymhZ6Hau1

