#!/usr/bin/env php
<?php namespace Acorn\CreateSystem;

$RED="\033[03;31m";
$GREEN="\033[02;31m";
$YELLOW="\033[01;31m";
$NC="\033[0m";
//$TICK="âœ“"
//$CROSS="âœ˜"
$heading = str_repeat('-', 20);

require_once('acorn-create-system-classes/GlobalHelpers.php');
require_once('acorn-create-system-classes/Spyc.php'); // YAML parser
require_once('acorn-create-system-classes/DatabaseNamingConvention.php');
require_once('acorn-create-system-classes/DB.php');
require_once('acorn-create-system-classes/Module.php');
require_once('acorn-create-system-classes/Plugin.php');
require_once('acorn-create-system-classes/Framework.php');
require_once('acorn-create-system-classes/WinterCMS.php');

// ------------------------------------------- Inputs
$file = basename(__FILE__);
print("Usage: $file [<plugin-name|all|lang.yaml> <git command (push|ask|leave)>]\n");
$installPlugins = (isset($argv[1]) ? $argv[1] : NULL);
$gitPolicy      = (isset($argv[2]) ? $argv[2] : NULL);

// ------------------------------------------- lang.yaml
if ($installPlugins == 'lang.yaml') {
    print("Importing language translation file [$installPlugins]\n");
    $langTranslationFile = \Spyc::YAMLLoad($installPlugins);
    $tables = $langTranslationFile['tables'];
    foreach ($tables as $schemas) {
        foreach ($schemas as $authors) {
            foreach ($authors as $pluginName => $plugins) {
                foreach ($plugins as $tableName => $table) {
                    if (isset($table['columns'])) foreach ($table['columns'] as $columnName => $column) {
                        $textEn = $column['en'];
                        print("  $tableName:$columnName => $textEn\n");
                    }
                    if (isset($table['foreignkeys'])) foreach ($table['foreignkeys'] as $foreignkeyName => $foreignkey) {
                        $textEn = $foreignkey['en'];
                        print("  $tableName:$foreignkeyName => $textEn\n");
                    }
                    if (isset($table['label'])) {
                        $textEn = $table['label']['en'];
                        print("  $tableName:label => $textEn\n");
                    }
                    if (isset($table['label_plural'])) {
                        $textEn = $table['label_plural']['en'];
                        print("  $tableName:label_plural => $textEn\n");
                    }
                }
            }
        }
    }
    return;
}

// ------------------------------------------- Framework
$version       = '1.0';
$cwd           = getcwd();
$scriptPath    = realpath($argv[0]);
$scriptDirPath = dirname($scriptPath);
$framework     = Framework::detect($cwd, $scriptDirPath, __FILE__, $version);
if (!$framework) throw new \Exception("No framework found at [$cwd]");
$framework->show();

// ------------------------------------------- Auto viewa
file_put_contents('date_tables_view.sql', "DROP VIEW IF EXISTS acorn_calendar_upcreated_ats;\n");
file_put_contents('date_tables_view.sql', "CREATE OR REPLACE VIEW acorn_calendar_upcreated_ats as\n", FILE_APPEND);
file_put_contents('name_tables_view.sql', "DROP VIEW IF EXISTS acorn_names;\n");
file_put_contents('name_tables_view.sql', "CREATE OR REPLACE VIEW acorn_names as\n", FILE_APPEND);

// ------------------------------------------- Read DB
$nc      = new AcornNamingConvention();
$db      = new DB($nc, $framework); // TODO: Also db->comment => properties heye
do {
    $tables  = array_merge($db->tables(), $db->views(), $db->materializedViews());
    foreach ($tables as &$table) {
        $table->loadForeignKeys();
        $table->loadActionFunctions();
        $table->loadTriggers();
    }

    // Standard column list and fix checks
    print("Running all schema checks...\n");
    $changes = FALSE;
    foreach ($tables as &$table) {
        if ($table->check()) 
            $changes = TRUE;
    }
    print($changes ? "RELOAD\n" : "OK\n");
} while ($changes);

// ------------------------------------------- Generate plugins
$modules = Module::allFromTables($framework, $tables);
$plugins = Plugin::allFromTables($framework, $tables);

print("$heading: Modules\n");
foreach ($modules as $module) $module->show();
print("$heading: Plugins\n");
foreach ($plugins as $plugin) $plugin->show();

$db->runSQLFile('date_tables_view.sql');
$db->runSQLFile('name_tables_view.sql');

// ------------------------------------------- Choose which plugin to create()
if ($installPlugins == '*') {
    $chosenPlugins = &$plugins;
} else if ($installPlugins) {
    $chosenPlugins = array();
    foreach (explode(',', $installPlugins) as $pluginName) {
        $plugin = Plugin::get(ucfirst(trim($pluginName)));
        if (!$plugin) throw new \Exception("Plugin [$pluginName] not found");
        array_push($chosenPlugins, $plugin);
    }
} else {
    print("\n");
    print("{$YELLOW}CHOOSE{$NC}: No plugin name has been provided\n");
    $i = 1;
    $choices = array();
    print("[{$GREEN}0{$NC}] all\n");
    foreach ($plugins as $plugin) {
        if ($plugin->isOurs()) {
            print("[{$GREEN}$i{$NC}] ");
            $framework->showPluginStatus($plugin);
            $choices["$i"] = $plugin;
            print("\n");
            $i++;
        }
    }
    $i = readline("Which plugin would you like to process? ");
    if ($i == '0') $chosenPlugins = &$plugins;
    else {
        if (!isset($choices[$i])) throw new \Exception("Option [$i] not valid");
        $plugin = $choices[$i];
        print("{$YELLOW}CHOICE{$NC}: $plugin->name\n");
        $chosenPlugins = array($plugin);
    }
}


// ------------------------------------------- Write the plugins
// to the framework
// README.md generation is buffered in the plugin create
foreach ($chosenPlugins as $plugin) {
    $framework->create($plugin);
}
